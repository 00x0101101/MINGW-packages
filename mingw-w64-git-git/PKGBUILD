# Maintainer: Martell Malone <martellmalone@gmail.com>
# Maintainer: Ray Donnelly <mingw.android@gmail.com>

_realname=git
# Marat Radchenko is trying to upstream mingw-w64 patches
# and Johannes Schindelin made a branch of msysgit for it
# Set _based_on_dscho_w64_msysgit to yes to build that.
# Patches that required re-basing for this repository are
# infixed with "-w64-msysgit".
_based_on_dscho_w64_msysgit=no
if [ "${_based_on_dscho_w64_msysgit}" = "yes" ]; then
  SRC_DIR=${_realname}-dscho
  GIT_URL="${SRC_DIR}::git+http://github.com/dscho/git.git#branch=w64-msysgit"
else
  SRC_DIR=${_realname}
  GIT_URL="${SRC_DIR}::git+http://github.com/msysgit/git.git"
fi

pkgname="${MINGW_PACKAGE_PREFIX}-${_realname}-git"
_ver_base=2.0.0
pkgver=2.0.0.47118.8768113
pkgrel=1
pkgdesc="The fast distributed version control system (mingw-w64)"
arch=('any')
url="http://git-scm.com/"
license=('GPL2')

depends=("${MINGW_PACKAGE_PREFIX}-libiconv")

options=(!libtool strip staticlibs)

source=(${GIT_URL}
        "0001-Don-t-redefine-_ReadWriteBarrier-in-malloc.c.h.patch"
        "0002-Undefine-FORCEINLINE-on-MinGW-w64-in-malloc.c.h.patch"
        "0003-Fix-BASIC_LDFLAGS-and-COMPAT_CFLAGS-for-64bit-MinGW-.patch"
        "0004-Also-look-in-winsock2.h-for-sockaddr_storage-and-loo.patch"
        "0005-Don-t-redefine-some-things-MinGW-w64-provides.patch"
        "0006-Include-ntdef.h-on-MinGW-w64-for-REPARSE_DATA_BUFFER.patch"
        "0007-Include-winsock2.h-and-not-netdb.h-on-MinGW-w64.patch"
        "0008-fix-mingw64-compat-wide-char.patch"
        "0009-fix-fork-for-mingw64.patch"
        "0010-Use-GIT_CHECK_FUNC-for-socket-and-basename.patch"
        "0010-w64-msysgit-Use-GIT_CHECK_FUNC-for-socket-and-basename.patch"
        "0011-Use-GIT_CHECK_FUNC-for-regcomp-regex.patch"
        "0011-w64-msysgit-Use-GIT_CHECK_FUNC-for-regcomp-regex.patch"
        "0012-Use-system-dirent.h-on-MinGW-w64.patch"
        "0013-Make-pthread-wrapper-only-for-mingw.patch"
        "0014-Do-not-compile-dirent-on-mingw64.patch"
        "0015-Alter-fscache-for-mingw64.patch")

md5sums=('SKIP'
         '613bff9cf5829bb19ff75f7f170be070'
         'd9ecacd550c5cbad3c15b3d17f798d18'
         '7c6cd4f6e00911916eaeb8f630bc65b2'
         '1c1bb553f33e04f6832bb1143168dee5'
         '12d349c1bc17cb641c4f920a105b152b'
         'd2fbdd6138adf6cb825ff98d8f881f43'
         '57ac589e09886d216492be142648078e'
         '92b8b2afaa7aa981fdb00eee29604cdc'
         '85dcef036a6d1d284b8433360b3f5dda'
         '78e76badb6f31338815f3c4aefd02a65'
         '69af98595eeabd892289de06d0cd009f'
         'a0e988d63bb370e0fc0503b283cf5a30'
         '6e59f1619c2a9d8575c53ca8a8ab7f6b'
         'cf741745d6cd1990299dd36a3bcd0716'
         'bb3c00ce3d7cf371ded7a10f4b4841a2'
         '5c24e2511d9b620df54fc15909ee8ebc'
         '9c6739820154856e587004178162ad8c')

pkgver() {
  cd "${srcdir}"/${SRC_DIR}
  printf "%s.%s.%s" "$_ver_base" "$(git rev-list --count HEAD)" "$(git rev-parse --short HEAD)"
}

prepare() {
  export PYTHON_PATH='/usr/bin/python2'
  cd "${srcdir}"/${SRC_DIR}

  if [ "${_based_on_dscho_w64_msysgit}" = "no" ]; then
    git am "${srcdir}"/0001-Don-t-redefine-_ReadWriteBarrier-in-malloc.c.h.patch
    git am "${srcdir}"/0002-Undefine-FORCEINLINE-on-MinGW-w64-in-malloc.c.h.patch
    git am "${srcdir}"/0003-Fix-BASIC_LDFLAGS-and-COMPAT_CFLAGS-for-64bit-MinGW-.patch
  fi
  git am "${srcdir}"/0004-Also-look-in-winsock2.h-for-sockaddr_storage-and-loo.patch
  if [ "${_based_on_dscho_w64_msysgit}" = "no" ]; then
    git am "${srcdir}"/0005-Don-t-redefine-some-things-MinGW-w64-provides.patch
    git am "${srcdir}"/0006-Include-ntdef.h-on-MinGW-w64-for-REPARSE_DATA_BUFFER.patch
  fi
  git am "${srcdir}"/0007-Include-winsock2.h-and-not-netdb.h-on-MinGW-w64.patch
  if [ "${_based_on_dscho_w64_msysgit}" = "no" ]; then
    git am "${srcdir}"/0008-fix-mingw64-compat-wide-char.patch
    git am "${srcdir}"/0009-fix-fork-for-mingw64.patch
  fi
  if [ "${_based_on_dscho_w64_msysgit}" = "no" ]; then
    git am "${srcdir}"/0010-Use-GIT_CHECK_FUNC-for-socket-and-basename.patch
    git am "${srcdir}"/0011-Use-GIT_CHECK_FUNC-for-regcomp-regex.patch
  else
    git am "${srcdir}"/0010-w64-msysgit-Use-GIT_CHECK_FUNC-for-socket-and-basename.patch
    git am "${srcdir}"/0011-w64-msysgit-Use-GIT_CHECK_FUNC-for-regcomp-regex.patch
  fi
  if [ "${_based_on_dscho_w64_msysgit}" = "no" ]; then
    git am "${srcdir}"/0012-Use-system-dirent.h-on-MinGW-w64.patch
    git am "${srcdir}"/0013-Make-pthread-wrapper-only-for-mingw.patch
    git am "${srcdir}"/0014-Do-not-compile-dirent-on-mingw64.patch
    git am "${srcdir}"/0015-Alter-fscache-for-mingw64.patch
  fi

  autoreconf -fi
}

build() {

  export PYTHON_PATH=/usr/bin/python2
  cd "$srcdir"/${SRC_DIR}

  ./configure \
    --build=${MINGW_CHOST} \
    --host=${MINGW_CHOST} \
    --prefix=${MINGW_PREFIX} \
    --libexecdir=${MINGW_PREFIX}/lib \
    --with-editor=vim \
    --htmldir=${MINGW_PREFIX}/share/doc/git/html \
    --mandir=${MINGW_PREFIX}/share/man \
    --with-curl=${MINGW_PREFIX}

  make INSTALLDIRS=vendor -j1 all V=1
  make -C contrib/subtree prefix=/usr all V=1
}

package() {
  export PYTHON_PATH=/usr/bin/python2
  cd "$srcdir"/${SRC_DIR}
  make INSTALLDIRS=vendor DESTDIR="$pkgdir" install
}
