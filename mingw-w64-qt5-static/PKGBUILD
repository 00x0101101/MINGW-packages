# Maintainer: Ray Donnelly <mingw.android@gmail.com>
# Contributor: Alexey Pavlov <alexpux@gmail.com>

_realname=qt5-static
_mingw_suff=mingw-w64-${CARCH}
pkgname="${_mingw_suff}-${_realname}"
_ver_base=5.3.0-beta
pkgver=${_ver_base//-/}
pkgrel=1
arch=('any')
pkgdesc="A cross-platform application and UI framework (mingw-w64 static)"
url='http://qt-project.org/'
install=qt5-${CARCH}.install
license=('GPL3' 'LGPL' 'FDL' 'custom')
depends=("${_mingw_suff}-gcc-libs"
			"${_mingw_suff}-qtbinpatcher"
			"${_mingw_suff}-dbus")
makedepends=("${_mingw_suff}-gcc"
			"${_mingw_suff}-postgresql"
			"${_mingw_suff}-libmariadbclient"
			"${_mingw_suff}-libfbclient"
			"${_mingw_suff}-python2"
			"${_mingw_suff}-ruby"
			"perl"
			"gperf"
			"m4"
			"flex"
			"${_mingw_suff}-make"
			"${_mingw_suff}-pkg-config")
groups=("${_mingw_suff}-qt" "${_mingw_suff}-qt5")
options=('!strip' 'staticlibs')
_pkgfqn="qt-everywhere-opensource-src-${_ver_base}"
source=("http://download.qt-project.org/development_releases/qt/${pkgver%.*}/${_ver_base}/single/${_pkgfqn}.tar.xz"
		#http://download.qt-project.org/official_releases/qt/${pkgver%.*}/${_ver_base}/single/${_pkgfqn}.tar.xz
		qt-5.0.0-oracle-driver-prompt.patch
		qt-5.0.0-use-fbclient-instead-of-gds32.patch
		qt-5.1.0-win32-g++-mkspec-optimization.patch
		qt-5.1.x-fix-configure-tests.patch
		qt-5.1.x-syncqt-fix.patch
		qt-5.1.x-win_flex-replace.patch
		qt-5.2.1-win32-g-Enable-static-builds.patch
		qt-5.2.1-win32-g-Add-QMAKE_EXTENSION_IMPORTLIB-defaulting-to-.patch
		qt-5.2.1-qmlimportscanner-Ensure-the-correct-variant-is-run.patch)
md5sums=('4f4a8302c52ef80bbb62bf764e682e47'
         '10790f1672b5f2b83e5473ad6cd48cd3'
         '86899e8f2858c48d4827282c04696b76'
         'd675dbbe15d275c84f2792c75212ace0'
         '41391e320dcf03f932d7950b503102e2'
         '2235d876133956a788c393310fa8a526'
         '608a30dbf8f5c2146d7285b551b03252'
         '6c6496de7e57e9e5b8a89b306fab37a8'
         'ec33aabe4f7f55f729c686ec523ebe99'
         'd7d745b5915cff6a7e7f4cc4e9760de0')

prepare() {
  cd ${_pkgfqn}

  patch -p1 -i ${srcdir}/qt-5.0.0-oracle-driver-prompt.patch
  patch -p1 -i ${srcdir}/qt-5.0.0-use-fbclient-instead-of-gds32.patch
  patch -p1 -i ${srcdir}/qt-5.1.0-win32-g++-mkspec-optimization.patch
  patch -p1 -i ${srcdir}/qt-5.1.x-syncqt-fix.patch
  patch -p1 -i ${srcdir}/qt-5.1.x-win_flex-replace.patch

  # My qt-5.2.1 win32-g++ static patches are against qtbase's dev branch.
  pushd qtbase
  patch -p1 -i ${srcdir}/qt-5.2.1-win32-g-Enable-static-builds.patch
  patch -p1 -i ${srcdir}/qt-5.2.1-win32-g-Add-QMAKE_EXTENSION_IMPORTLIB-defaulting-to-.patch
  patch -p1 -i ${srcdir}/qt-5.2.1-qmlimportscanner-Ensure-the-correct-variant-is-run.patch
  popd

  local _optim=
  case ${MINGW_CHOST} in
	i686*)
		_optim="-march=i686 -mtune=core2"
	;;
	x86_64*)
		_optim="-march=nocona -mtune=core2"
	;;
  esac

  sed -i "s|%OPTIMIZE_OPT%|${_optim}|g" qtbase/mkspecs/win32-g++/qmake.conf
  sed -i "s|%STATICFLAGS%||g" qtbase/mkspecs/win32-g++/qmake.conf # -static-libstdc++ -static-libgcc
  sed -i "s|-O2|${CXXFLAGS}|" qtbase/mkspecs/common/{g++,gcc}-base.conf
  sed -i "/^QMAKE_LFLAGS_RPATH/s| -Wl,-rpath,||g" qtbase/mkspecs/common/gcc-base-unix.conf
  sed -i "/^QMAKE_LFLAGS\s/s|+=|+= ${LDFLAGS}|g" qtbase/mkspecs/common/gcc-base.conf
}

build() {
  # To keep the build folder name quite small (MAXPATH limit)
  # the source folder (long) is renamed to $CARCH (i686 or x86_64)
  [ -d ${CARCH} ] && rm -rf ${CARCH}
  mv ${_pkgfqn} ${CARCH}
  cd ${CARCH}
  touch qtbase/.gitignore
  #BUILD_WIN=$(pwd -W)
  #echo "BUILD_WIN $BUILD_WIN"

  mkdir -p ${pkgdir}${MINGW_PREFIX}/qt5-static
  pushd ${pkgdir}${MINGW_PREFIX}/qt5-static > /dev/null
  QTDIR_WIN=$(pwd -W)
  echo "QTDIR_WIN $QTDIR_WIN"
  popd > /dev/null

# The damage is already done in:

# cat ./qtbase/config.tests/.qmake.cache (came from qmake.vars originally):
# QMAKE_CFLAGS = -march=x86-64 -mtune=generic -O2 -pipe -D__USE_MINGW_ANSI_STDIO=1 -I/mingw64/include
# QMAKE_CXXFLAGS = -march=x86-64 -mtune=generic -O2 -pipe -D__USE_MINGW_ANSI_STDIO=1 -I/mingw64/include
# QMAKE_LFLAGS = -pipe -L/mingw64/lib

# .. QMAKE_LFLAGS comes from LDFLAGS, configure has:
#SYSTEM_VARIABLES="RANLIB STRIP OBJDUMP LD CC CXX CFLAGS CXXFLAGS LDFLAGS"
#for varname in $SYSTEM_VARIABLES; do
#    qmakevarname="${varname}"
#    # use LDFLAGS for autoconf compat, but qmake uses QMAKE_LFLAGS
#    if [ "${varname}" = "LDFLAGS" ]; then
#        qmakevarname="LFLAGS"
#    elif [ "${varname}" = "LD" ]; then
#        qmakevarname="LINK"
#    fi
#    cmd=`echo \
#'if [ -n "\$'${varname}'" ]; then
#    QMakeVar set QMAKE_'${qmakevarname}' "\$'${varname}'"
#fi'`
#    eval "$cmd"
#done

# But as well as the above, Makefiles end up with:
# LIBS        =        -L/mingw64/x86_64-w64-mingw32/lib -L/mingw64/lib -LC:/repo/mingw-w64-qt5-static/src/x86_64/qtbase/lib -lQt5Bootstrapd -luser32 -lole32 -ladvapi32

# .. these come from:
# [ '!' -z "$INCLUDES" ] && QMakeVar add INCLUDEPATH "$INCLUDES"
# [ '!' -z "$L_FLAGS" ] && QMakeVar add LIBS "$L_FLAGS"

  local -a _extra_inc
  for _inc in $(pkg-config --cflags dbus-1); do
    _extra_inc+=("$_inc")
  done
  plain _extra_inc is "${_extra_inc[@]}"

  export PATH=${srcdir}/${CARCH}/qtbase/bin:${srcdir}/${CARCH}/qtbase/lib:${MINGW_PREFIX}/qt5-static/bin:${MINGW_PREFIX}/bin:"${PATH}"

  # We're deliberately knocking out the system includes of -I/mingw64/include and system libraries of -L/mingw64/lib (actually all -I and -L)
  # .. there's another way but Ossi and Thiago didn't want to go there .. (REFERENCE?)
  # .. for us an alternative that will probably work is to prepend LDFLAGS with -LC:/repo/mingw-w64-qt5-static/src/${CARCH}/qtbase/lib
  export CFLAGS=$(echo $CFLAGS | sed 's#\([ ]*-I[^ ]*\)##g')
  export CXXFLAGS=$(echo $CXXFLAGS | sed 's#\([ ]*-I[^ ]*\)##g')
  export LDFLAGS=$(echo $LDFLAGS | sed 's#\([ ]*-L[^ ]*\)##g')
  ./configure \
        -prefix ${QTDIR_WIN} \
        -opengl desktop \
        -opensource \
        -confirm-license \
        -device-option QMAKE_EXTENSION_IMPORTLIB="dll.a" \
        -platform win32-g++ \
        -static \
        -debug-and-release \
        "${_extra_inc[@]}" \
        -no-fontconfig \
        -qt-zlib \
        -qt-pcre \
        -qt-libpng \
        -qt-libjpeg \
        -qt-freetype \
        -icu \
        -qt-sql-sqlite \
        -no-openssl \
        -dbus \
        -qt-harfbuzz \
        -make libs \
        -nomake tools \
        -nomake examples \
        -nomake tests

  make ${MAKEFLAGS}
}

package() {

  cd ${CARCH}

  export PATH=${pkgdir}${MINGW_PREFIX}/qt5-static/bin:${pkgdir}${MINGW_PREFIX}/bin:${srcdir}/${CARCH}/qtbase/bin:${srcdir}/${CARCH}/qtbase/lib:${PATH}
  
  ${MINGW_PREFIX}/bin/mingw32-make ${MAKEFLAGS} install #INSTALL_ROOT="${pkgdir}"
# .. qhelpgenerator.exe doesn't get built for some reason.
#  ${MINGW_PREFIX}/bin/mingw32-make ${MAKEFLAGS} docs
#  ${MINGW_PREFIX}/bin/mingw32-make ${MAKEFLAGS} install_qch_docs

  install -D -m644 LGPL_EXCEPTION.txt \
    "${pkgdir}${MINGW_PREFIX}/qt5-static"/share/licenses/qt5/LGPL_EXCEPTION.txt

  # Remove dll's from lib
  rm -f "${pkgdir}${MINGW_PREFIX}/qt5-static/lib"/*.dll
  
  # Workaround for installing empty .pc files
  plain "---> Fix pkgconfig files..."
  local _pc_files=( $(find ${srcdir}/${CARCH} -type f -name Qt5*.pc) )
  cp -f ${_pc_files[@]} ${pkgdir}${MINGW_PREFIX}/qt5-static/lib/pkgconfig/
  
  # Fix wrong path in prl files
  #find "${pkgdir}${MINGW_PREFIX}/qt5-static/lib" -type f -name '*.prl' \
  #  -exec sed -i -e '/^QMAKE_PRL_BUILD_DIR/d;s/\(QMAKE_PRL_LIBS =\).*/\1/' {} \;

  # Fix wrong qmake path in pri file
  #sed -i "s|${srcdir}/${CARCH}/qtbase|/usr|" \
  #  "${pkgdir}"/usr/lib/qt/mkspecs/modules/qt_lib_bootstrap_private.pri
}
