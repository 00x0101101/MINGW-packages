--- PyQt-gpl-5.3.1/configure.py.orig	2014-07-04 13:09:11.000000000 +0400
+++ PyQt-gpl-5.3.1/configure.py	2014-07-28 10:16:04.548400000 +0400
@@ -24,6 +24,7 @@
 import shutil
 import stat
 import sys
+from sysconfig import _POSIX_BUILD
 
 try:
     import sysconfig
@@ -373,23 +374,33 @@
         self.platform = sys.platform
         self.version = sys.hexversion >> 8
 
-        if hasattr(sysconfig, 'get_path'):
-            # The modern API.
-            self.inc_dir = sysconfig.get_path('include')
-            self.module_dir = sysconfig.get_path('platlib')
+        if "MSYSTEM" in os.environ:
+            from distutils import sysconfig as sysconf2
+            self.inc_dir = '/' + sysconf2.get_python_inc(plat_specific=1, prefix='')
+            self.module_dir = '/' + sysconf2.get_python_lib(plat_specific=1, prefix='')
         else:
-            # The legacy distutils API.
-            self.inc_dir = sysconfig.get_python_inc(plat_specific=1)
-            self.module_dir = sysconfig.get_python_lib(plat_specific=1)
+            if hasattr(sysconfig, 'get_path'):
+                # The modern API.
+                self.inc_dir = sysconfig.get_path('include')
+                self.module_dir = sysconfig.get_path('platlib')
+            else:
+                # The legacy distutils API.
+                self.inc_dir = sysconfig.get_python_inc(plat_specific=1)
+                self.module_dir = sysconfig.get_python_lib(plat_specific=1)
 
-        if sys.platform == 'win32':
+        if sys.platform == 'win32' and not _POSIX_BUILD:
             self.bin_dir = sys.exec_prefix
             self.data_dir = sys.prefix
             self.lib_dir = sys.prefix + '\\libs'
         else:
-            self.bin_dir = sys.exec_prefix + '/bin'
-            self.data_dir = sys.prefix + '/share'
-            self.lib_dir = sys.prefix + '/lib'
+            if "MSYSTEM" in os.environ:
+              self.bin_dir = '/bin'
+              self.data_dir = '/share'
+              self.lib_dir = '/lib'
+            else:
+              self.bin_dir = sys.exec_prefix + '/bin'
+              self.data_dir = sys.prefix + '/share'
+              self.lib_dir = sys.prefix + '/lib'
 
         # The name of the interpreter used by the pyuic5 wrapper.
         if sys.platform == 'darwin':
@@ -461,7 +472,9 @@
 
         # The qmake spec we want to use.
         if self.py_platform == 'win32':
-            if self.py_version >= 0x030300:
+            if _POSIX_BUILD:
+                self.qmake_spec = "win32-g++"
+            elif self.py_version >= 0x030300:
                 self.qmake_spec = 'win32-msvc2010'
             elif self.py_version >= 0x020600:
                 self.qmake_spec = 'win32-msvc2008'
@@ -668,7 +681,10 @@
 
         # Create the output file, first making sure it doesn't exist.
         remove_file(out_file)
-        run_command(cmd, verbose)
+        if "MSYSTEM" in os.environ:
+            run_command("sh -c "+cmd, verbose)
+        else:
+            run_command(cmd, verbose)
 
         if not os.access(out_file, os.F_OK):
             error("%s failed to create %s. Make sure your Qt installation is correct." % (cmd, out_file))
@@ -686,7 +702,7 @@
         py_major = self.py_version >> 16
         py_minor = (self.py_version >> 8) & 0x0ff
 
-        if sys.platform == 'win32':
+        if sys.platform == 'win32' and not _POSIX_BUILD:
             debug_suffix = get_win32_debug_suffix(debug)
             pylib_lib = 'python%d%d%s' % (py_major, py_minor, debug_suffix)
 
@@ -760,16 +776,28 @@
                         "using v%s. Use the --qmake flag to specify the "
                         "correct version of qmake." % qt_version_str)
 
-        self.designer_plugin_dir = qt_config.QT_INSTALL_PLUGINS + '/designer'
-        self.qml_plugin_dir = qt_config.QT_INSTALL_PLUGINS + '/PyQt5'
+        if "MSYSTEM" in os.environ:
+            temp_qtvalue = os.popen(' '.join(['cygpath', '--unix', qt_config.QT_INSTALL_PLUGINS])).readline().strip()
+            temp_qtvalue = '/' + '/'.join(temp_qtvalue.rsplit("/")[2:])
+            self.designer_plugin_dir = temp_qtvalue + '/designer'
+            self.qml_plugin_dir = temp_qtvalue + '/PyQt5'
+        else:
+            self.designer_plugin_dir = qt_config.QT_INSTALL_PLUGINS + '/designer'
+            self.qml_plugin_dir = qt_config.QT_INSTALL_PLUGINS + '/PyQt5'
 
         if self.sysroot == '':
             self.sysroot = qt_config.QT_SYSROOT
 
         # By default, install the API file if QScintilla seems to be installed
         # in the default location.
-        self.qsci_api_dir = os.path.join(qt_config.QT_INSTALL_DATA, 'qsci')
-        self.qsci_api = os.path.isdir(self.qsci_api_dir)
+        if "MSYSTEM" in os.environ:
+            temp_qtvalue = os.popen(' '.join(['cygpath', '--unix', qt_config.QT_INSTALL_DATA])).readline().strip()
+            temp_qtvalue = '/' + '/'.join(temp_qtvalue.rsplit("/")[2:])
+            self.qsci_api_dir = os.path.join(temp_qtvalue, 'qsci')
+            self.qsci_api = os.path.isdir(self.qsci_api_dir)
+        else:
+            self.qsci_api_dir = os.path.join(qt_config.QT_INSTALL_DATA, 'qsci')
+            self.qsci_api = os.path.isdir(self.qsci_api_dir)
 
         # Save the default qmake spec. and finalise the value we want to use.
         self.default_qmake_spec = qt_config.QMAKE_SPEC
@@ -792,9 +820,14 @@
         if self.py_platform.startswith('linux') or self.py_platform == 'darwin':
             self.prot_is_public = True
 
-        self.sip_inc_dir = self.py_inc_dir
-        self.vend_inc_dir = self.py_inc_dir
-        self.vend_lib_dir = self.py_lib_dir
+        if "MSYSTEM" in os.environ:
+            self.sip_inc_dir = sys.prefix + '/' + self.py_inc_dir
+            self.vend_inc_dir = sys.prefix + '/' + self.py_inc_dir
+            self.vend_lib_dir = sys.prefix + '/' + self.py_lib_dir
+        else:
+            self.sip_inc_dir = self.py_inc_dir
+            self.vend_inc_dir = self.py_inc_dir
+            self.vend_lib_dir = self.py_lib_dir
 
     def apply_pre_options(self, opts):
         """ Apply options from the command line that influence subsequent
@@ -1069,7 +1102,7 @@
                     "wrapper is FILE [default: %s]" %
                             target_config.pyuic_interpreter)
 
-    if sys.platform != 'win32':
+    if sys.platform != 'win32' or _POSIX_BUILD:
         g.add_option("--qmake", "-q", dest='qmake', type='string',
                 default=None, action='callback', callback=store_abspath_exe,
                 metavar="FILE",
@@ -1815,7 +1848,10 @@
         if target_config.qmake_spec == 'win32-borland':
             make = 'bmake'
         elif target_config.qmake_spec == 'win32-g++':
-            make = 'mingw32-make'
+            if "MSYSTEM" in os.environ:
+                make = 'make'
+            else:
+                make = 'mingw32-make'
         else:
             make = 'nmake'
 
@@ -2309,8 +2345,8 @@
 
         shared = '''
 win32 {
-    PY_MODULE = %s%s.pyd
-    target.files = %s%s.pyd
+    PY_MODULE = %s%s.dll
+    target.files = %s%s.dll
     LIBS += %s
 } else {
     PY_MODULE = %s.so
