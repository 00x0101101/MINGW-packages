# Maintainer: Alexey Pavlov <alexpux@gmail.com>
# Maintainer: Ray Donnelly <mingw.android@gmail.com>

# How this works / currently doesn't work:
# Generally speaking, gobject-introspection creates a program that links to the
# library that's to be introspected then calling get_type().
# This is done lib/gobject-introspection/giscanner/dumper.py
# .. with 'special' behaviour if MSYSTEM is set (may be why it succeeds from cmd.exe
#    and when debugging it from QtCreator outside of launching it from an MSYS2 shell)
#
# It appears that '/usr/bin/sed' is getting called by mingw-w64-python, possibly via
# sh.exe (which should be fine) but possibly not (which would not be fine) ...
#
# arg E:/msys64/usr/bin/bash.exe   File "E:/msys64/mingw64/bin/g-ir-scanner", line 58, in <module>
#     sys.exit(scanner_main(sys.argv))
#   File "E:/msys64/mingw64/bin/../lib/gobject-introspection/giscanner/scannermain.py", line 531, in scanner_main
#     shlibs = create_binary(transformer, options, args)
#   File "E:/msys64/mingw64/bin/../lib/gobject-introspection/giscanner/scannermain.py", line 412, in create_binary
#     gdump_parser.get_error_quark_functions())
#   File "E:/msys64/mingw64/bin/../lib/gobject-introspection/giscanner/dumper.py", line 321, in compile_introspection_binary
#     return dc.run()
#   File "E:/msys64/mingw64/bin/../lib/gobject-introspection/giscanner/dumper.py", line 169, in run
#     self._link(bin_path, introspection_obj)
#   File "E:/msys64/mingw64/bin/../lib/gobject-introspection/giscanner/dumper.py", line 310, in _link
#     subprocess.check_call(args)
#   File "E:/msys64/mingw64/lib/python2.7/subprocess.py", line 535, in check_call
#     retcode = call(*popenargs, **kwargs)
#   File "E:/msys64/mingw64/lib/python2.7/subprocess.py", line 522, 
# /usr/bin/sed
# : 
# read error on 
# stdin
# : 
# Bad file descriptor
#       1 [main] sh 9004 child_info::sync: wait failed, pid 8772, Win32 error 0
#     740 [main] sh 9004 fork: child -1 - forked process 8772 died unexpectedly, retry 0, exit code 0x1, errno 11
# ../libtool: fork: retry: No child processes
#       1 [main] sh 8772 E:\msys64\usr\bin\sh.exe: *** fatal error in forked process - WFSO timed out after longjmp
#     824 [main] sh 8772 cygwin_exception::open_stackdumpfile: Dumping stack trace to sh.exe.stackdump
# 301000443 [main] sh 9004 child_info::sync: wait failed, pid 9188, Win32 error 0
# 301001268 [main] sh 9004 fork: child -1 - forked process 9188 died unexpectedly, retry 0, exit code 0x1, errno 11
# ../libtool: fork: retry: No child processes
# 301025432 [main] sh 9188 E:\msys64\usr\bin\sh.exe: *** fatal error in forked process - WFSO timed out after longjmp
# 301026255 [main] sh 9188 cygwin_exception::open_stackdumpfile: Dumping stack trace to sh.exe.stackdump
#       1 [main] sh 9720 child_info::sync: wait failed, pid 7896, Win32 error 0

# E:/msys64/usr/bin/bash.exe -c "cmd //C echo ../../gegl-0.3.4/gegl/gegl.h"
# 

_realname=gobject-introspection
pkgbase=mingw-w64-${_realname}
pkgname=("${MINGW_PACKAGE_PREFIX}-${_realname}"
         "${MINGW_PACKAGE_PREFIX}-${_realname}-runtime")
pkgver=1.46.0
pkgrel=2
arch=('any')
url="https://live.gnome.org/GObjectIntrospection"
license=("LGPL")
makedepends=("${MINGW_PACKAGE_PREFIX}-gcc"
             "${MINGW_PACKAGE_PREFIX}-cairo"
             "${MINGW_PACKAGE_PREFIX}-glib2"
             "${MINGW_PACKAGE_PREFIX}-pkg-config"
             "${MINGW_PACKAGE_PREFIX}-python2"
             "${MINGW_PACKAGE_PREFIX}-python2-mako")
# Building this in debug invokes pdb when things go wrong.
# options=('!strip' 'debug')
source=(http://ftp.gnome.org/pub/GNOME/sources/gobject-introspection/${pkgver%.*}/${_realname}-${pkgver}.tar.xz
        0001-Revert-Windows-port-Work-arount-MSYS-weirdness-where.patch
        0018-debug-rmtree-errors.mingw.patch
        0021-tests-no-undefined.patch
        0022-change-pkg-config-invocations.mingw.patch
        0024-Support-passing-arguments-to-g-ir-scanner-through-a-.all.patch
        0050-dont-load-msvcrt.patch
        0055-fix-python-detection.patch)

md5sums=('adb40a31c7c80b65b0f4c8fd71b493dc'
         'd871f83d724b89eb49375eb8e4cb1246'
         'f0ecde986ebf1f0e28b752f9c36fb6c1'
         '69ef34e2f57abc8afe1b9f6fa3786e97'
         '8d3589fb959a0a68ce7ce9051fa441fe'
         '412548a4de14aa26f27300fd6db95d41'
         'e3598d539258678eef8dde2216419faf'
         '6d809bf266e42a20b31a7acbaf0384d1')

prepare() {
  cd ${srcdir}/${_realname}-${pkgver}
  patch -p1 -i "${srcdir}"/0001-Revert-Windows-port-Work-arount-MSYS-weirdness-where.patch
  patch -p1 -i "${srcdir}"/0018-debug-rmtree-errors.mingw.patch
  patch -p1 -i "${srcdir}"/0021-tests-no-undefined.patch
  patch -p1 -i "${srcdir}"/0022-change-pkg-config-invocations.mingw.patch
# I assume this patch exists to prevent MSYS2 argument conversion from happening? I've disabled
# it for now as it's getting in the way of investigating other problems (it renames files I've
# changed in 0001-Revert.. so my changes there get lost. It would be nice to know the real goal
# of this patch. It could be commandline length. I think it's from LRN?)
# patch -p1 -i "${srcdir}"/0024-Support-passing-arguments-to-g-ir-scanner-through-a-.all.patch
  patch -p1 -i "${srcdir}"/0050-dont-load-msvcrt.patch
  patch -p1 -i "${srcdir}"/0055-fix-python-detection.patch

  autoreconf -fi
}

build() {
  export PYTHON=${MINGW_PREFIX}/bin/python2
  [[ -d "${srcdir}/build-${MINGW_CHOST}" ]] && rm -rf "${srcdir}/build-${MINGW_CHOST}"
  mkdir -p "${srcdir}/build-${MINGW_CHOST}"
  cd "${srcdir}/build-${MINGW_CHOST}"
  ../${_realname}-${pkgver}/configure \
    --prefix=${MINGW_PREFIX} \
    --build=${MINGW_CHOST} \
    --host=${MINGW_CHOST} \
    --disable-silent-rules

  make
}

package_gobject-introspection() {
  pkgdesc="Introspection system for GObject-based libraries (mingw-w64)"
  depends=("${MINGW_PACKAGE_PREFIX}-gobject-introspection-runtime=${pkgver}"
           "${MINGW_PACKAGE_PREFIX}-python2"
           "${MINGW_PACKAGE_PREFIX}-python2-mako")
  options=('!emptydirs')
  
  cd "${srcdir}/build-${MINGW_CHOST}"
  make -j1 DESTDIR="${pkgdir}" install
  make -j1 DESTDIR="${pkgdir}" uninstall-libLTLIBRARIES uninstall-typelibsDATA

  # I've spent too long debugging gobject-introspection and it's too painful each
  # time. Therefore, I've taken the decision to copy the .pyd also as a _d.pyd
  # in-case I happen to be investigating it with a debug version of Python which
  # only loads _d.pyd extensions.
  # You will still have to rebuild this package after having built and installed
  # the debug mingw-w64-python2 of course .. still one less thing to forget to
  # remember.
  # There will be a way to communicate the nature of the Python through to Autoconf
  # and that would be better, but this will have to do for now.
  # (see:
  #  @OS_WIN32_TRUE@	-shrext ".pyd"
  #  in gobject-introspection/Makefile.in)
  PYDS=$(find "${pkgdir}" -name "*.pyd")
  for PYD in "${PYDS}"; do
    pushd $(dirname "${PYD}")
      cp $(basename "${PYD}") $(basename "${PYD}" .pyd)_d.pyd
    popd
  done
}

package_gobject-introspection-runtime() {
  pkgdesc="Introspection system for GObject-based libraries - runtime files (mingw-w64)"
  depends=("${MINGW_PACKAGE_PREFIX}-glib2")
  
  cd "${srcdir}/build-${MINGW_CHOST}"
  make -j1 DESTDIR="${pkgdir}" install-libLTLIBRARIES install-typelibsDATA
}

# Wrappers
package_mingw-w64-i686-gobject-introspection() { package_gobject-introspection; }
package_mingw-w64-i686-gobject-introspection-runtime() { package_gobject-introspection-runtime; }
package_mingw-w64-x86_64-gobject-introspection() { package_gobject-introspection; }
package_mingw-w64-x86_64-gobject-introspection-runtime() { package_gobject-introspection-runtime; }
