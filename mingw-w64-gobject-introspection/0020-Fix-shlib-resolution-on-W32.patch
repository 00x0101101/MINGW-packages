From 0fc8ae090524223f7fce5e8ba79db4fb6bf5e40e Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=D0=A0=D1=83=D1=81=D0=BB=D0=B0=D0=BD=20=D0=98=D0=B6=D0=B1?=
 =?UTF-8?q?=D1=83=D0=BB=D0=B0=D1=82=D0=BE=D0=B2?= <lrn1986@gmail.com>
Date: Fri, 21 Feb 2014 11:24:27 +0000
Subject: [PATCH] Fix shlib resolution on W32

https://bugzilla.gnome.org/show_bug.cgi?id=724890
---
 giscanner/shlibs.py | 53 ++++++++++++++++++++++++++++++++++++++++++++++++++---
 1 file changed, 50 insertions(+), 3 deletions(-)

diff --git a/giscanner/shlibs.py b/giscanner/shlibs.py
index 21fcafd..cadbfa2 100644
--- a/giscanner/shlibs.py
+++ b/giscanner/shlibs.py
@@ -24,7 +24,7 @@ import platform
 import re
 import subprocess
 
-from .utils import get_libtool_command, extract_libtool_shlib
+from .utils import get_libtool_command, extract_libtool_shlib, which
 
 
 # For .la files, the situation is easy.
@@ -89,10 +89,57 @@ def _resolve_non_libtool(options, binary, libraries):
             binary.args[0] = old_argdir
 
     if os.name == 'nt':
+        args = []
+        libtool = get_libtool_command(options)
+        if libtool:
+            args.append(which (os.environ.get ('SHELL', 'sh.exe')))
+            args.extend(libtool)
+            args.append('--mode=execute')
+        # FIXME: it could have prefix (i686-w64-mingw32-dlltool.exe)
+        args.extend(['dlltool.exe', '--identify'])
+        compiler_cmd = os.environ.get('CC', 'cc')
+        # FIXME: what if it's not gcc?
+        proc = subprocess.Popen([compiler_cmd, '-print-search-dirs'], stdout=subprocess.PIPE)
+        o, e = proc.communicate ()
+        libsearch = []
+        for line in o.splitlines ():
+            if line.startswith ('libraries: '):
+                libsearch = line[len ('libraries: '):].split (';')
+
         shlibs = []
+        not_resolved = []
+        for lib in libraries:
+            found = False
+            candidates = [
+                'lib%s.dll.a' % lib,
+                'lib%s.a' % lib,
+                '%s.dll.a' % lib,
+                '%s.a' % lib,
+                '%s.lib' % lib,
+            ]
+            for l in libsearch:
+                if found:
+                    break
+                if l.startswith ('='):
+                    l = l[1:]
+                for c in candidates:
+                    if found:
+                        break
+                    implib = os.path.join (l, c)
+                    if os.path.exists (implib):
+                        proc = subprocess.Popen (args + [implib], stdout=subprocess.PIPE)
+                        o, e = proc.communicate ()
+                        for dll in o.splitlines ():
+                            shlibs.append (dll)
+                            found = True
+                            break
+            if not found:
+                not_resolved.append (lib)
+        if len (not_resolved) > 0:
+            raise SystemExit(
+                "ERROR: can't resolve libraries to shared libraries: " +
+                ", ".join(not_resolved))
 
-        for library in libraries:
-            shlibs.append(library + '.dll')
     else:
         args = []
         libtool = get_libtool_command(options)
-- 
1.8.4
