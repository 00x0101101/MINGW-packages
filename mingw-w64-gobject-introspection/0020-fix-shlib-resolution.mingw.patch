--- gobject-introspection-1.39.3/giscanner/shlibs.py.orig	2014-01-11 16:55:55.000000000 +0000
+++ gobject-introspection-1.39.3/giscanner/shlibs.py	2014-02-21 10:57:02.987413600 +0000
@@ -85,10 +85,58 @@
             binary.args[0] = old_argdir
 
     if os.name == 'nt':
+        args = []
+        libtool = get_libtool_command(options)
+        if libtool:
+            args.append(which(os.environ.get('SHELL', 'sh.exe')))
+            args.extend(libtool)
+            args.append('--mode=execute')
+        # FIXME: it could have prefix (i686-w64-mingw32-dlltool.exe)
+        args.extend(['dlltool.exe', '--identify'])
+        compiler_cmd = os.environ.get('CC', 'cc')
+        # FIXME: what if it's not gcc?
+        proc = subprocess.Popen([compiler_cmd, '-print-search-dirs'],
+                                stdout=subprocess.PIPE)
+        o, e = proc.communicate()
+        libsearch = []
+        for line in o.splitlines():
+            if line.startswith('libraries: '):
+                libsearch = line[len('libraries: '):].split(';')
+
         shlibs = []
+        not_resolved = []
+        for lib in libraries:
+            found = False
+            candidates = [
+                'lib%s.dll.a' % lib,
+                'lib%s.a' % lib,
+                '%s.dll.a' % lib,
+                '%s.a' % lib,
+                '%s.lib' % lib,
+            ]
+            for l in libsearch:
+                if found:
+                    break
+                if l.startswith('='):
+                    l = l[1:]
+                for c in candidates:
+                    if found:
+                        break
+                    implib = os.path.join(l, c)
+                    if os.path.exists(implib):
+                        proc = subprocess.Popen(args + [implib], stdout=subprocess.PIPE)
+                        o, e = proc.communicate()
+                        for dll in o.splitlines():
+                            shlibs.append(dll)
+                            found = True
+                            break
+            if not found:
+                not_resolved.append(lib)
+        if len(not_resolved) > 0:
+            raise SystemExit(
+                "ERROR: can't resolve libraries to shared libraries: " +
+                ", ".join(not_resolved))
 
-        for library in libraries:
-            shlibs.append(library + '.dll')
     else:
         args = []
         libtool = get_libtool_command(options)
