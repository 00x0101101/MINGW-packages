# Maintainer: Ray Donnelly <mingw.android@gmail.com>

# My workings ..
#
# Setting up a virtualenv and installing setuptools and pip into it:
#   pushd /c/repo/mingw-w64-firefox/src
#   PATH=/mingw64/bin:$PATH /mingw64/bin/python2.7.exe $PWD/firefox-39.0/python/virtualenv/virtualenv.py /tmp/test
#   PATH=/mingw64/bin:$PATH PYTHONPATH="C:/repo/mingw-w64-firefox/src/firefox-39.0/python/virtualenv/virtualenv_support/setuptools-11.0-py2.py3-none-any.whl;C:/repo/mingw-w64-firefox/src/firefox-39.0/python/virtualenv/virtualenv_support/pip-6.0.6-py2.py3-none-any.whl" PIP_FIND_LINKS=". C:/repo/mingw-w64-firefox/src/firefox-39.0/python/virtualenv C:/repo/mingw-w64-firefox/src/firefox-39.0/python/virtualenv/virtualenv_support C:/repo/mingw-w64-firefox/src/firefox-39.0/python/virtualenv/virtualenv_support" PIP_USE_WHEEL=1 PIP_PRE=1 PIP_NO_INDEX=1 C:/msys64t/tmp/test/bin/python2.7.exe -c 'import sys, pip; sys.exit(pip.main(["install", "--ignore-installed"] + sys.argv[1:]))' setuptools pip
#
# Using msys2-python has a problem. It emits .cpp files containing msys2 paths which causes MinGW-w64 GCC to fall over.
#   seems harfbuzz have some conversion detection support that may be useful:
#   "checking how to convert x86_64-pc-mingw64 file names to toolchain format... func_convert_file_msys_to_w32"
#   but it'd need implementing in Python with subprocess I guess:
#   msys2-python -> mingw-w64-gcc             : cygpath -m
#   msys2-python -> msys2-mingw-w64-cross-gcc : noop
#   mingw-python -> mingw-w64-gcc             : noop
#   mingw-python -> msys2-mingw-w64-cross-gcc : cygpath -u
#   *            -> *                         : noop

# Testing:
#   cd /c/repo/mingw-w64-firefox/src
#   [[ -d /tmp/win32-python ]] && rm -rf /tmp/win32-python
#   mkdir /tmp/win32-python
#   [[ -d /tmp/mingw-python ]] && rm -rf /tmp/mingw-python
#   mkdir /tmp/mingw-python
#   /c/Python27/python.exe $PWD/firefox-39.0/python/virtualenv/virtualenv.py  /tmp/win32-python > /tmp/win32-python/log.txt
#   /mingw64/bin/python.exe $PWD/firefox-39.0/python/virtualenv/virtualenv.py /tmp/mingw-python > /tmp/mingw-python/log.txt
#
# "ImportError: No module named opcode" <- it's meant to be found in the original location?!
# Working:
# In fake distutils __init__.py, sys.path is
# ['',
#  'C:\\repo\\mingw-w64-firefox\\src\\firefox-39.0\\python\\virtualenv\\virtualenv_support\\setuptools-11.0-py2.py3-none-any.whl',
#  'C:\\repo\\mingw-w64-firefox\\src\\firefox-39.0\\python\\virtualenv\\virtualenv_support\\pip-6.0.6-py2.py3-none-any.whl',
#  'C:\\windows\\system32\\python27.zip',
#  'C:\\msys64t\\tmp\\win32-python\\DLLs',
#  'C:\\msys64t\\tmp\\win32-python\\lib',
#  'C:\\msys64t\\tmp\\win32-python\\lib\\plat-win',
#  'C:\\msys64t\\tmp\\win32-python\\lib\\lib-tk',
#  'C:\\msys64t\\tmp\\win32-python\\Scripts',
#  'C:\\Python27\\Lib',
#  'C:\\Python27\\DLLs',
#  'C:\\Python27\\Lib\\lib-tk',
#  'C:\\msys64t\\tmp\\win32-python',
#  'C:\\msys64t\\tmp\\win32-python\\lib\\site-packages']

# In fake distutils __init__.py, sys.path is
# ['',
#  'C:/repo/mingw-w64-firefox/src/firefox-39.0/python/virtualenv/virtualenv_support/setuptools-11.0-py2.py3-none-any.whl',
#  'C:/repo/mingw-w64-firefox/src/firefox-39.0/python/virtualenv/virtualenv_support/pip-6.0.6-py2.py3-none-any.whl',
#  'C:/msys64t/tmp/mingw-python/lib/python27.zip',
#  'C:/msys64t/tmp/mingw-python/lib/python2.7',
#  'C:/msys64t/tmp/mingw-python/lib/python2.7/plat-win32',
#  'C:/msys64t/tmp/mingw-python/lib/python2.7/lib-tk',
#  'C:/msys64t/tmp/mingw-python/lib/python2.7/lib-old',
#  'C:/msys64t/tmp/mingw-python/lib/python2.7/lib-dynload',
#  'C:/building/msys32/mingw64',
#  'C:/msys64t/mingw64/Lib',
#  'C:/msys64t/mingw64/DLLs',
#  'C:/msys64t/tmp/mingw-python/lib/python2.7/site-packages']

# Tweaks.
#_make="make.exe"
_make="mingw32-make.exe"
#_python="/usr/bin/python2.7.exe"
_python="${MINGW_PREFIX}/bin/python2.7.exe"
#_python="/c/Python27/python.exe"
#_python="/e/WinProgF/Python27/python.exe"
path_conv_for_make() {
  if [ "${_make}" = "mingw32-make.exe" ]; then
    echo $(cygpath -m "${1}")
  else
    echo $(cygpath -u "${1}")
  fi
}

_realname=firefox
pkgname=("${MINGW_PACKAGE_PREFIX}-${_realname}")
pkgver=39.0
pkgrel=1
pkgdesc='Mozilla Firefox (mingw-w64)'
groups=("${MINGW_PACKAGE_PREFIX}")
arch=('any')
url='https://www.mozilla.org/firefox/'
license=('MPL2')
makedepends=('unzip'
             'zip'
             "${MINGW_PACKAGE_PREFIX}-yasm")
source=("http://ftp.mozilla.org/pub/mozilla.org/${_realname}/releases/${pkgver}/source/${_realname}-${pkgver}.source.tar.bz2"
        "http://ftp.mozilla.org/pub/mozilla.org/mozilla/libraries/win32/moztools-static.zip"
        manifest
        "0001-Allow-MSYS2-shell.patch"
        "0002-Allow-MSYS2-make.patch"
        "0003-Use-PYTHON-env-var.patch"
        "0004-Allow-MSYS2-python.patch"
        "0005-Allow-mingw-w64-python.patch"
        "0006-Fix-pointer-casting.patch"
        "debugging.patch"
        "mozconfig.x86_64"
        "mozconfig.i686"
        "config.sub"
        "config.guess")
noextract=("${_realname}-${pkgver}.source.tar.bz2")
sha1sums=('32785daee7ddb9da8d7509ef095258fc58fe838e'
          '6c018e4ac903180f5f65492241502842dc1c035a'
          'c4e841bf724a1ff907592c8a11ba9683568acfd5'
          '1c0810fbfd6f336eec81e236c89c6c9ca0e79290'
          'c269337da604ab047de5dea088dbbe8f547dfbea'
          '2fd8904f036d2515e314b3d7510d8358add298d2'
          'c06e3e351cb3d29148e0d477ad50b70973baf8be'
          '4883d29fefd5c25d4892091bf6a45572f3d7aca4'
          '61de9dea3b9136303c7371b8980e5b293c4b46c8'
          'c2a0ed20a82d212bb4aa84cb2f294be3ba0bb859'
          'f437cc5a819788b63d8d9202290f516a85e9f6a2'
          'f6da0857f310788c4a23d158bf03a93ab11230b7'
          '17c4f8628ea435c999be66ee4c2967fdaf3b2955'
          'ffb6644dbad00413c668c833e3f3680d1d73aa53')

prepare() {
  [ -d "${srcdir}"/${_realname}-${pkgver} ] && rm -rf ${_realname}-${pkgver}
  tar -xf "${srcdir}"/${_realname}-${pkgver}.source.tar.bz2 || true
  if [ -d "${srcdir}"/mozilla-beta ]; then
    _archivedir="mozilla-beta"
  elif [ -d "${srcdir}"/mozilla-release ]; then
    _archivedir="mozilla-release"
  else
    echo "Can't find sources!"
    exit 1
  fi
  # Getting a lot of "mv: cannot move .. Permission denied", try a bit of sleeping. Yuck.
  sleep 1
  mv "${srcdir}"/"${_archivedir}" "${srcdir}"/${_realname}-${pkgver} || (sleep 1 && mv "${srcdir}"/"${_archivedir}" "${srcdir}"/${_realname}-${pkgver})

  cd "${srcdir}"/${_realname}-${pkgver}
  # Mostly this patch is about msys2-python and mingw-w64-python not
  # working with virtualenv. Really it needs splitting into two, one
  # adding support for each of them. Most of the "is_win or True:"
  # and "is_win and False:" stuff relates to mingw-w64-python and is
  # to be replaced with proper detection and a variable "is_mingw".
  patch -p1 -i "${srcdir}"/0001-Allow-MSYS2-shell.patch
  if [ "${_make}" = "make" ]; then
    patch -p1 -i "${srcdir}"/0002-Allow-MSYS2-make.patch
  fi
  patch -p1 -i "${srcdir}"/0003-Use-PYTHON-env-var.patch
  if [ "${_python}" = "/usr/bin/python2.7.exe" ]; then
    patch -p1 -i "${srcdir}"/0004-Allow-MSYS2-python.patch
  fi
  patch -p1 -i "${srcdir}"/0005-Allow-mingw-w64-python.patch
  patch -p1 -i "${srcdir}"/0006-Fix-pointer-casting.patch
  patch -p1 -i "${srcdir}"/debugging.patch

  find . -name config.sub -exec cp "${srcdir}"/config.sub {} \;
  find . -name config.guess -exec cp "${srcdir}"/config.guess {} \;
  autoconf-2.13 && cd js/src && autoconf-2.13

  cp ${srcdir}/moztools/bin/nsinstall.exe .
  cp ${srcdir}/manifest nsinstall.exe.manifest
}

build() {
  cd "${srcdir}"/${_realname}-${pkgver}
  if [ "${CARCH}" = "i686" ]; then
    _builddir=obj-i686-w64-mingw32
  else
    _builddir=obj-x86_64-w64-mingw32
  fi
  [ -d ${_builddir} ] && rm -rf "${_builddir}"
  mkdir ${_builddir}
  cp "${srcdir}"/mozconfig.${CARCH} ${_builddir}/.mozconfig
  export PYTHON=$(path_conv_for_make "${_python}")
  echo $PYTHON
  export MOZCONFIG=${PWD}/${_builddir}/.mozconfig
  # See: https://bugzilla.mozilla.org/show_bug.cgi?id=950332
  echo "mk_add_options MOZ_OBJDIR=$(path_conv_for_make ${PWD}/${_builddir})" >> ${_builddir}/.mozconfig
  export MIDL="${MINGW_PREFIX}/bin/widl.exe -I ${MINGW_PREFIX}/${CARCH}-w64-mingw32/include"
  export MOZ_TOOLS=${MINGW_PREFIX}
  export MAKEFLAGS=-j1

  # .. make a shell script so we can easily recreate the build environment while
  # developing this PKGBUILD.
  set
  set |awk '
            BEGIN { _p = 1; }
            $0~/^[^ ]+ \(\)/ { _p = 0; }
            _p == 1
            $0 == "}" { _p = 1; }
            ' |sed -r -e '/^BASH_(ARGC|ARGV|LINENO|SOURCE|VERSINFO)=/d;
                          /^(UID|EUID)=/d;
                          /^(FUNCNAME|GROUPS|PPID|SHELLOPTS|BASHOPTS)=/d;' > ./env-${CARCH}.sh
  echo "export PYTHON MOZCONFIG MIDL MOZ_TOOLS CPPFLAGS CFLAGS CXXFLAGS MAKEFLAGS" >> ./env-${CARCH}.sh

  "${_make}" -f $PWD/client.mk configure
  # We need nsinstall.exe
#  pushd "${_builddir}"/config
#    # cd src/firefox-39.0/ ; source env-x86_64.sh ; cd obj-x86_64-w64-mingw32/config/; "${_make}" -f $PWD/../../client.mk build
#    "${_make}" -f $PWD/../../client.mk build NSINSTALL=${srcdir}/moztools/bin/nsinstall.exe
#    "${_make}" -f $PWD/../../client.mk install NSINSTALL=${srcdir}/moztools/bin/nsinstall.exe
#  popd
  "${_make}" -f $PWD/client.mk build NSINSTALL=${srcdir}/moztools/bin/nsinstall.exe
}

check() {
  cd "${srcdir}"/build-${CARCH}
  make check
}

package() {
  cd "${srcdir}"/build-${CARCH}
  make -C mozilla-mingw.${CARCH} package INNER_MAKE_PACKAGE=true
}
