diff -urN a/python/virtualenv/virtualenv.py b/python/virtualenv/virtualenv.py
--- a/python/virtualenv/virtualenv.py	2015-07-13 22:51:52.604249800 +0100
+++ b/python/virtualenv/virtualenv.py	2015-07-13 23:03:40.898855100 +0100
@@ -41,6 +41,7 @@
 join = os.path.join
 py_version = 'python%s.%s' % (sys.version_info[0], sys.version_info[1])
 
+is_mingw = (sys.platform == 'win32' and 'GCC' in sys.version)
 is_jython = sys.platform.startswith('java')
 is_pypy = hasattr(sys, 'pypy_version_info')
 is_win = (sys.platform == 'win32')
@@ -65,7 +66,7 @@
 
 # Return a mapping of version -> Python executable
 # Only provided for Windows, where the information in the registry is used
-if not is_win:
+if not is_win or is_mingw:
     def get_installed_pythons():
         return {}
 else:
@@ -113,6 +114,14 @@
                     're', 'sre', 'sre_parse', 'sre_constants', 'sre_compile',
                     'zlib']
 
+if is_mingw:
+    REQUIRED_MODULES.extend(['functools', '__future__', 'logging', 'traceback',
+                             'weakref', 'collections', 'keyword', 'heapq',
+                             'atexit', 'optparse', 'textwrap', 'string',
+                             'contextlib', 'shutil', 'subprocess', 'threading',
+                             'tarfile', 'struct', 'copy', 'zipfile', 'io',
+                             'glob'])
+
 REQUIRED_FILES = ['lib-dynload', 'config']
 
 majver, minver = sys.version_info[:2]
@@ -953,7 +962,9 @@
     logger.start_progress('Installing %s...' % (', '.join(project_names)))
     logger.indent += 2
     try:
-        call_subprocess(cmd, show_stdout=False,
+        print('cmd is %s' % cmd)
+        print('PYTHONPATH="%s" PIP_FIND_LINKS="%s" PIP_USE_WHEEL=1 PIP_PRE=1 PIP_NO_INDEX=1' % (pythonpath, findlinks))
+        call_subprocess(cmd, show_stdout=True,
             extra_env = {
                 'PYTHONPATH': pythonpath,
                 'PIP_FIND_LINKS': findlinks,
@@ -991,6 +1002,7 @@
         to_install = ['setuptools']
         if not no_pip:
             to_install.append('pip')
+        print('install_wheel to_install=%s, py_executable=%s, search_dirs=%s' % (to_install, py_executable, search_dirs))
         install_wheel(to_install, py_executable, search_dirs)
 
     install_activate(home_dir, bin_dir, prompt)
@@ -1003,7 +1015,7 @@
     where scripts go, etc)"""
     # XXX: We'd use distutils.sysconfig.get_python_inc/lib but its
     # prefix arg is broken: http://bugs.python.org/issue3386
-    if is_win:
+    if is_win and not is_mingw:
         # Windows has lots of problems with executables with spaces in
         # the name; this function will remove them (using the ~1
         # format):
@@ -1035,7 +1047,7 @@
         lib_dir = home_dir
         inc_dir = join(home_dir, 'include')
         bin_dir = join(home_dir, 'bin')
-    elif not is_win:
+    elif not is_win or is_mingw:
         lib_dir = join(home_dir, 'lib', py_version)
         multiarch_exec = '/usr/bin/multiarch-platform'
         if is_executable_file(multiarch_exec):
