--- dieterv-gobject-introspection-c9e2d88/giscanner/utils.py.orig	2013-05-08 11:54:53 +0400
+++ dieterv-gobject-introspection-c9e2d88/giscanner/utils.py	2013-05-08 12:49:14 +0400
@@ -148,3 +148,27 @@
         return cflag
 
     return "-I" + os.path.realpath(cflag[2:])
+
+def which (program):
+    def is_exe(fpath):
+        return os.path.isfile(fpath) and os.access(fpath, os.X_OK)
+
+    def is_nt_exe(fpath):
+        return not fpath.lower().endswith ('.exe') and os.path.isfile(fpath + '.exe') and os.access(fpath + '.exe', os.X_OK)
+
+    fpath, fname = os.path.split(program)
+    if fpath:
+        if is_exe(program):
+            return program
+        if os.name == 'nt' and is_nt_exe(program):
+            return program + '.exe'
+    else:
+        for path in os.environ["PATH"].split(os.pathsep):
+            path = path.strip('"')
+            exe_file = os.path.join(path, program)
+            if is_exe(exe_file):
+                return exe_file
+            if os.name == 'nt' and is_nt_exe(exe_file):
+                return exe_file + '.exe'
+
+    return None
--- gobject-introspection-4613390bcfd6a814685a5862925b11338b797e48/giscanner/dumper.py.orig	2013-05-08 02:41:48 +0400
+++ gobject-introspection-4613390bcfd6a814685a5862925b11338b797e48/giscanner/dumper.py	2013-05-10 16:49:25 +0400
@@ -289,10 +290,27 @@
             print "g-ir-scanner: link: %s" % (
                 subprocess.list2cmdline(args), )
             sys.stdout.flush()
+        msys = os.environ.get ('MSYSTEM', None)
+        if msys:
+            shell = os.environ.get ('SHELL', 'sh.exe')
+            # Create a temporary script file that 
+            # runs the command we want
+            tf, tf_name = tempfile.mkstemp ()
+            f = os.fdopen (tf, 'wb')
+            fcontents = '#!/bin/sh\nunset PWD\n{}\n'.format (' '.join ([x.replace ('\\','/') for x in args]))
+            f.write (fcontents)
+            f.close ()
+            shell = utils.which (shell)
+            args = [shell, tf_name.replace('\\','/')]
         try:
             subprocess.check_call(args)
         except subprocess.CalledProcessError as e:
+            if msys:
+                os.remove (tf_name)
             raise LinkerError(e)
+        else:
+            if msys:
+                os.remove (tf_name)
 
     def _add_link_internal_args(self, args, libtool):
         # An "internal" link is where the library to be introspected
