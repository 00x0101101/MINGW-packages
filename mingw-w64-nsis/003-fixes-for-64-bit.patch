diff -aurN 002/Contrib/InstallOptions/InstallerOptions.cpp 003/Contrib/InstallOptions/InstallerOptions.cpp
--- 002/Contrib/InstallOptions/InstallerOptions.cpp	2015-04-27 19:41:08.578026100 -0300
+++ 003/Contrib/InstallOptions/InstallerOptions.cpp	2015-04-27 19:41:34.312408900 -0300
@@ -777,7 +777,7 @@
       {
         // Get TxtColor unless the user has set another using SetCtlColors
         if (!GetWindowLongPtr(lpdis->hwndItem, GWLP_USERDATA))
-          SetTextColor(lpdis->hDC, (COLORREF) pField->hImage);
+          SetTextColor(lpdis->hDC, (uintptr_t) pField->hImage);
 
         // Draw the text
         DrawText(lpdis->hDC, pField->pszText, -1, &rc, DT_CENTER | DT_VCENTER | DT_WORDBREAK | (bRTL ? DT_RTLREADING : 0));
diff -aurN 002/Contrib/Makensisw/utils.cpp 003/Contrib/Makensisw/utils.cpp
--- 002/Contrib/Makensisw/utils.cpp	2015-04-27 19:41:10.421775800 -0300
+++ 003/Contrib/Makensisw/utils.cpp	2015-04-27 19:41:34.328034200 -0300
@@ -648,7 +648,7 @@
   ti.cbSize = sizeof(TOOLINFO);
   ti.uFlags = TTF_IDISHWND;
   ti.hwnd   = g_tip.tip_p;
-  ti.uId = (UINT) hWnd;
+  ti.uId = (UINT_PTR) hWnd;
   ti.lpszText = (LPTSTR) lpszToolTip;
   SendMessage(g_tip.tip, TTM_ADDTOOL, 0, (LPARAM) (LPTOOLINFO) &ti); 
 }
@@ -672,7 +672,7 @@
   path=_tcsrchr(pathf,_T('\\'));
   if(path!=NULL) *path=0;
   lstrcat(pathf,LOCALDOCS);
-  if ((int)ShellExecute(g_sdata.hwnd,_T("open"),pathf,NULL,NULL,SW_SHOWNORMAL)<=32) 
+  if ((uintptr_t)ShellExecute(g_sdata.hwnd,_T("open"),pathf,NULL,NULL,SW_SHOWNORMAL)<=32) 
   ShellExecuteA(g_sdata.hwnd,"open",DOCPATH,NULL,NULL,SW_SHOWNORMAL);
 }
 
diff -aurN 002/Contrib/Math/Source/Math.c 003/Contrib/Math/Source/Math.c
--- 002/Contrib/Math/Source/Math.c	2015-04-27 19:41:08.656151700 -0300
+++ 003/Contrib/Math/Source/Math.c	2015-04-27 19:41:34.343660900 -0300
@@ -28,8 +28,8 @@
     PlaceVariable(vb, pi);
     if (pi->item == NULL) return;
 
-    while ((pi->OpsStack) && ((((int) pi->OpsStack->param2) < precedence)
-        || ((((int)pi->OpsStack->param2) == precedence)
+    while ((pi->OpsStack) && ((((uintptr_t) pi->OpsStack->param2) < precedence)
+        || ((((uintptr_t)pi->OpsStack->param2) == precedence)
             && (precedence != OPERATOR_SET_PRECEDENCE))))
     {
         // second operand for our operator
@@ -857,7 +857,7 @@
         break;
     case ITV_ARRITEM:
         {
-            ExpressionItem *&ei = ((ArrayDesc*)(var->param1))->array[(int)var->param2];
+            ExpressionItem *&ei = ((ArrayDesc*)(var->param1))->array[(uintptr_t)var->param2];
             CleanupItems(ei);
             ei = CopyItem(result);
         }
@@ -930,7 +930,7 @@
                 case ITV_ARRITEM:
                     {
                         // array item
-                        ExpressionItem *ei = ((ArrayDesc*)(item->param1))->array[(int)item->param2];
+                        ExpressionItem *ei = ((ArrayDesc*)(item->param1))->array[(uintptr_t)item->param2];
                         if (ei)
                             result = CopyItem(ei);
                         else
@@ -1176,7 +1176,7 @@
                 }
                 while (true)
                 {
-                    RunAndGetConst((int) ifbr, result, ITC_INT);
+                    RunAndGetConst((uintptr_t) ifbr, result, ITC_INT);
                     if (ifmode)
                     {
                         // we need then or else branch?
@@ -1260,20 +1260,20 @@
                 CleanupItems(si); CleanupItems(var);
             } else if (subtype == ITF_TYPE)
             {
-                int newtype = (int) MathFunctions[ioptions].fptr;
+                uintptr_t newtype = (uintptr_t) MathFunctions[ioptions].fptr;
                 if (newtype < ITC_UNKNOWN)
                 {
                     // get as possibly close to ready expression
-                    RunAndGetConst((int)item->param1, result, newtype);
+                    RunAndGetConst((uintptr_t)item->param1, result, newtype);
                     if (ioptions == ITFT_CARRAY_ID)
                         CopyArray(result);
                 } else if (newtype == FTT_FLOATF)
                 {
                     // float format function
                     ExpressionItem *arg1, *arg2;
-                    RunAndGetConst((int)item->param1, arg1, ITC_FLOAT);
+                    RunAndGetConst((uintptr_t)item->param1, arg1, ITC_FLOAT);
                     double value = *((double*)&(arg1->param1));
-                    RunAndGetConst((int)item->param2, arg2, ITC_INT);
+                    RunAndGetConst((uintptr_t)item->param2, arg2, ITC_INT);
                     int format = (int) *((__int64*)&(arg2->param1));
 
                     result = AllocItem();
@@ -1331,7 +1331,7 @@
             } else
             {
                 // oops :-o function call :)
-                RunAndGetConst((int)item->param1, result, ITC_FLOAT);
+                RunAndGetConst((uintptr_t)item->param1, result, ITC_FLOAT);
                 double &value = *((double*)&(result->param1));
                 if (subtype == ITF_MATH1)
                 {
@@ -1365,7 +1365,7 @@
                     {
                         // normal 2-arg math function
                         ExpressionItem *arg2;
-                        RunAndGetConst((int)item->param2, arg2, ITC_FLOAT);
+                        RunAndGetConst((uintptr_t)item->param2, arg2, ITC_FLOAT);
                         double value2 = *((double*)&(arg2->param1));
                         value = ((Math2FuncPtr)(MathFunctions[ioptions].fptr))(value, value2);
                         CleanupItems(arg2);
@@ -1388,7 +1388,7 @@
                     if ((*((ExpressionItem **) &(item->param2)))->type != IT_EXPRESSION)
                     {
                         // one index - user need a char
-                        RunAndGetConst((int)item->param2, index, ITC_INT);
+                        RunAndGetConst((uintptr_t)item->param2, index, ITC_INT);
 
                         int pos = (int) *((__int64*)&(index->param1));
                         if (pos < 0) pos += len; // -index - means from end
@@ -1408,7 +1408,7 @@
                         if ((*((ExpressionItem **) &(item->param2)))->param1 == 0)
                             index = AllocItem();
                         else
-                            RunAndGetConst((int)(*((ExpressionItem **) &(item->param2)))->param1, index, ITC_INT);
+                            RunAndGetConst((uintptr_t)(*((ExpressionItem **) &(item->param2)))->param1, index, ITC_INT);
                         if ((*((ExpressionItem **) &(item->param2)))->next->param1 == 0)
                         {
                             // if second index is skipped -> -1 (till last char)
@@ -1416,7 +1416,7 @@
                             *((__int64*)&(index2->param1)) = -1;
                         }
                         else
-                            RunAndGetConst((int)(*((ExpressionItem **) &(item->param2)))->next->param1, index2, ITC_INT);
+                            RunAndGetConst((uintptr_t)(*((ExpressionItem **) &(item->param2)))->next->param1, index2, ITC_INT);
 
                         // ok, we've got two indexes
                         int pos1 = (int) *((__int64*)&(index->param1));
@@ -1445,16 +1445,16 @@
                 } else
                 {
                     // argument is array
-                    RunAndGetConst((int)item->param2, index, ITC_INT);
+                    RunAndGetConst((uintptr_t)item->param2, index, ITC_INT);
 
                     // convert array pointer to array item pointer
                     aritem->type = IT_VARIABLE | ITV_ARRITEM;
                     aritem->param2 = (EIPARAM) *((__int64*)&(index->param1));
 
                     ArrayDesc *ad = (ArrayDesc*)aritem->param1;
-                    if (((int)aritem->param2) >= ad->count)
+                    if (((uintptr_t)aritem->param2) >= ad->count)
                     {
-                        ad->count = ((int)aritem->param2)+1;
+                        ad->count = ((uintptr_t)aritem->param2)+1;
                         while (ad->count > ad->size)
                         {
                             // resize array
diff -aurN 002/Source/script.cpp 003/Source/script.cpp
--- 002/Source/script.cpp	2015-04-27 19:41:17.015533500 -0300
+++ 003/Source/script.cpp	2015-04-27 19:41:34.359285100 -0300
@@ -2287,7 +2287,7 @@
         int k=line.gettoken_enum(1,rootkeys[0]);
         if (k == -1) k=line.gettoken_enum(1,rootkeys[1]);
         if (k == -1) PRINTHELP()
-        build_header.install_reg_rootkey=(INT)rootkey_tab[k];
+        build_header.install_reg_rootkey=(INT_PTR)rootkey_tab[k];
         if (!build_header.install_reg_rootkey) PRINTHELP() // SHCTX is invalid here
         build_header.install_reg_key_ptr = add_string(line.gettoken_str(2),0);
         if (line.gettoken_str(2)[0] == _T('\\'))
@@ -5321,7 +5321,7 @@
         int k=line.gettoken_enum(2,rootkeys[0]);
         if (k == -1) k=line.gettoken_enum(2,rootkeys[1]);
         if (ent.offsets[0] == -1 || k == -1) PRINTHELP()
-        ent.offsets[1]=(INT)rootkey_tab[k];
+        ent.offsets[1]=(INT_PTR)rootkey_tab[k];
         ent.offsets[2]=add_string(line.gettoken_str(3));
         ent.offsets[3]=add_string(line.gettoken_str(4));
         if (which_token == TOK_READREGDWORD) ent.offsets[4]=1;
@@ -5353,7 +5353,7 @@
         if (k == -1) k=line.gettoken_enum(a,rootkeys[1]);
         if (k == -1) PRINTHELP()
         ent.which=EW_DELREG;
-        ent.offsets[1]=(INT)rootkey_tab[k];
+        ent.offsets[1]=(INT_PTR)rootkey_tab[k];
         ent.offsets[2]=add_string(line.gettoken_str(a+1));
         ent.offsets[3]=(which_token==TOK_DELETEREGKEY)?0:add_string(line.gettoken_str(a+2));
         if (line.gettoken_str(a+1)[0] == _T('\\'))
@@ -5373,7 +5373,7 @@
         if (k == -1) k=line.gettoken_enum(1,rootkeys[1]);
         if (k == -1) PRINTHELP()
         ent.which=EW_WRITEREG;
-        ent.offsets[0]=(INT)rootkey_tab[k];
+        ent.offsets[0]=(INT_PTR)rootkey_tab[k];
         ent.offsets[1]=add_string(line.gettoken_str(2));
         if (line.gettoken_str(2)[0] == _T('\\'))
           warning_fl(_T("%") NPRIs _T(": registry path name begins with \'\\\', may cause problems"),line.gettoken_str(0));
@@ -5440,7 +5440,7 @@
         int k=line.gettoken_enum(2,rootkeys[0]);
         if (k == -1) k=line.gettoken_enum(2,rootkeys[1]);
         if (ent.offsets[0] == -1 || k == -1) PRINTHELP()
-        ent.offsets[1]=(INT)rootkey_tab[k];
+        ent.offsets[1]=(INT_PTR)rootkey_tab[k];
         ent.offsets[2]=add_string(line.gettoken_str(3));
         ent.offsets[3]=add_string(line.gettoken_str(4));
         ent.offsets[4]=which_token == TOK_ENUMREGKEY;
