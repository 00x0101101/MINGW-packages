--- glib-2.46.2/glib/gwin32.c.orig	2015-11-05 20:49:18.000000000 +0000
+++ glib-2.46.2/glib/gwin32.c	2015-12-20 14:09:52.853497700 +0000
@@ -724,6 +724,7 @@
 
 /**
  * g_win32_get_command_line:
+ * @trailing_argc: Num of trailing args to return (neg. num for all args)
  *
  * Gets the command line arguments, on Windows, in the GLib filename
  * encoding (ie: UTF-8).
@@ -755,23 +756,28 @@
  * Unlike argv, the returned value is a normal strv and can (and should)
  * be freed with g_strfreev() when no longer needed.
  *
- * Returns: (transfer full): the commandline arguments in the GLib
- *   filename encoding (ie: UTF-8)
+ * Returns: (transfer full): trailing argc or all commandline arguments in
+ *   the GLib filename encoding (ie: UTF-8)
  *
  * Since: 2.40
  **/
 gchar **
-g_win32_get_command_line (void)
+g_win32_get_command_line (int trailing_argc)
 {
   gchar **result;
   LPWSTR *args;
-  gint i, n;
+  gint i, n, start_n;
 
   args = CommandLineToArgvW (GetCommandLineW(), &n);
+  if (trailing_argc > n)
+    trailing_argc = n;
+  if (trailing_argc < 0)
+    trailing_argc = n;
+  start_n = n - trailing_argc;
 
-  result = g_new (gchar *, n + 1);
-  for (i = 0; i < n; i++)
-    result[i] = g_utf16_to_utf8 (args[i], -1, NULL, NULL, NULL);
+  result = g_new (gchar *, trailing_argc + 1);
+  for (i = 0; i < trailing_argc; i++)
+    result[i] = g_utf16_to_utf8 (args[start_n + i], -1, NULL, NULL, NULL);
   result[i] = NULL;
 
   LocalFree (args);
--- glib-2.46.2/glib/gwin32.h.orig	2015-12-20 13:09:14.309961300 +0000
+++ glib-2.46.2/glib/gwin32.h	2015-12-20 13:45:24.830082400 +0000
@@ -105,7 +105,7 @@
 gchar*          g_win32_locale_filename_from_utf8 (const gchar *utf8filename);
 
 GLIB_AVAILABLE_IN_2_40
-gchar **        g_win32_get_command_line (void);
+gchar **        g_win32_get_command_line (int trailing_argc);
 
 /* As of GLib 2.14 we only support NT-based Windows */
 #define G_WIN32_IS_NT_BASED() TRUE
--- glib-2.46.2/gio/gapplication.c.orig	2015-11-06 18:12:04.000000000 +0000
+++ glib-2.46.2/gio/gapplication.c	2015-12-20 13:50:45.831844400 +0000
@@ -2173,8 +2173,10 @@
  * the @argc, @argv parameters from main() to this function, it is possible
  * to pass %NULL if @argv is not available or commandline handling is not
  * required.  Note that on Windows, @argc and @argv are ignored, and
- * g_win32_get_command_line() is called internally (for proper support
- * of Unicode commandline arguments).
+ * g_win32_get_command_line(argc) is called internally (for proper support
+ * of Unicode commandline arguments). Only the final argc arguments are
+ * returned for cases where, e.g. pygtk has removed the first argument
+ * (the name of the python executable).
  *
  * #GApplication will attempt to parse the commandline arguments.  You
  * can add commandline flags to the list of recognised options by way of
@@ -2256,7 +2258,7 @@
   g_return_val_if_fail (!application->priv->must_quit_now, 1);
 
 #ifdef G_OS_WIN32
-  arguments = g_win32_get_command_line ();
+  arguments = g_win32_get_command_line (argc);
 #else
   {
     gint i;
