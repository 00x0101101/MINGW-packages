# Maintainer: Martell Malone <MartellMalone@gmail.com>
# Contributor: Ray Donnelly <mingw.android@gmail.com>

# Martell's notes
# libc++ and libc++abi are built statically only becuase shared will depend
# on libstdc++ atm which would make a big mess for us
# We could either use libc++ for this or use a static libstdc++
# I would like to avoid the latter.

# I may add a bootstrap option for libc++ to build libc++ soon
# Maybe having a seperate PKGBUILD for it would be helpful for this also

_realname=clang
pkgname=("${MINGW_PACKAGE_PREFIX}-${_realname}-svn"
         "${MINGW_PACKAGE_PREFIX}-${_realname}-analyzer-svn"
         "${MINGW_PACKAGE_PREFIX}-${_realname}-tools-extra-svn"
         "${MINGW_PACKAGE_PREFIX}-compiler-rt-svn"
         "${MINGW_PACKAGE_PREFIX}-libc++abi-svn"
         "${MINGW_PACKAGE_PREFIX}-libc++-svn"
         "${MINGW_PACKAGE_PREFIX}-lld-svn"
         "${MINGW_PACKAGE_PREFIX}-llvm-svn"
        )
pkgver=60373.b4292ac
pkgrel=1
pkgdesc="C language family frontend for LLVM (mingw-w64)"
arch=('any')
url="http://llvm.org"
license=("custom:University of Illinois/NCSA Open Source License")
makedepends=("${MINGW_PACKAGE_PREFIX}-gcc"
             "${MINGW_PACKAGE_PREFIX}-pkg-config"
             "${MINGW_PACKAGE_PREFIX}-python3-sphinx"
             "python2"
             "tar"
             "subversion"
             "git"
             "cmake")
depends=("${MINGW_PACKAGE_PREFIX}-gcc")
options=('staticlibs') # 'debug' '!strip')
source=("llvm"::"git+http://llvm.org/git/llvm.git"
        "lld"::"git+http://llvm.org/git/lld.git"
        "clang"::"git+http://llvm.org/git/clang.git"
        "clang-tools-extra"::"git+http://llvm.org/git/clang-tools-extra.git"
        "compiler-rt"::"git+http://llvm.org/git/compiler-rt.git"
        "testsuite"::"git+http://llvm.org/git/test-suite.git"
        "libcxxabi"::"git+http://llvm.org/git/libcxxabi.git"
        "libcxx"::"git+http://llvm.org/git/libcxx.git"
        0001-Fix-GetHostTriple-for-mingw-w64-in-msys.patch
        0041-libcxx-add-support-for-mingw-w64.patch)

# Some patch notes :)
#0001-0009 -> llvm
#0011-0019 -> clang
#0021-0029 -> rt
#0031-0039 -> lld
#0041-0049 -> c++

md5sums=('SKIP'
         'SKIP'
         'SKIP'
         'SKIP'
         'SKIP'
         'SKIP'
         'SKIP'
         'SKIP'
         'a384d4607d9dcdfdcac6912ac413ec58'
         '6b0b769d999dc884e59d388c5a7f3866')

pkgver_internal() {
  if [ ! -d "$1" ]; then
    plain "No such directory $1"
    exit 1
  fi
  pushd "$1" > /dev/null 2>&1
  printf "%s.%s" "$(git rev-list --count HEAD)" "$(git rev-parse --short HEAD)"
  popd > /dev/null 2>&1
}

pkgver() {
  pkgver_internal "${srcdir}"/clang
}

prepare() {
  cd "${srcdir}"/llvm
  git am "${srcdir}"/0001-Fix-GetHostTriple-for-mingw-w64-in-msys.patch

  # Fix docs installation directory
  sed -i 's:$(PROJ_prefix)/docs/llvm:$(PROJ_prefix)/share/doc/llvm:' \
    Makefile.config.in

  # Fix definition of LLVM_CMAKE_DIR in LLVMConfig.cmake
  sed -i '/@LLVM_CONFIG_CMAKE_DIR@/s:$(PROJ_cmake):$(PROJ_prefix)/share/llvm/cmake:' \
    cmake/modules/Makefile

  #cd "${srcdir}"/compiler-rt

  cd "${srcdir}"/lld
  # lld git patches here

  cd "${srcdir}"/libcxx
  git am "${srcdir}"/0041-libcxx-add-support-for-mingw-w64.patch
  
  cd "${srcdir}"/clang

  cd "${srcdir}"/llvm

  # At the present, clang must reside inside the LLVM source code tree to build
  # See http://llvm.org/bugs/show_bug.cgi?id=4840
  mv "$srcdir/clang" tools/clang
  mv "$srcdir/clang-tools-extra" tools/clang/tools/extra
  mv "$srcdir/lld" tools/lld
# mv "$srcdir/lldb" tools/lldb
  mv "$srcdir/compiler-rt" projects/compiler-rt
  mv "$srcdir/libcxxabi" projects/libcxxabi
  mv "$srcdir/libcxx" projects/libcxx
# mv "$srcdir/testsuite" projects/test-suite
  mkdir build-${CARCH}
}

build() {
  cd "$srcdir"

  [[ -d build-${CARCH} ]] && rm -rf build-${CARCH}
  mkdir build-${CARCH} && cd build-${CARCH}

  local -a extra_config

  if check_option "debug" "y"; then
    extra_config+=(-DCMAKE_BUILD_TYPE=Debug)
  else
    extra_config+=(-DCMAKE_BUILD_TYPE=Release)
  fi

  # Include location of libffi headers in CPPFLAGS
  FFI_INCLUDE_DIR="$(pkg-config --cflags libffi)"
  FFI_INCLUDE_DIR=$(echo $FFI_INCLUDE_DIR | sed 's|-I||g')

  # "Ninja" cant install each component seperately
  # https://github.com/martine/ninja/issues/932

  PATH=${MINGW_PREFIX}/bin:/usr/bin \
  MSYS2_ARG_CONV_EXCL="-DCMAKE_INSTALL_PREFIX=" \
  ${MINGW_PREFIX}/bin/cmake.exe \
    -G"MSYS Makefiles" \
    -DCMAKE_SYSTEM_IGNORE_PATH=/usr/lib \
    -DCMAKE_MAKE_PROGRAM="/usr/bin/make.exe" \
    -DCMAKE_C_COMPILER="${MINGW_PREFIX}/bin/gcc.exe" \
    -DCMAKE_CXX_COMPILER="${MINGW_PREFIX}/bin/g++.exe" \
    -DFFI_INCLUDE_DIR="${FFI_INCLUDE_DIR}" \
    -DCMAKE_C_FLAGS="${CFLAGS}" \
    -DCMAKE_CXX_FLAGS="${CXXFLAGS} ${CPPFLAGS}" \
    -DCMAKE_INSTALL_PREFIX=${MINGW_PREFIX} \
    -DLLVM_TARGETS_TO_BUILD="ARM;CppBackend;X86" \
    -DLLVM_ENABLE_ASSERTIONS=OFF \
    -DLLVM_ENABLE_THREADS=1 \
    -DPYTHON_EXECUTABLE=${MINGW_PREFIX}/bin/python2.exe \
    -DLLVM_ENABLE_FFI=ON \
    -DLLVM_ENABLE_SPHINX=ON \
    -DCMAKE_CXX_FLAGS="-D_GNU_SOURCE -D_LIBCPP_HAS_NO_CONSTEXPR" \
    -DLIBCXX_ENABLE_SHARED=OFF \
    -DLIBCXXABI_ENABLE_SHARED=OFF \
    "${extra_config[@]}" \
    --debug-output --trace \
    ../llvm

  make

  # Disable automatic installation of components that go into subpackages
  sed -i '/\(clang\|lld\|lldb\)\/cmake_install.cmake/d' tools/cmake_install.cmake
  sed -i '/extra\/cmake_install.cmake/d' tools/clang/tools/cmake_install.cmake
  sed -i '/\(compiler-rt\|libcxxabi\|libcxx\)\/cmake_install.cmake/d' projects/cmake_install.cmake
}

#check() {
#  cd "${srcdir}"/build-${CARCH}
#  # Remove || true once testcase doesn't cause failures.
#  make check || true
#}

package_llvm-svn() {
  pkgdesc="Low Level Virtual Machine (mingw-w64)"
  #depends=("${MINGW_PACKAGE_PREFIX}-gcc") # "compiler-rt"
  provides=("${MINGW_PACKAGE_PREFIX}-llvm")
  conflicts=("${MINGW_PACKAGE_PREFIX}-llvm")

  pkgver=$(pkgver_internal "${srcdir}"/llvm)

  cd "${srcdir}"/llvm

  make -C ../build-${CARCH} DESTDIR="$pkgdir" install

  install -Dm644 LICENSE.TXT "$pkgdir${MINGW_PREFIX}/share/licenses/llvm/LICENSE"

  # Install CMake stuff
  install -d "${pkgdir}"${MINGW_PREFIX}/share/llvm/cmake/{modules,platforms}
  install -Dm644 "${srcdir}"/llvm/cmake/modules/*.cmake "${pkgdir}"${MINGW_PREFIX}/share/llvm/cmake/modules/
  install -Dm644 "${srcdir}"/llvm/cmake/platforms/*.cmake "${pkgdir}"${MINGW_PREFIX}/share/llvm/cmake/platforms/
}

 package_compiler-rt-svn() {
  pkgdesc="Runtime libraries for Clang and LLVM (mingw-w64)"
  url="http://compiler-rt.llvm.org/"
  depends=("${MINGW_PACKAGE_PREFIX}-llvm-svn")
  provides=("${MINGW_PACKAGE_PREFIX}-compiler-rt")

  conflicts=("${MINGW_PACKAGE_PREFIX}-compiler-rt")
  pkgver=$(pkgver_internal "${srcdir}"/llvm/projects/compiler-rt)

  cd "$srcdir/llvm"
  make -C ../build-${CARCH}/projects/compiler-rt DESTDIR="$pkgdir" install
 }

package_libcxxabi-svn() {
  pkgdesc="C++ Standard Library Support (mingw-w64)"
  url="http://libcxxabi.llvm.org/"
  provides=("${MINGW_PACKAGE_PREFIX}-libc++abi")
  conflicts=("${MINGW_PACKAGE_PREFIX}-libc++abi")
  pkgver=$(pkgver_internal "${srcdir}"/llvm/projects/libcxxabi)

  cd "$srcdir/llvm"  
  make -C ../build-${CARCH}/projects/libcxxabi -j1 DESTDIR="$pkgdir" install
}

package_libcxx-svn() {
  pkgdesc="C++ Standard Library (mingw-w64)"
  url="http://libcxx.llvm.org/"
  provides=("${MINGW_PACKAGE_PREFIX}-libc++")
  conflicts=("${MINGW_PACKAGE_PREFIX}-libc++")
  pkgver=$(pkgver_internal "${srcdir}"/llvm/projects/libcxx)

  cd "$srcdir/llvm"
  make -C ../build-${CARCH}/projects/libcxx -j1 DESTDIR="$pkgdir" install
}

package_lldb-svn() {
  pkgdesc="Next generation, high-performance debugger (mingw-w64)"
  url="http://lldb.llvm.org/"
  depends=('libedit' 'libxml2' 'python2')

  cd "$srcdir/llvm-$pkgver.src"

  make -C ../build-${CARCH}/tools/lldb DESTDIR="$pkgdir" install

  # Compile Python scripts
  python2 -m compileall "$pkgdir${MINGW_PREFIX}/lib/python2.7/site-packages/lldb"
  python2 -O -m compileall "$pkgdir${MINGW_PREFIX}/lib/python2.7/site-packages/lldb"

  install -Dm644 tools/lldb/LICENSE.TXT "$pkgdir${MINGW_PREFIX}/share/licenses/$pkgname/LICENSE"
}


package_lld-svn() {
  pkgdesc="Linker tools for LLVM (mingw-w64)"
  url="http://lld.llvm.org/"
  depends=("${MINGW_PACKAGE_PREFIX}-llvm-svn")
  provides=("${MINGW_PACKAGE_PREFIX}-lld")
  conflicts=("${MINGW_PACKAGE_PREFIX}-lld")
  pkgver=$(pkgver_internal "${srcdir}"/llvm/tools/lld)

  cd "${srcdir}/llvm"
  make -C ../build-${CARCH}/tools/lld -j1 DESTDIR="$pkgdir" install
}

package_clang() {
  pkgdesc="C language family frontend for LLVM (mingw-w64)"
  url="http://clang.llvm.org/"
  depends=("${MINGW_PACKAGE_PREFIX}-llvm-svn")
  provides=("${MINGW_PACKAGE_PREFIX}-clang")
  conflicts=("${MINGW_PACKAGE_PREFIX}-clang")
  pkgver=$(pkgver_internal "${srcdir}"/llvm/tools/clang)

  cd "$srcdir/llvm"
  make -C ../build-${CARCH}/tools/clang DESTDIR="$pkgdir" install
}

package_clang-svn() {
  package_clang
}

package_clang-analyzer-svn() {
  pkgdesc="A source code analysis framework (mingw-w64)"
  url="http://clang-analyzer.llvm.org/"
  depends=("${MINGW_PACKAGE_PREFIX}-clang-svn" "python2")
  provides=("${MINGW_PACKAGE_PREFIX}-clang-analyzer")
  conflicts=("${MINGW_PACKAGE_PREFIX}-clang-analyzer")
  pkgver=$(pkgver_internal "${srcdir}"/llvm/tools/clang)

  cd "${srcdir}"/llvm/tools/clang

  install -d "${pkgdir}"${MINGW_PREFIX}/{bin,lib/clang-analyzer}
  for _tool in scan-{build,view}; do
    cp -r tools/$_tool "${pkgdir}"${MINGW_PREFIX}/lib/clang-analyzer/
    cp "${pkgdir}"${MINGW_PREFIX}/lib/clang-analyzer/$_tool/bin/$_tool "${pkgdir}"${MINGW_PREFIX}/bin/
  done

  # Relocate man page
  install -d "${pkgdir}"${MINGW_PREFIX}/share/man/man1
  mv "${pkgdir}"${MINGW_PREFIX}/lib/clang-analyzer/scan-build/man/scan-build.1 \
     "${pkgdir}"${MINGW_PREFIX}/share/man/man1/

  # Use Python 2
  #sed -i \
  #  -e 's|env python$|&2|' \
  #  -e 's|/usr/bin/python$|&2|' \
  #  "${pkgdir}"${MINGW_PREFIX}/lib/clang-analyzer/scan-view/scan-view \
  #  "${pkgdir}"${MINGW_PREFIX}/lib/clang-analyzer/scan-build/set-xcode-analyzer

  # Compile Python scripts
  python2 -m compileall "${pkgdir}"${MINGW_PREFIX}/lib/clang-analyzer
  python2 -O -m compileall "${pkgdir}"${MINGW_PREFIX}/lib/clang-analyzer
  install -Dm644 LICENSE.TXT "${pkgdir}"${MINGW_PREFIX}/share/licenses/clang-analyzer/LICENSE
}

package_clang-tools-extra-svn() {
  pkgdesc="Extra tools built using Clang's tooling APIs (mingw-w64)"
  url="http://clang.llvm.org/"
  depends=("${MINGW_PACKAGE_PREFIX}-clang-svn")
  provides=("${MINGW_PACKAGE_PREFIX}-clang-tools-extra")
  conflicts=("${MINGW_PACKAGE_PREFIX}-clang-tools-extra")
  pkgver=$(pkgver_internal "${srcdir}"/llvm/tools/clang/tools/extra)

  cd "$srcdir"/llvm
  make -C ../build-${CARCH}/tools/clang/tools/extra -j1 DESTDIR="$pkgdir" install
}

package_mingw-w64-i686-clang-svn(){
  package_clang-svn
}

package_mingw-w64-i686-clang-analyzer-svn(){
  package_clang-analyzer-svn
}

package_mingw-w64-i686-clang-tools-extra-svn(){
  package_clang-tools-extra-svn
}

package_mingw-w64-i686-compiler-rt-svn(){
  package_compiler-rt-svn
}

package_mingw-w64-i686-libc++abi-svn(){
  package_libcxxabi-svn
}

package_mingw-w64-i686-libc++-svn(){
  package_libcxx-svn
}

package_mingw-w64-i686-lld-svn(){
  package_lld-svn
}

package_mingw-w64-i686-llvm-svn(){
  package_llvm-svn
}

package_mingw-w64-x86_64-clang-svn(){
  package_clang-svn
}

package_mingw-w64-x86_64-clang-analyzer-svn(){
  package_clang-analyzer-svn
}

package_mingw-w64-x86_64-clang-tools-extra-svn(){
  package_clang-tools-extra-svn
}

package_mingw-w64-x86_64-compiler-rt-svn(){
  package_compiler-rt-svn
}

package_mingw-w64-x86_64-libc++abi-svn(){
  package_libcxxabi-svn
}

package_mingw-w64-x86_64-libc++-svn(){
  package_libcxx-svn
}

package_mingw-w64-x86_64-lld-svn(){
  package_lld-svn
}

package_mingw-w64-x86_64-llvm-svn(){
  package_llvm-svn
}

# vim:set ts=2 sw=2 et:
