# Maintainer: Alexey Pavlov <alexpux@gmail.com>

_realname=blender
_mingw_suff=mingw-w64-${CARCH}
pkgname="${_mingw_suff}-${_realname}-git"
provides=("${_mingw_suff}-${_realname}")
conflicts=("${_mingw_suff}-${_realname}")
blender_version=2.70
pkgver=r53534.415e10a
pkgrel=1
pkgdesc="A fully integrated 3D graphics creation suite (mingw-w64)"
arch=('any')
license=('GPL')
url="http://www.blender.org"
depends=("${_mingw_suff}-boost"
		"${_mingw_suff}-glew"
		"${_mingw_suff}-ffmpeg"
		"${_mingw_suff}-fftw"
		"${_mingw_suff}-freetype"
		"${_mingw_suff}-libpng"
		"${_mingw_suff}-libsndfile"
		"${_mingw_suff}-libtiff"
		"${_mingw_suff}-openexr"
		"${_mingw_suff}-openal"
		"${_mingw_suff}-opencollada"
		"${_mingw_suff}-opencolorio"
		"${_mingw_suff}-openimageio"
		"${_mingw_suff}-openshadinglanguage"
		"${_mingw_suff}-python3"
		"${_mingw_suff}-python3-numpy"
		"${_mingw_suff}-wintab-sdk")
makedepends=("${_mingw_suff}-boost" "${_mingw_suff}-clang" "${_mingw_suff}-cmake")
#[[ $CARCH == x86_64 ]] && makedepends+=('cuda')
optdepends=('cuda: cycles renderer cuda support')
options=(staticlibs !buildflags) # debug !strip
#install=blender.install
source=("${_realname}"::"git://git.blender.org/blender.git"
		"translations"::"git://git.blender.org/blender-translations.git"
		"addons"::"git://git.blender.org/blender-addons.git"
		"addons-contrib"::"git://git.blender.org/blender-addons-contrib.git"
		"mingw-w64-cmake.patch"
		"fix-mingw-w64-definitions.patch"
		"mingw-dont-install-3rdparty.patch")
md5sums=('SKIP'
         'SKIP'
         'SKIP'
         'SKIP'
         'ea8840132147f5480e5c73a4078e24e1'
         '2c4725eacaf998be6dc89cb38296ffe0'
         '1969914e11d0a4f74dbfeddad742c9da')

pkgver() {
  cd "$srcdir/$_realname"
  printf "r%s.%s" "$(git rev-list --count HEAD)" "$(git rev-parse --short HEAD)"
}

prepare() {
	cd "$srcdir/$_realname"
	patch -p1 -i ${srcdir}/mingw-w64-cmake.patch
	patch -p1 -i ${srcdir}/fix-mingw-w64-definitions.patch
	patch -p1 -i ${srcdir}/mingw-dont-install-3rdparty.patch
	
	cp -rf $srcdir/translations/* $srcdir/$_realname/release/datafiles/locale/
	cp -rf $srcdir/addons/* $srcdir/$_realname/release/scripts/addons/
	cp -rf $srcdir/addons-contrib/* $srcdir/$_realname/release/scripts/addons_contrib/
}

build() {
	
	pushd ${MINGW_PREFIX} > /dev/null
	export PREFIX_DEPS=`pwd -W`
	popd > /dev/null

	[ -d $srcdir/build-${MINGW_CHOST} ] && rm -rf $srcdir/build-${MINGW_CHOST}
	mkdir $srcdir/build-${MINGW_CHOST}
	cd $srcdir/build-${MINGW_CHOST}

	[[ $CARCH == i686 ]] && ENABLESSE2="-DSUPPORT_SSE2_BUILD=OFF"
	[[ $CARCH == i686 ]] && BUILDCUDA="OFF" || BUILDCUDA="ON"
	[[ $CARCH == i686 ]] && PMARCH="i686" || PMARCH="x86-64"
	if check_option "debug" "y"; then
		BUILD_TYPE="Debug"
		# Prevent:
		# CMakeFiles/extern_libmv.dir/libmv/multiview/fundamental.cc.obj: too many sections (35936)
		# also ..
		# cp C:/msys64/mingw64/lib/libpython3.4m.dll.a C:/msys64/mingw64/lib/libpython3_d.4m.dll.a
		# cp C:/msys64/mingw64/lib/opencollada/libOpenCOLLADAStreamWriter.a C:/msys64/mingw64/lib/opencollada/libOpenCOLLADAStreamWriter_d.a
		# cp C:/msys64/mingw64/lib/opencollada/libOpenCOLLADASaxFrameworkLoader.a C:/msys64/mingw64/lib/opencollada/libOpenCOLLADASaxFrameworkLoader_d.a
		# cp C:/msys64/mingw64/lib/opencollada/libOpenCOLLADAFramework.a C:/msys64/mingw64/lib/opencollada/libOpenCOLLADAFramework_d.a
		# cp C:/msys64/mingw64/lib/opencollada/libOpenCOLLADABaseUtils.a C:/msys64/mingw64/lib/opencollada/libOpenCOLLADABaseUtils_d.a
		# cp C:/msys64/mingw64/lib/opencollada/libGeneratedSaxParser.a C:/msys64/mingw64/lib/opencollada/libGeneratedSaxParser_d.a
		# cp C:/msys64/mingw64/lib/opencollada/libMathMLSolver.a C:/msys64/mingw64/lib/opencollada/libMathMLSolver_d.a
		# cp C:/msys64/mingw64/lib/opencollada/libbuffer.a C:/msys64/mingw64/lib/opencollada/libbuffer_d.a
		# cp C:/msys64/mingw64/lib/opencollada/libftoa.a C:/msys64/mingw64/lib/opencollada/libftoa_d.a
		# cp C:/msys64/mingw64/lib/opencollada/libUTF.a C:/msys64/mingw64/lib/opencollada/libUTF_d.a
		# cp C:/msys64/mingw64/lib/libxml2.dll.a C:/msys64/mingw64/lib/libxml2_d.dll.a
		# cp C:/msys64/mingw64/lib/libpcre.dll.a C:/msys64/mingw64/lib/libpcre_d.dll.a
		BIG_OBJECTS="-Wa,-mbig-obj"
	else
		BUILD_TYPE="Release"
	fi
	#unset CFLAGS
	#unset CXXFLAGS
	#CFLAGS+=" -D__USE_MINGW_ANSI_STDIO=1"
	#CXXFLAGS+=" -D__USE_MINGW_ANSI_STDIO=1"
	CFLAGS="${OPTIM} -pipe -march=${PMARCH} -mtune=generic -D__USE_MINGW_ANSI_STDIO=1 ${BIG_OBJECTS}"
	CXXFLAGS="$CFLAGS"
	${MINGW_PREFIX}/bin/cmake \
		-G"MSYS Makefiles" \
		-DMINGW_LIBS=${PREFIX_DEPS} \
		-DCMAKE_BUILD_TYPE=${BUILD_TYPE} \
		-DWITH_SYSTEM_GLEW=ON \
		-DWITH_SYSTEM_OPENJPEG=ON \
		-DWITH_INSTALL_PORTABLE=OFF \
		-DWITH_OPENCOLLADA=ON \
		-DWITH_GAMEENGINE=ON \
		-DWITH_RAYOPTIMIZATION=ON \
		-DWITH_JACK=OFF \
		-DWITH_PLAYER=ON \
		-DWITH_CODEC_FFMPEG=ON \
		-DWITH_CODEC_SNDFILE=ON \
		-DWITH_CYCLES=ON \
		-DWITH_CYCLES_CUDA_BINARIES=OFF \
		-DWITH_CYCLES_OSL=ON \
		-DWITH_FFTW3=ON \
		-DWITH_MOD_OCEANSIM=ON \
		-DPYTHON_VERSION=3.4 \
		-DPYTHON_LIBPATH=${PREFIX_DEPS}/lib \
		-DPYTHON_LIBRARY=python3.4m \
		-DPYTHON_INCLUDE_DIRS=${PREFIX_DEPS}/include/python3.4m \
		-DWITH_PYTHON_INSTALL=OFF \
		-DWITH_PYTHON_INSTALL_NUMPY=OFF \
		-DPYTHON_NUMPY_PATH=${PREFIX_DEPS}/lib/python3.4/site-packages \
		-DCYCLES_OSL=${PREFIX_DEPS} \
		-DWITH_IMAGE_REDCODE=ON \
		-DWITH_OPENMP=ON \
		../${_realname}

	# Remove the openjpeg line once blender accepts my patch
	make VERBOSE=1 ${MAKE_TARGET} # -j1 VERBOSE=1
}

package() {	
	cd "$srcdir/build-${MINGW_CHOST}"
	make install
	mkdir -p ${pkgdir}${MINGW_PREFIX}/lib
	cp -r bin ${pkgdir}${MINGW_PREFIX}/
	rm ${pkgdir}${MINGW_PREFIX}/bin/msgfmt.exe
	mv ${pkgdir}${MINGW_PREFIX}/bin/*.a ${pkgdir}${MINGW_PREFIX}/lib/

	${MINGW_REFIX}/bin/python3 -m compileall "${pkgdir}${MINGW_PREFIX}/bin/$blender_version"
	${MINGW_REFIX}/bin/python3 -m compileall \
	${pkgdir}${MINGW_PREFIX}/bin/$blender_version/scripts/startup \
	${pkgdir}${MINGW_PREFIX}/bin/$blender_version/scripts/modules \
	${pkgdir}${MINGW_PREFIX}/bin/$blender_version/scripts/addons
}
