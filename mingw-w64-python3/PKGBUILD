# Maintainer: Alexey Pavlov <alexpux@gmail.com>
# Contributor: Ray Donnelly <mingw.android@gmail.com>

_realname=python3
_mingw_suff=mingw-w64-${CARCH}
pkgname="${_mingw_suff}-${_realname}"
_pybasever=3.3
pkgver=${_pybasever}.5
pkgrel=1
pkgdesc="A high-level scripting language (mingw-w64)"
arch=('any')
license=('PSF')
url="http://www.python.org/"
depends=("${_mingw_suff}-gcc-libs" 
		"${_mingw_suff}-expat"
		"${_mingw_suff}-bzip2"
		"${_mingw_suff}-gdbm"
		"${_mingw_suff}-readline"
		"${_mingw_suff}-openssl"
		"${_mingw_suff}-libffi"
		"${_mingw_suff}-zlib"
		"${_mingw_suff}-xz"
		"${_mingw_suff}-tcl"
		"${_mingw_suff}-tk")
makedepends=("${_mingw_suff}-gcc" "${_mingw_suff}-pkg-config" "${_mingw_suff}-ncurses")
options=('!makeflags' 'staticlibs' 'strip')
source=("http://www.python.org/ftp/python/${pkgver%rc?}/Python-${pkgver}.tar.xz"
		0100-MINGW-BASE-use-NT-thread-model.patch
		0110-MINGW-translate-gcc-internal-defines-to-python-platf.patch
		0120-MINGW-use-header-in-lowercase.patch
		0130-MINGW-configure-MACHDEP-and-platform-for-build.patch
		0140-MINGW-preset-configure-defaults.patch
		0150-MINGW-configure-largefile-support-for-windows-builds.patch
		0160-MINGW-add-wincrypt.h-in-Python-random.c.patch
		0170-MINGW-add-srcdir-PC-to-CPPFLAGS.patch
		0180-MINGW-init-system-calls.patch
		0190-MINGW-detect-REPARSE_DATA_BUFFER.patch
		0200-MINGW-build-in-windows-modules-winreg.patch
		0210-MINGW-determine-if-pwdmodule-should-be-used.patch
		0220-MINGW-default-sys.path-calculations-for-windows-plat.patch
		0230-MINGW-AC_LIBOBJ-replacement-of-fileblocks.patch
		0240-MINGW-use-main-to-start-execution.patch
		0250-MINGW-compiler-customize-mingw-cygwin-compilers.patch
		0260-MINGW-compiler-enable-new-dtags.patch
		0270-CYGWIN-issue13756-Python-make-fail-on-cygwin.patch
		0280-issue17219-add-current-dir-in-library-path-if-buildi.patch
		0290-issue6672-v2-Add-Mingw-recognition-to-pyport.h-to-al.patch
		0300-MINGW-configure-for-shared-build.patch
		0310-MINGW-dynamic-loading-support.patch
		0320-MINGW-implement-exec-prefix.patch
		0330-MINGW-ignore-main-program-for-frozen-scripts.patch
		0340-MINGW-setup-exclude-termios-module.patch
		0350-MINGW-setup-_multiprocessing-module.patch
		0360-MINGW-setup-select-module.patch
		0370-MINGW-setup-_ctypes-module-with-system-libffi.patch
		0380-MINGW-defect-winsock2-and-setup-_socket-module.patch
		0390-MINGW-exclude-unix-only-modules.patch
		0400-MINGW-setup-msvcrt-and-_winapi-modules.patch
		0410-MINGW-build-extensions-with-GCC.patch
		0420-MINGW-use-Mingw32CCompiler-as-default-compiler-for-m.patch
		0430-MINGW-find-import-library.patch
		0440-MINGW-setup-_ssl-module.patch
		0450-MINGW-export-_PyNode_SizeOf-as-PyAPI-for-parser-modu.patch
		0460-MINGW-generalization-of-posix-build-in-sysconfig.py.patch
		0462-MINGW-support-stdcall-without-underscore.patch
		0464-use-replace-instead-rename-to-avoid-failure-on-windo.patch
		0470-MINGW-avoid-circular-dependency-from-time-module-dur.patch
		0480-MINGW-generalization-of-posix-build-in-distutils-sys.patch
		0490-MINGW-customize-site.patch
		0500-add-python-config-sh.patch
		0510-cross-darwin-feature.patch
		0520-py3k-mingw-ntthreads-vs-pthreads.patch
		0530-mingw-system-libffi.patch
		0540-mingw-semicolon-DELIM.patch
		0550-mingw-regen-use-stddef_h.patch
		0560-mingw-use-posix-getpath.patch
		0565-mingw-add-ModuleFileName-dir-to-PATH.patch
		0570-mingw-add-BUILDIN_WIN32_MODULEs-time-msvcrt.patch
		0580-mingw32-test-REPARSE_DATA_BUFFER.patch
		0590-mingw-INSTALL_SHARED-LDLIBRARY-LIBPL.patch
		0600-msys-mingw-prefer-unix-sep-if-MSYSTEM.patch
		0610-msys-cygwin-semi-native-build-sysconfig.patch
		0620-mingw-sysconfig-like-posix.patch
		0630-mingw-_winapi_as_builtin_for_Popen_in_cygwinccompiler.patch
		0640-mingw-x86_64-size_t-format-specifier-pid_t.patch
		0650-cross-dont-add-multiarch-paths-if-cross-compiling.patch
		0660-mingw-use-backslashes-in-compileall-py.patch
		0670-msys-convert_path-fix-and-root-hack.patch
		0690-allow-static-tcltk.patch
		0700-CROSS-avoid-ncursesw-include-path-hack.patch
		0710-CROSS-properly-detect-WINDOW-_flags-for-different-nc.patch
		0720-mingw-pdcurses_ISPAD.patch
		0730-mingw-fix-ncurses-module.patch
		0740-grammar-fixes.patch
		0750-builddir-fixes.patch
		0760-msys-monkeypatch-os-system-via-sh-exe.patch
		0770-msys-replace-slashes-used-in-io-redirection.patch
		0790-mingw-add-_exec_prefix-for-tcltk-dlls.patch
		0800-mingw-install-layout-as-posix.patch
		0810-remove_path_max.default.patch
		0820-dont-link-with-gettext.patch
		0830-ctypes-python-dll.patch
		0840-gdbm-module-includes.patch
		0850-use-gnu_printf-in-format.patch)

prepare() {
	cd "${srcdir}/Python-${pkgver}"

	# these are created by patches
	rm -f Misc/config_mingw Misc/cross_mingw32 Misc/python-config.sh.in Python/fileblocks.c

	plain "Apply Roumen Petrov's core patches (15)"
	patch -Np1 -i "${srcdir}"/0100-MINGW-BASE-use-NT-thread-model.patch
	patch -Np1 -i "${srcdir}"/0110-MINGW-translate-gcc-internal-defines-to-python-platf.patch
	patch -Np1 -i "${srcdir}"/0120-MINGW-use-header-in-lowercase.patch
	patch -Np1 -i "${srcdir}"/0130-MINGW-configure-MACHDEP-and-platform-for-build.patch
	patch -Np1 -i "${srcdir}"/0140-MINGW-preset-configure-defaults.patch
	patch -Np1 -i "${srcdir}"/0150-MINGW-configure-largefile-support-for-windows-builds.patch
	patch -Np1 -i "${srcdir}"/0160-MINGW-add-wincrypt.h-in-Python-random.c.patch
	patch -Np1 -i "${srcdir}"/0170-MINGW-add-srcdir-PC-to-CPPFLAGS.patch
	patch -Np1 -i "${srcdir}"/0180-MINGW-init-system-calls.patch
	patch -Np1 -i "${srcdir}"/0190-MINGW-detect-REPARSE_DATA_BUFFER.patch
	patch -Np1 -i "${srcdir}"/0200-MINGW-build-in-windows-modules-winreg.patch
	patch -Np1 -i "${srcdir}"/0210-MINGW-determine-if-pwdmodule-should-be-used.patch
	patch -Np1 -i "${srcdir}"/0220-MINGW-default-sys.path-calculations-for-windows-plat.patch
	patch -Np1 -i "${srcdir}"/0230-MINGW-AC_LIBOBJ-replacement-of-fileblocks.patch
	patch -Np1 -i "${srcdir}"/0240-MINGW-use-main-to-start-execution.patch

	plain "Apply Roumen Petrov's compiler patch (2)"
	patch -Np1 -i "${srcdir}"/0250-MINGW-compiler-customize-mingw-cygwin-compilers.patch
	patch -Np1 -i "${srcdir}"/0260-MINGW-compiler-enable-new-dtags.patch

	plain "Apply Roumen Petrov's extensions patches (23)"
	patch -Np1 -i "${srcdir}"/0270-CYGWIN-issue13756-Python-make-fail-on-cygwin.patch
	patch -Np1 -i "${srcdir}"/0280-issue17219-add-current-dir-in-library-path-if-buildi.patch
	patch -Np1 -i "${srcdir}"/0290-issue6672-v2-Add-Mingw-recognition-to-pyport.h-to-al.patch
	patch -Np1 -i "${srcdir}"/0300-MINGW-configure-for-shared-build.patch
	patch -Np1 -i "${srcdir}"/0310-MINGW-dynamic-loading-support.patch
	patch -Np1 -i "${srcdir}"/0320-MINGW-implement-exec-prefix.patch
	patch -Np1 -i "${srcdir}"/0330-MINGW-ignore-main-program-for-frozen-scripts.patch
	patch -Np1 -i "${srcdir}"/0340-MINGW-setup-exclude-termios-module.patch
	patch -Np1 -i "${srcdir}"/0350-MINGW-setup-_multiprocessing-module.patch
	patch -Np1 -i "${srcdir}"/0360-MINGW-setup-select-module.patch
	patch -Np1 -i "${srcdir}"/0370-MINGW-setup-_ctypes-module-with-system-libffi.patch
	patch -Np1 -i "${srcdir}"/0380-MINGW-defect-winsock2-and-setup-_socket-module.patch
	patch -Np1 -i "${srcdir}"/0390-MINGW-exclude-unix-only-modules.patch
	patch -Np1 -i "${srcdir}"/0400-MINGW-setup-msvcrt-and-_winapi-modules.patch
	patch -Np1 -i "${srcdir}"/0410-MINGW-build-extensions-with-GCC.patch
	patch -Np1 -i "${srcdir}"/0420-MINGW-use-Mingw32CCompiler-as-default-compiler-for-m.patch
	patch -Np1 -i "${srcdir}"/0430-MINGW-find-import-library.patch
	patch -Np1 -i "${srcdir}"/0440-MINGW-setup-_ssl-module.patch
	patch -Np1 -i "${srcdir}"/0450-MINGW-export-_PyNode_SizeOf-as-PyAPI-for-parser-modu.patch
	patch -Np1 -i "${srcdir}"/0460-MINGW-generalization-of-posix-build-in-sysconfig.py.patch
	patch -Np1 -i "${srcdir}"/0462-MINGW-support-stdcall-without-underscore.patch
	patch -Np1 -i "${srcdir}"/0464-use-replace-instead-rename-to-avoid-failure-on-windo.patch
	patch -Np1 -i "${srcdir}"/0470-MINGW-avoid-circular-dependency-from-time-module-dur.patch
	patch -Np1 -i "${srcdir}"/0480-MINGW-generalization-of-posix-build-in-distutils-sys.patch
	patch -Np1 -i "${srcdir}"/0490-MINGW-customize-site.patch

	plain "Apply Ray Donnelly's general/cross patches (29)"
	patch -Np1 -i "${srcdir}"/0500-add-python-config-sh.patch
	patch -Np1 -i "${srcdir}"/0510-cross-darwin-feature.patch
	patch -Np1 -i "${srcdir}"/0520-py3k-mingw-ntthreads-vs-pthreads.patch
	patch -Np1 -i "${srcdir}"/0530-mingw-system-libffi.patch
	patch -Np1 -i "${srcdir}"/0540-mingw-semicolon-DELIM.patch
	patch -Np1 -i "${srcdir}"/0550-mingw-regen-use-stddef_h.patch
	patch -Np1 -i "${srcdir}"/0560-mingw-use-posix-getpath.patch
	patch -Np1 -i "${srcdir}"/0565-mingw-add-ModuleFileName-dir-to-PATH.patch
	patch -Np1 -i "${srcdir}"/0570-mingw-add-BUILDIN_WIN32_MODULEs-time-msvcrt.patch
	patch -Np1 -i "${srcdir}"/0580-mingw32-test-REPARSE_DATA_BUFFER.patch
	patch -Np1 -i "${srcdir}"/0590-mingw-INSTALL_SHARED-LDLIBRARY-LIBPL.patch
	patch -Np1 -i "${srcdir}"/0600-msys-mingw-prefer-unix-sep-if-MSYSTEM.patch
	patch -Np1 -i "${srcdir}"/0610-msys-cygwin-semi-native-build-sysconfig.patch
	patch -Np1 -i "${srcdir}"/0620-mingw-sysconfig-like-posix.patch
	patch -Np1 -i "${srcdir}"/0630-mingw-_winapi_as_builtin_for_Popen_in_cygwinccompiler.patch
	patch -Np1 -i "${srcdir}"/0640-mingw-x86_64-size_t-format-specifier-pid_t.patch
	patch -Np1 -i "${srcdir}"/0650-cross-dont-add-multiarch-paths-if-cross-compiling.patch
	patch -Np1 -i "${srcdir}"/0660-mingw-use-backslashes-in-compileall-py.patch
	patch -Np1 -i "${srcdir}"/0670-msys-convert_path-fix-and-root-hack.patch
	patch -Np1 -i "${srcdir}"/0690-allow-static-tcltk.patch
	patch -Np1 -i "${srcdir}"/0700-CROSS-avoid-ncursesw-include-path-hack.patch
	patch -Np1 -i "${srcdir}"/0710-CROSS-properly-detect-WINDOW-_flags-for-different-nc.patch
	patch -Np1 -i "${srcdir}"/0720-mingw-pdcurses_ISPAD.patch
	patch -Np1 -i "${srcdir}"/0730-mingw-fix-ncurses-module.patch
	patch -Np1 -i "${srcdir}"/0740-grammar-fixes.patch
	patch -Np1 -i "${srcdir}"/0750-builddir-fixes.patch
	patch -Np1 -i "${srcdir}"/0760-msys-monkeypatch-os-system-via-sh-exe.patch
	patch -Np1 -i "${srcdir}"/0770-msys-replace-slashes-used-in-io-redirection.patch
	patch -Np1 -i "${srcdir}"/0790-mingw-add-_exec_prefix-for-tcltk-dlls.patch
	patch -Np1 -i "${srcdir}"/0800-mingw-install-layout-as-posix.patch
	patch -Np1 -i "${srcdir}"/0810-remove_path_max.default.patch
	patch -Np1 -i "${srcdir}"/0820-dont-link-with-gettext.patch
	patch -Np1 -i "${srcdir}"/0830-ctypes-python-dll.patch
	patch -Np1 -i "${srcdir}"/0840-gdbm-module-includes.patch
	patch -Np1 -i "${srcdir}"/0850-use-gnu_printf-in-format.patch

	autoreconf -vfi

	# Temporary workaround for FS#22322
	# See http://bugs.python.org/issue10835 for upstream report
	#sed -i "/progname =/s/python/python${_pybasever}/" Python/pythonrun.c

	touch Include/graminit.h
	touch Python/graminit.c
	touch Parser/Python.asdl
	touch Parser/asdl.py
	touch Parser/asdl_c.py
	touch Include/Python-ast.h
	touch Python/Python-ast.c
	echo \"\" > Parser/pgen.stamp
		
	# Ensure that we are using the system copy of various libraries (expat, zlib and libffi),
	# rather than copies shipped in the tarball
	rm -r Modules/expat
	rm -r Modules/zlib
	rm -r Modules/_ctypes/{darwin,libffi}*
}

check() {
	cd "${srcdir}/build-${CARCH}"
	make test
}

build() {
	pushd ${MINGW_PREFIX} > /dev/null
	export PREFIX_WIN=`pwd -W`
	popd > /dev/null

	CFLAGS+=" -fwrapv -D__USE_MINGW_ANSI_STDIO=1 -I$PREFIX_WIN/${MINGW_CHOST}/include "
	CXXFLAGS+=" -fwrapv -D__USE_MINGW_ANSI_STDIO=1 -I$PREFIX_WIN/include -I$PREFIX_WIN/include/ncursesw -I$MINGWHOME_WIN/$HOST/include "
	CPPFLAGS+=" -I$PREFIX_WIN/include -I$PREFIX_WIN/include/ncursesw -I$PREFIX_WIN/${MINGW_CHOST}/include "
	LDFLAGS+=" -L$PREFIX_WIN/${MINGW_CHOST}/lib -L$PREFIX_WIN/lib "
	if check_option "strip" "y"; then
		LDFLAGS+=" -s "
	fi
	if check_option "debug" "n"; then
		CFLAGS+=" -DNDEBUG "
		CXXFLAGS+=" -DNDEBUG "
	else
		plain " -DDEBUG -DPy_DEBUG -D_DEBUG does not work unfortunately .."
		#    CFLAGS+=" -DDEBUG -DPy_DEBUG -D_DEBUG "
		#    CXXFLAGS+=" -DDEBUG -DPy_DEBUG -D_DEBUG "
		CFLAGS+=" -O0 -ggdb"
		CXXFLAGS+=" -O0 -ggdb"
	fi

	LIBFFI_INC=`${MINGW_PREFIX}/bin/pkg-config libffi --cflags-only-I | sed "s|\-I||g"`
	pushd ${LIBFFI_INC} > /dev/null
	export LIBFFI_INCLUDEDIR=`pwd -W`
	popd > /dev/null

	# Workaround for conftest error on 64-bit builds
	export ac_cv_working_tzset=no

	mkdir -p "${srcdir}/build-${CARCH}" && cd "${srcdir}/build-${CARCH}"
	MSYSTEM=MINGW ../Python-${pkgver}/configure \
		--prefix=${MINGW_PREFIX} \
		--host=${MINGW_CHOST} \
		--build=${MINGW_CHOST} \
		--enable-shared \
		--with-threads \
		--with-system-expat \
		--with-system-ffi \
		OPT=""
		#--with-dbmliborder='gdbm:ndbm'
	make
}

package() {
	cd "${srcdir}/build-${CARCH}"
	MSYSTEM=MINGW \
	MSYS2_ARG_CONV_EXCL="--prefix=;--install-scripts=;--install-platlib=" \
	make install DESTDIR="$pkgdir"
	#mv "${pkgdir}${MINGW_PREFIX}"/bin/smtpd.py "${pkgdir}${MINGW_PREFIX}"/lib/python${_pybasever}/

	rm "${pkgdir}${MINGW_PREFIX}"/bin/2to3
	cp -f "${pkgdir}${MINGW_PREFIX}"/lib/python${_pybasever}/config-${_pybasever}m/libpython${_pybasever}m.dll.a "${pkgdir}${MINGW_PREFIX}"/lib/libpython${_pybasever}m.dll.a

	# some useful "stuff"
	install -dm755 "${pkgdir}${MINGW_PREFIX}"/lib/python${_pybasever}/Tools/{i18n,scripts}
	install -m755 "${srcdir}/Python-${pkgver}"/Tools/i18n/{msgfmt,pygettext}.py "${pkgdir}${MINGW_PREFIX}"/lib/python${_pybasever}/Tools/i18n/
	install -m755 "${srcdir}/Python-${pkgver}"/Tools/scripts/{README,*py} "${pkgdir}${MINGW_PREFIX}"/lib/python${_pybasever}/Tools/scripts/

	# clean up #!s
	find "${pkgdir}${MINGW_PREFIX}"/lib/python${_pybasever}/ -name '*.py' | \
		xargs sed -i "s|#[ ]*![ ]*/usr/bin/env python$|#!/usr/bin/env python3|"

	# clean-up reference to build directory
	sed -i "s#${srcdir}/Python-${pkgver}:##" "${pkgdir}${MINGW_PREFIX}"/lib/python${_pybasever}/config-${_pybasever}m/Makefile

	for fscripts in 2to3-${_pybasever} idle3 idle${_pybasever} pydoc3 pydoc${_pybasever} pyvenv pyvenv-${_pybasever}; do
		sed -e "s|${MINGW_PREFIX}/bin/python${_pybasever}.exe|/usr/bin/env python${_pybasever}.exe|g" -i "${pkgdir}${MINGW_PREFIX}"/bin/$fscripts
	done
	
	sed -i "s|#!${pkgdir}${MINGW_PREFIX}/bin/python${_pybasever}m.exe|#!/usr/bin/env python${_pybasever}.exe|" "${pkgdir}${MINGW_PREFIX}"/bin/python${_pybasever}-config
	sed -i "s|#!${pkgdir}${MINGW_PREFIX}/bin/python${_pybasever}m.exe|#!/usr/bin/env python${_pybasever}.exe|" "${pkgdir}${MINGW_PREFIX}"/bin/python3-config

	# fix permissons
	find ${pkgdir}${MINGW_PREFIX} -type f \( -name "*.dll" -o -name "*.exe" \) | xargs chmod 0755

	# Fix up two instances of MSYS2 paths in python-config.sh in-case the final consumer of the results are native executables.
	sed -i "s|${MINGW_PREFIX}|${PREFIX_WIN}|" "${pkgdir}${MINGW_PREFIX}"/bin/python${_pybasever}m-config.sh

	# replace paths in sysconfig
	sed -i "s|${pkgdir}${MINGW_PREFIX}|${MINGW_PREFIX}|g" \
		"${pkgdir}${MINGW_PREFIX}"/lib/python${_pybasever}/_sysconfigdata.py \
		"${pkgdir}${MINGW_PREFIX}"/lib/python${_pybasever}/smtpd.py

	# Create python executable with windows subsystem
	cp -f "${pkgdir}${MINGW_PREFIX}"/bin/python3.exe "${pkgdir}${MINGW_PREFIX}"/bin/python3w.exe
	${MINGW_PREFIX}/bin/objcopy --subsystem windows "${pkgdir}${MINGW_PREFIX}"/bin/python3w.exe
}

md5sums=('b2a4df195d934e5b229e8328ca864960'
         '45a18d722e53aee478522f517390b8b6'
         '9b1d2a157eeb0f334fc1c2c26eae49fc'
         '78707c3d26a3e787045139fbf97b6423'
         '29e1a9e4a98dc8298cd18dfb78ef3add'
         'f04db427e53e41df13fb3109d27c494a'
         'f430c8e2a0089075a077bfa0a387d964'
         '58480a62216b179ae4ae2ec8a71745d5'
         'cd0f324835c10d5ac038ce13103aa4c4'
         '307b965a64d2b1ff0f09c94e0d2ffe5a'
         '284d621bbe417f7696c5c5e9229d333e'
         '54d13017c77a804e0b3d40c79827780e'
         'fc8b1581277ddb8087638409fffbcd5f'
         '8f6d3d0833ca6b205ed7df19c37e5084'
         '2cf99e516b4b83767221f5f41779621a'
         '8eb24e4f6b1546d647e1d2e1287156f8'
         'e730b8ea0db65440b59cec5d426b4d89'
         '1eef390e282fd1ca336974cdbae38627'
         '6daa161bb943d51de548650007c176b0'
         'e37e73ecc5cf09566a3000532f452085'
         '742750bc0f1914f60f36f997f36f5a8a'
         '01ce80d272d82f6f9204641da0505032'
         'e9dfce0d03411290ddeb022f39b96bea'
         '1dea962b56bdcec072822fb03f69ff32'
         'de2612339a65670690f95b5513e32795'
         '229ceb1e9daaeb0168d04f65a0c023b0'
         'dbbc8d6c17fd6c331ab9674a413e337f'
         '3594d42a528eed82dafb1a972cf9ba9b'
         '23bad2cfb77a007fd1a8c001ae83124f'
         'c3e338ac66526796ccab6a27b3d8e376'
         '4f1825f2e8104f609c98bd0db7d1f90a'
         '1520ec7528aaba5c777317baef65df42'
         'ca7674a78361206d39e303bb30da1591'
         '9c6c7be3bcf4e5b8ba1c2b62e42707d5'
         '98c3b920e8a7eaff0435b9963b0e41c0'
         '9ed0dca13df13b62e0364c7fa37fde39'
         '5c796f37b66f43afa4678471b5e40b6b'
         'aecd076c7699cd9eceeb7105ff5e12a1'
         '4b5a65a5a0b2dc0f9948983fd4375f16'
         'd341559007c086ff95c8cfd97699e7a2'
         '716fc0a3ab6fa7bb14533912b893a021'
         '55354327e2e66df0e6bf5785ebd45277'
         'f72286a4bdd5fade7b269851b68b3a20'
         '13a28322773d75661ac63657c0c0d79f'
         'f09099f57c83a84f904da4e3cf9691cf'
         'f3f0ce03493a64969bc2fefa192ebfc3'
         '66b556a2b1c1bb1d714a64259b922669'
         '05ae3ae4ddc23e41308cba3c9a94289d'
         '2723d8b0c32af9828a9df7017da64862'
         'bb1093674b1f6f1a40aec04666ded4ee'
         'c54ee813985f5645a7e436ff0407d4dd'
         '8d87d5381c0d7b116bb05588335afd64'
         'dba4ed42dc59e59f5ab3131530440222'
         '8661b66c8a87633bd505381fd14b70e8'
         '5228b5441bba0392d8de54409d444e33'
         '478a26882f3c53e95c1fbc81d32f96cd'
         '37458cfda528b47f162a25749027c5aa'
         '416bf71be5fe95b7db5060c596f6528e'
         '9e69b8c4795426501025c4b132069e8f'
         'b3c288d90f3c7cf90dbbe411d3d3e807'
         '92d2c2f7e881e4915a2608798046392b'
         'abb7181812c44a86ad0706eda43b6c8a'
         '915cc545877c2dee756998d48dfd9924'
         '2afd2c38bf8dbcff1aa4b4086b1d50f6'
         '40313bee03979aac8ce9f16c1dabff42'
         '615ca663cded831d78dd6e33b164735f'
         '75b6c01e16cc8232cdb494687f7f9b60'
         'ea63d0cc01d2f2d60e472dcfaed0dd28'
         '4e602b3cbe18e6bc642f757d5e05b66f'
         '909b43702c4b9e93741e541bf64b0bc8'
         '5378c3fe0311c2e70618fda8f044e474'
         'd8f85f5f1146ba3f1931826afcaf883a'
         '3b2809914a6760c56ffb115576c7cb31'
         'fd70fc71c5719313838a933c604a7fcc'
         '82ae0a71bbca28d9c2091664794493f0'
         'ef47aa14781ec0deec61eee64623b445'
         'bc67fc798089896fd71d9e3e8e484e89'
         '5a7e810d3b07760b7e0d2660c94e1a3b')
