# Maintainer: Alexey Pavlov <alexpux@gmail.com>
# Contributor: Ray Donnelly <mingw.android@gmail.com>

_realname=python3
_mingw_suff=mingw-w64-${CARCH}
pkgname="${_mingw_suff}-${_realname}"
_pybasever=3.3
pkgver=${_pybasever}.3
pkgrel=10
pkgdesc="A high-level scripting language (mingw-w64)"
arch=('any')
license=('PSF')
url="http://www.python.org/"
depends=("${_mingw_suff}-gcc-libs" 
		"${_mingw_suff}-expat"
		"${_mingw_suff}-bzip2"
		"${_mingw_suff}-gdbm"
		"${_mingw_suff}-readline"
		"${_mingw_suff}-openssl"
		"${_mingw_suff}-libffi"
		"${_mingw_suff}-zlib"
		"${_mingw_suff}-xz"
		"${_mingw_suff}-tcl"
		"${_mingw_suff}-tk")
makedepends=("${_mingw_suff}-gcc" "${_mingw_suff}-pkg-config" "${_mingw_suff}-ncurses")
options=('!makeflags' 'staticlibs' 'strip')
source=("http://www.python.org/ftp/python/${pkgver%rc?}/Python-${pkgver}.tar.xz"
		0100-MINGW-BASE-use-NT-thread-model.patch
		0110-MINGW-translate-gcc-internal-defines-to-python-platf.patch
		0120-MINGW-use-header-in-lowercase.patch
		0130-MINGW-configure-MACHDEP-and-platform-for-build.patch
		0140-MINGW-preset-configure-defaults.patch
		0150-MINGW-configure-largefile-support-for-windows-builds.patch
		0160-MINGW-add-wincrypt.h-in-Python-random.c.patch
		0170-MINGW-add-srcdir-PC-to-CPPFLAGS.patch
		0180-MINGW-init-system-calls.patch
		0190-MINGW-detect-REPARSE_DATA_BUFFER.patch
		0200-MINGW-build-in-windows-modules-winreg.patch
		0210-MINGW-determine-if-pwdmodule-should-be-used.patch
		0220-MINGW-default-sys.path-calculations-for-windows-plat.patch
		0230-MINGW-AC_LIBOBJ-replacement-of-fileblocks.patch
		0240-MINGW-use-main-to-start-execution.patch
		0250-MINGW-compiler-customize-mingw-cygwin-compilers.patch
		0260-MINGW-compiler-enable-new-dtags.patch
		0270-CYGWIN-issue13756-Python-make-fail-on-cygwin.patch
		0280-issue17219-add-current-dir-in-library-path-if-buildi.patch
		0290-issue6672-v2-Add-Mingw-recognition-to-pyport.h-to-al.patch
		0300-MINGW-configure-for-shared-build.patch
		0310-MINGW-dynamic-loading-support.patch
		0320-MINGW-implement-exec-prefix.patch
		0330-MINGW-ignore-main-program-for-frozen-scripts.patch
		0340-MINGW-setup-exclude-termios-module.patch
		0350-MINGW-setup-_multiprocessing-module.patch
		0360-MINGW-setup-select-module.patch
		0370-MINGW-setup-_ctypes-module-with-system-libffi.patch
		0380-MINGW-defect-winsock2-and-setup-_socket-module.patch
		0390-MINGW-exclude-unix-only-modules.patch
		0400-MINGW-setup-msvcrt-and-_winapi-modules.patch
		0410-MINGW-build-extensions-with-GCC.patch
		0420-MINGW-use-Mingw32CCompiler-as-default-compiler-for-m.patch
		0430-MINGW-find-import-library.patch
		0440-MINGW-setup-_ssl-module.patch
		0450-MINGW-export-_PyNode_SizeOf-as-PyAPI-for-parser-modu.patch
		0460-MINGW-generalization-of-posix-build-in-sysconfig.py.patch
		0462-MINGW-support-stdcall-without-underscore.patch
		0464-use-replace-instead-rename-to-avoid-failure-on-windo.patch
		0470-MINGW-avoid-circular-dependency-from-time-module-dur.patch
		0480-MINGW-generalization-of-posix-build-in-distutils-sys.patch
		0490-MINGW-customize-site.patch
		0500-add-python-config-sh.patch
		0510-cross-darwin-feature.patch
		0520-py3k-mingw-ntthreads-vs-pthreads.patch
		0530-mingw-system-libffi.patch
		0540-mingw-semicolon-DELIM.patch
		0550-mingw-regen-use-stddef_h.patch
		0560-mingw-use-posix-getpath.patch
		0565-mingw-add-ModuleFileName-dir-to-PATH.patch
		0570-mingw-add-BUILDIN_WIN32_MODULEs-time-msvcrt.patch
		0580-mingw32-test-REPARSE_DATA_BUFFER.patch
		0590-mingw-INSTALL_SHARED-LDLIBRARY-LIBPL.patch
		0600-msys-mingw-prefer-unix-sep-if-MSYSTEM.patch
		0610-msys-cygwin-semi-native-build-sysconfig.patch
		0620-mingw-sysconfig-like-posix.patch
		0630-mingw-_winapi_as_builtin_for_Popen_in_cygwinccompiler.patch
		0640-mingw-x86_64-size_t-format-specifier-pid_t.patch
		0650-cross-dont-add-multiarch-paths-if-cross-compiling.patch
		0660-mingw-use-backslashes-in-compileall-py.patch
		0670-msys-convert_path-fix-and-root-hack.patch
		0680-mingw-hack-around-double-copy-scripts-issue.patch
		0690-allow-static-tcltk.patch
		0700-CROSS-avoid-ncursesw-include-path-hack.patch
		0710-CROSS-properly-detect-WINDOW-_flags-for-different-nc.patch
		0720-mingw-pdcurses_ISPAD.patch
		0730-mingw-fix-ncurses-module.patch
		0740-grammar-fixes.patch
		0750-builddir-fixes.patch
		0760-msys-monkeypatch-os-system-via-sh-exe.patch
		0770-msys-replace-slashes-used-in-io-redirection.patch
		0790-mingw-add-_exec_prefix-for-tcltk-dlls.patch
		0800-mingw-install-layout-as-posix.patch
		0810-remove_path_max.default.patch
		0820-dont-link-with-gettext.patch
		0830-ctypes-python-dll.patch
		0840-gdbm-module-includes.patch
		0850-use-gnu_printf-in-format.patch)

prepare() {
	cd "${srcdir}/Python-${pkgver}"

	# these are created by patches
	rm -f Misc/config_mingw Misc/cross_mingw32 Misc/python-config.sh.in Python/fileblocks.c

	plain "Apply Roumen Petrov's core patches (15)"
	patch -Np1 -i "${srcdir}"/0100-MINGW-BASE-use-NT-thread-model.patch
	patch -Np1 -i "${srcdir}"/0110-MINGW-translate-gcc-internal-defines-to-python-platf.patch
	patch -Np1 -i "${srcdir}"/0120-MINGW-use-header-in-lowercase.patch
	patch -Np1 -i "${srcdir}"/0130-MINGW-configure-MACHDEP-and-platform-for-build.patch
	patch -Np1 -i "${srcdir}"/0140-MINGW-preset-configure-defaults.patch
	patch -Np1 -i "${srcdir}"/0150-MINGW-configure-largefile-support-for-windows-builds.patch
	patch -Np1 -i "${srcdir}"/0160-MINGW-add-wincrypt.h-in-Python-random.c.patch
	patch -Np1 -i "${srcdir}"/0170-MINGW-add-srcdir-PC-to-CPPFLAGS.patch
	patch -Np1 -i "${srcdir}"/0180-MINGW-init-system-calls.patch
	patch -Np1 -i "${srcdir}"/0190-MINGW-detect-REPARSE_DATA_BUFFER.patch
	patch -Np1 -i "${srcdir}"/0200-MINGW-build-in-windows-modules-winreg.patch
	patch -Np1 -i "${srcdir}"/0210-MINGW-determine-if-pwdmodule-should-be-used.patch
	patch -Np1 -i "${srcdir}"/0220-MINGW-default-sys.path-calculations-for-windows-plat.patch
	patch -Np1 -i "${srcdir}"/0230-MINGW-AC_LIBOBJ-replacement-of-fileblocks.patch
	patch -Np1 -i "${srcdir}"/0240-MINGW-use-main-to-start-execution.patch

	plain "Apply Roumen Petrov's compiler patch (2)"
	patch -Np1 -i "${srcdir}"/0250-MINGW-compiler-customize-mingw-cygwin-compilers.patch
	patch -Np1 -i "${srcdir}"/0260-MINGW-compiler-enable-new-dtags.patch

	plain "Apply Roumen Petrov's extensions patches (23)"
	patch -Np1 -i "${srcdir}"/0270-CYGWIN-issue13756-Python-make-fail-on-cygwin.patch
	patch -Np1 -i "${srcdir}"/0280-issue17219-add-current-dir-in-library-path-if-buildi.patch
	patch -Np1 -i "${srcdir}"/0290-issue6672-v2-Add-Mingw-recognition-to-pyport.h-to-al.patch
	patch -Np1 -i "${srcdir}"/0300-MINGW-configure-for-shared-build.patch
	patch -Np1 -i "${srcdir}"/0310-MINGW-dynamic-loading-support.patch
	patch -Np1 -i "${srcdir}"/0320-MINGW-implement-exec-prefix.patch
	patch -Np1 -i "${srcdir}"/0330-MINGW-ignore-main-program-for-frozen-scripts.patch
	patch -Np1 -i "${srcdir}"/0340-MINGW-setup-exclude-termios-module.patch
	patch -Np1 -i "${srcdir}"/0350-MINGW-setup-_multiprocessing-module.patch
	patch -Np1 -i "${srcdir}"/0360-MINGW-setup-select-module.patch
	patch -Np1 -i "${srcdir}"/0370-MINGW-setup-_ctypes-module-with-system-libffi.patch
	patch -Np1 -i "${srcdir}"/0380-MINGW-defect-winsock2-and-setup-_socket-module.patch
	patch -Np1 -i "${srcdir}"/0390-MINGW-exclude-unix-only-modules.patch
	patch -Np1 -i "${srcdir}"/0400-MINGW-setup-msvcrt-and-_winapi-modules.patch
	patch -Np1 -i "${srcdir}"/0410-MINGW-build-extensions-with-GCC.patch
	patch -Np1 -i "${srcdir}"/0420-MINGW-use-Mingw32CCompiler-as-default-compiler-for-m.patch
	patch -Np1 -i "${srcdir}"/0430-MINGW-find-import-library.patch
	patch -Np1 -i "${srcdir}"/0440-MINGW-setup-_ssl-module.patch
	patch -Np1 -i "${srcdir}"/0450-MINGW-export-_PyNode_SizeOf-as-PyAPI-for-parser-modu.patch
	patch -Np1 -i "${srcdir}"/0460-MINGW-generalization-of-posix-build-in-sysconfig.py.patch
	patch -Np1 -i "${srcdir}"/0462-MINGW-support-stdcall-without-underscore.patch
	patch -Np1 -i "${srcdir}"/0464-use-replace-instead-rename-to-avoid-failure-on-windo.patch
	patch -Np1 -i "${srcdir}"/0470-MINGW-avoid-circular-dependency-from-time-module-dur.patch
	patch -Np1 -i "${srcdir}"/0480-MINGW-generalization-of-posix-build-in-distutils-sys.patch
	patch -Np1 -i "${srcdir}"/0490-MINGW-customize-site.patch

	plain "Apply Ray Donnelly's general/cross patches (29)"
	patch -Np1 -i "${srcdir}"/0500-add-python-config-sh.patch
	patch -Np1 -i "${srcdir}"/0510-cross-darwin-feature.patch
	patch -Np1 -i "${srcdir}"/0520-py3k-mingw-ntthreads-vs-pthreads.patch
	patch -Np1 -i "${srcdir}"/0530-mingw-system-libffi.patch
	patch -Np1 -i "${srcdir}"/0540-mingw-semicolon-DELIM.patch
	patch -Np1 -i "${srcdir}"/0550-mingw-regen-use-stddef_h.patch
	patch -Np1 -i "${srcdir}"/0560-mingw-use-posix-getpath.patch
	patch -Np1 -i "${srcdir}"/0565-mingw-add-ModuleFileName-dir-to-PATH.patch
	patch -Np1 -i "${srcdir}"/0570-mingw-add-BUILDIN_WIN32_MODULEs-time-msvcrt.patch
	patch -Np1 -i "${srcdir}"/0580-mingw32-test-REPARSE_DATA_BUFFER.patch
	patch -Np1 -i "${srcdir}"/0590-mingw-INSTALL_SHARED-LDLIBRARY-LIBPL.patch
	patch -Np1 -i "${srcdir}"/0600-msys-mingw-prefer-unix-sep-if-MSYSTEM.patch
	patch -Np1 -i "${srcdir}"/0610-msys-cygwin-semi-native-build-sysconfig.patch
	patch -Np1 -i "${srcdir}"/0620-mingw-sysconfig-like-posix.patch
	patch -Np1 -i "${srcdir}"/0630-mingw-_winapi_as_builtin_for_Popen_in_cygwinccompiler.patch
	patch -Np1 -i "${srcdir}"/0640-mingw-x86_64-size_t-format-specifier-pid_t.patch
	patch -Np1 -i "${srcdir}"/0650-cross-dont-add-multiarch-paths-if-cross-compiling.patch
	patch -Np1 -i "${srcdir}"/0660-mingw-use-backslashes-in-compileall-py.patch
	patch -Np1 -i "${srcdir}"/0670-msys-convert_path-fix-and-root-hack.patch
	#patch -Np1 -i "${srcdir}"/0680-mingw-hack-around-double-copy-scripts-issue.patch
	patch -Np1 -i "${srcdir}"/0690-allow-static-tcltk.patch
	patch -Np1 -i "${srcdir}"/0700-CROSS-avoid-ncursesw-include-path-hack.patch
	patch -Np1 -i "${srcdir}"/0710-CROSS-properly-detect-WINDOW-_flags-for-different-nc.patch
	patch -Np1 -i "${srcdir}"/0720-mingw-pdcurses_ISPAD.patch
	patch -Np1 -i "${srcdir}"/0730-mingw-fix-ncurses-module.patch
	patch -Np1 -i "${srcdir}"/0740-grammar-fixes.patch
	patch -Np1 -i "${srcdir}"/0750-builddir-fixes.patch
	patch -Np1 -i "${srcdir}"/0760-msys-monkeypatch-os-system-via-sh-exe.patch
	patch -Np1 -i "${srcdir}"/0770-msys-replace-slashes-used-in-io-redirection.patch
	patch -Np1 -i "${srcdir}"/0790-mingw-add-_exec_prefix-for-tcltk-dlls.patch
	patch -Np1 -i "${srcdir}"/0800-mingw-install-layout-as-posix.patch
	patch -Np1 -i "${srcdir}"/0810-remove_path_max.default.patch
	patch -Np1 -i "${srcdir}"/0820-dont-link-with-gettext.patch
	patch -Np1 -i "${srcdir}"/0830-ctypes-python-dll.patch
	patch -Np1 -i "${srcdir}"/0840-gdbm-module-includes.patch
	patch -Np1 -i "${srcdir}"/0850-use-gnu_printf-in-format.patch

	autoreconf -vfi

	# Temporary workaround for FS#22322
	# See http://bugs.python.org/issue10835 for upstream report
	#sed -i "/progname =/s/python/python${_pybasever}/" Python/pythonrun.c

	touch Include/graminit.h
	touch Python/graminit.c
	touch Parser/Python.asdl
	touch Parser/asdl.py
	touch Parser/asdl_c.py
	touch Include/Python-ast.h
	touch Python/Python-ast.c
	echo \"\" > Parser/pgen.stamp
		
	# Ensure that we are using the system copy of various libraries (expat, zlib and libffi),
	# rather than copies shipped in the tarball
	rm -r Modules/expat
	rm -r Modules/zlib
	rm -r Modules/_ctypes/{darwin,libffi}*
}

check() {
	cd "${srcdir}/build-${CARCH}"
	make test
}

build() {
	pushd ${MINGW_PREFIX} > /dev/null
	export PREFIX_WIN=`pwd -W`
	popd > /dev/null

	CFLAGS+=" -fwrapv -D__USE_MINGW_ANSI_STDIO=1 -I$PREFIX_WIN/${MINGW_CHOST}/include "
	CXXFLAGS+=" -fwrapv -D__USE_MINGW_ANSI_STDIO=1 -I$PREFIX_WIN/include -I$PREFIX_WIN/include/ncursesw -I$MINGWHOME_WIN/$HOST/include "
	CPPFLAGS+=" -I$PREFIX_WIN/include -I$PREFIX_WIN/include/ncursesw -I$PREFIX_WIN/${MINGW_CHOST}/include "
	LDFLAGS+=" -L$PREFIX_WIN/${MINGW_CHOST}/lib -L$PREFIX_WIN/lib "
	if check_option "strip" "y"; then
		LDFLAGS+=" -s "
	fi
	if check_option "debug" "n"; then
		CFLAGS+=" -DNDEBUG "
		CXXFLAGS+=" -DNDEBUG "
	else
		plain " -DDEBUG -DPy_DEBUG -D_DEBUG does not work unfortunately .."
		#    CFLAGS+=" -DDEBUG -DPy_DEBUG -D_DEBUG "
		#    CXXFLAGS+=" -DDEBUG -DPy_DEBUG -D_DEBUG "
		CFLAGS+=" -O0 -ggdb"
		CXXFLAGS+=" -O0 -ggdb"
	fi

	LIBFFI_INC=`${MINGW_PREFIX}/bin/pkg-config libffi --cflags-only-I | sed "s|\-I||g"`
	pushd ${LIBFFI_INC} > /dev/null
	export LIBFFI_INCLUDEDIR=`pwd -W`
	popd > /dev/null

	# Workaround for conftest error on 64-bit builds
	export ac_cv_working_tzset=no

	mkdir -p "${srcdir}/build-${CARCH}" && cd "${srcdir}/build-${CARCH}"
	MSYSTEM=MINGW ../Python-${pkgver}/configure \
		--prefix=${MINGW_PREFIX} \
		--host=${MINGW_CHOST} \
		--build=${MINGW_CHOST} \
		--enable-shared \
		--with-threads \
		--with-system-expat \
		--with-system-ffi \
		OPT=""
		#--with-dbmliborder='gdbm:ndbm'
	make
}

package() {
	cd "${srcdir}/build-${CARCH}"
	MSYSTEM=MINGW \
	MSYS2_ARG_CONV_EXCL="--prefix=;--install-scripts=;--install-platlib=" \
	make install DESTDIR="$pkgdir"
	#mv "${pkgdir}${MINGW_PREFIX}"/bin/smtpd.py "${pkgdir}${MINGW_PREFIX}"/lib/python${_pybasever}/

	rm "${pkgdir}${MINGW_PREFIX}"/bin/2to3
	cp -f "${pkgdir}${MINGW_PREFIX}"/lib/python${_pybasever}/config-${_pybasever}m/libpython${_pybasever}m.dll.a "${pkgdir}${MINGW_PREFIX}"/lib/libpython${_pybasever}m.dll.a

	# some useful "stuff"
	install -dm755 "${pkgdir}${MINGW_PREFIX}"/lib/python${_pybasever}/Tools/{i18n,scripts}
	install -m755 "${srcdir}/Python-${pkgver}"/Tools/i18n/{msgfmt,pygettext}.py "${pkgdir}${MINGW_PREFIX}"/lib/python${_pybasever}/Tools/i18n/
	install -m755 "${srcdir}/Python-${pkgver}"/Tools/scripts/{README,*py} "${pkgdir}${MINGW_PREFIX}"/lib/python${_pybasever}/Tools/scripts/

	# clean up #!s
	find "${pkgdir}${MINGW_PREFIX}"/lib/python${_pybasever}/ -name '*.py' | \
		xargs sed -i "s|#[ ]*![ ]*/usr/bin/env python$|#!/usr/bin/env python3|"

	# clean-up reference to build directory
	sed -i "s#${srcdir}/Python-${pkgver}:##" "${pkgdir}${MINGW_PREFIX}"/lib/python${_pybasever}/config-${_pybasever}m/Makefile

	for fscripts in 2to3-${_pybasever} idle3 idle${_pybasever} pydoc3 pydoc${_pybasever} pyvenv pyvenv-${_pybasever}; do
		sed -e "s|${MINGW_PREFIX}/bin/python${_pybasever}.exe|/usr/bin/env python${_pybasever}.exe|g" -i "${pkgdir}${MINGW_PREFIX}"/bin/$fscripts
	done
	
	sed -i "s|#!${pkgdir}${MINGW_PREFIX}/bin/python${_pybasever}m.exe|#!/usr/bin/env python${_pybasever}.exe|" "${pkgdir}${MINGW_PREFIX}"/bin/python${_pybasever}-config
	sed -i "s|#!${pkgdir}${MINGW_PREFIX}/bin/python${_pybasever}m.exe|#!/usr/bin/env python${_pybasever}.exe|" "${pkgdir}${MINGW_PREFIX}"/bin/python3-config

	# fix permissons
	find ${pkgdir}${MINGW_PREFIX} -type f \( -name "*.dll" -o -name "*.exe" \) | xargs chmod 0755

	# Fix up two instances of MSYS2 paths in python-config.sh in-case the final consumer of the results are native executables.
	sed -i "s|${MINGW_PREFIX}|${PREFIX_WIN}|" "${pkgdir}${MINGW_PREFIX}"/bin/python${_pybasever}m-config.sh

	# replace paths in sysconfig
	sed -i "s|${pkgdir}${MINGW_PREFIX}|${MINGW_PREFIX}|g" \
		"${pkgdir}${MINGW_PREFIX}"/lib/python${_pybasever}/_sysconfigdata.py \
		"${pkgdir}${MINGW_PREFIX}"/lib/python${_pybasever}/smtpd.py

	# Create python executable with windows subsystem
	cp -f "${pkgdir}${MINGW_PREFIX}"/bin/python3.exe "${pkgdir}${MINGW_PREFIX}"/bin/python3w.exe
	${MINGW_PREFIX}/bin/objcopy --subsystem windows "${pkgdir}${MINGW_PREFIX}"/bin/python3w.exe
}

md5sums=('4ca001c5586eb0744e3174bc75c6fba8'
         '6d6f3b570da5f1638f09e58838edb843'
         'f0d693d69d2726d69ed117a81c8e4e49'
         '1cb96f1fcb5924b5dbda940981eb2542'
         '9f06acf547a648c30226c35204f0f1d9'
         '896124c57ef06fbc7a5747aeb2b0d720'
         'a7cd9bab14b673ec3a5d3c4c0a49f94c'
         '9cf8dc4282a7dd71737341870600bd18'
         'eac2e24c6129354717ff76077763aadd'
         '55199b06d4d027aaa047babcf4cf7798'
         'd56a65ecbfe54b5f32028b8866a636e8'
         'ed6cb95b87655d93273058ee33937c30'
         '097df30c123fb71822306f2d4c2287c8'
         '01b97485841a10891200ba62fdd1211f'
         'a4eaca478c6a430efd58bf7c6da5434c'
         'd2975f3f1c0106db83d64b31afb2b1d2'
         '51c5884151a9f48281e70c3365e7044d'
         '1a0e95e08033a8c4077611d877fd5c1e'
         'fd949a062933682cf035c9dd5f5bf74e'
         'e7e275f2991c8c1f8058a2e9ded212b9'
         'd7e0dd6dd1b486d31d4fa2a1ac0bf065'
         '662aa08f6ed04393526aa5802a8ad421'
         '2d8aec1d384ad3ac4570ff0fa10f53c6'
         '813841a393f3c21bf3a475a744c6f0e3'
         '60de7a2350921ae07d6a4484780524a1'
         '4b97984daaa660f3babdc557e65a4ccc'
         '4e5296e8f66f94a732db1a9e99a8971c'
         'bb374d01fdbb5e1c18e882e4f12fee00'
         '3c4c6c551c8e56bfa50490910c1a5806'
         '746ec40e6e27e3155b2cad3a0b1fb303'
         '9ae2e225c113441a86440be287b53030'
         '8e7d7c7faedd80dd955f6ad60de90a7b'
         '6a96817b9b58b823c063c5986ad58bb0'
         '474b78366c02f1da7cf43f3310a13a4e'
         'a45971018611e658edf09ca2c4cb7058'
         'ef0e42ee73aaa4973480d9bffe54f58b'
         '6b7b983f67cada462fd208f6b741414f'
         '3c6b0bc77a020d1f9915f300e32afb4e'
         'a18f194a6b45bdec3b02c112eab2615a'
         'bc257632db05ee2553206bf0e7173f36'
         '51de3adbcfddd55a2ff4eb740ce79745'
         '431bed0e3be6ed4a25dcc9edd8382d85'
         'ed480be16702f0a81fd5afbb47f23752'
         'c9eff096a3d407cb91a7df0ebe48aa99'
         '97fef7f8520d5b6fe16b972f94598fb3'
         'ba220cc7aebe4549560e88cf47f35a00'
         'db1aab49b1487a5519fffbf031720b87'
         '06f73bdd7f433a8fbc5529b32356df16'
         '284da4250eb5630c67265a58399b167c'
         '140c4740f6fb039c27c7acadc45c6a5a'
         '7a5f38ae20f8a103115b891ed4cb4c79'
         'f2ba83608a2f94e5be0dd7399b680fcd'
         '39f372cb542181e72e179975ff473415'
         'd4fd5d58fe9c5f8bbe1558274045493c'
         '3c155abb46083813a03def994369abc1'
         '9a06894e0b93486d8b146e82c43d1bd2'
         'd795e6fa2f622cf70ce67e1ad89c30a3'
         '5290c83b4a8f81c585ebfa3d97d78c74'
         '5c8d7a405f7d37206539a67db50cccee'
         '49f0fb2331663e2b38ab40b33f774b85'
         '6934047707118ad45edbc15d0d85f68e'
         'ad0e39da366c35c4557051978e343238'
         '52ffa390555e0ffaddea6f2e43e009e4'
         'e43e287de7be4a4e2aaa149fb2972854'
         '69a6807ad80ee48380a87f3346fe1df3'
         '0bb2ff1cd7d8113641c90bb5a4b3030d'
         'f1fee4e4954d23902b18360fbddde18e'
         'f5d92be026218065065b2e53b6366551'
         '4aa6421c40c32bc90550ad9ba45bfdbb'
         'ab3b79900f3c61c75e230c8a2072d983'
         '5f03fbfea7bde192bfa1c2eb478f2943'
         'f8ede34ca774427b864b29ee1ae25a18'
         'efcd5cbdcd8b46ff5f8aa44916e9ccf7'
         '9b9026080775fc4d911c6ab1d0a65541'
         '419a6003f3960a86d53413f9ef71559a'
         '31e86876b58271bf0404ac3f28e3d662'
         '57976e9b0b37ad3835d7a3eedb53dc35'
         '2f7891026edc9526b6b11ff1c918e638'
         'f6eb51c7faa9e705d850d5900b3948fd')
