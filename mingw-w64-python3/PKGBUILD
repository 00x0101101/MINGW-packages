# Maintainer: Alexey Pavlov <alexpux@gmail.com>
# Contributor: Ray Donnelly <mingw.android@gmail.com>
# Contributor: Saul Ibarra Corretge <saghul@gmail.com>

_realname=python3
pkgname="${MINGW_PACKAGE_PREFIX}-${_realname}"
_pybasever=3.4
pkgver=${_pybasever}.2
pkgrel=3
pkgdesc="A high-level scripting language (mingw-w64)"
arch=('any')
license=('PSF')
url="http://www.python.org/"
depends=("${MINGW_PACKAGE_PREFIX}-gcc-libs" 
         "${MINGW_PACKAGE_PREFIX}-expat"
         "${MINGW_PACKAGE_PREFIX}-bzip2"
         "${MINGW_PACKAGE_PREFIX}-gdbm"
         "${MINGW_PACKAGE_PREFIX}-readline"
         "${MINGW_PACKAGE_PREFIX}-openssl"
         "${MINGW_PACKAGE_PREFIX}-libffi"
         "${MINGW_PACKAGE_PREFIX}-zlib"
         "${MINGW_PACKAGE_PREFIX}-xz"
         "${MINGW_PACKAGE_PREFIX}-ncurses"
         "${MINGW_PACKAGE_PREFIX}-tcl"
         "${MINGW_PACKAGE_PREFIX}-tk")
makedepends=("${MINGW_PACKAGE_PREFIX}-gcc" "${MINGW_PACKAGE_PREFIX}-pkg-config")
options=('!makeflags' 'staticlibs' 'strip' '!debug')
source=("http://www.python.org/ftp/python/${pkgver%rc?}/Python-${pkgver}.tar.xz"
        0000-make-_sysconfigdata.py-relocatable.patch
        0100-MINGW-BASE-use-NT-thread-model.patch
        0110-MINGW-translate-gcc-internal-defines-to-python-platf.patch
        0130-MINGW-configure-MACHDEP-and-platform-for-build.patch
        0140-MINGW-preset-configure-defaults.patch
        0150-MINGW-configure-largefile-support-for-windows-builds.patch
        0160-MINGW-add-wincrypt.h-in-Python-random.c.patch
        0170-MINGW-add-srcdir-PC-to-CPPFLAGS.patch
        0180-MINGW-init-system-calls.patch
        0190-MINGW-detect-REPARSE_DATA_BUFFER.patch
        0200-MINGW-build-in-windows-modules-winreg.patch
        0210-MINGW-determine-if-pwdmodule-should-be-used.patch
        0220-MINGW-default-sys.path-calculations-for-windows-plat.patch
        0230-MINGW-AC_LIBOBJ-replacement-of-fileblocks.patch
        0240-MINGW-use-main-to-start-execution.patch
        0250-MINGW-compiler-customize-mingw-cygwin-compilers.patch
        0260-MINGW-compiler-enable-new-dtags.patch
        0270-CYGWIN-issue13756-Python-make-fail-on-cygwin.patch
        0280-issue17219-add-current-dir-in-library-path-if-buildi.patch
        0290-issue6672-v2-Add-Mingw-recognition-to-pyport.h-to-al.patch
        0300-MINGW-configure-for-shared-build.patch
        0310-MINGW-dynamic-loading-support.patch
        0320-MINGW-implement-exec-prefix.patch
        0330-MINGW-ignore-main-program-for-frozen-scripts.patch
        0340-MINGW-setup-exclude-termios-module.patch
        0350-MINGW-setup-_multiprocessing-module.patch
        0360-MINGW-setup-select-module.patch
        0370-MINGW-setup-_ctypes-module-with-system-libffi.patch
        0380-MINGW-defect-winsock2-and-setup-_socket-module.patch
        0390-MINGW-exclude-unix-only-modules.patch
        0400-MINGW-setup-msvcrt-and-_winapi-modules.patch
        0410-MINGW-build-extensions-with-GCC.patch
        0420-MINGW-use-Mingw32CCompiler-as-default-compiler-for-m.patch
        0430-MINGW-find-import-library.patch
        0440-MINGW-setup-_ssl-module.patch
        0450-MINGW-export-_PyNode_SizeOf-as-PyAPI-for-parser-modu.patch
        0460-MINGW-generalization-of-posix-build-in-sysconfig.py.patch
        0462-MINGW-support-stdcall-without-underscore.patch
        0464-use-replace-instead-rename-to-avoid-failure-on-windo.patch
        0470-MINGW-avoid-circular-dependency-from-time-module-dur.patch
        0480-MINGW-generalization-of-posix-build-in-distutils-sys.patch
        0490-MINGW-customize-site.patch
        0500-add-python-config-sh.patch
        0510-cross-darwin-feature.patch
        0520-py3k-mingw-ntthreads-vs-pthreads.patch
        0530-mingw-system-libffi.patch
        0540-mingw-semicolon-DELIM.patch
        0550-mingw-regen-use-stddef_h.patch
        0560-mingw-use-posix-getpath.patch
        0565-mingw-add-ModuleFileName-dir-to-PATH.patch
        0570-mingw-add-BUILDIN_WIN32_MODULEs-time-msvcrt.patch
        0580-mingw32-test-REPARSE_DATA_BUFFER.patch
        0590-mingw-INSTALL_SHARED-LDLIBRARY-LIBPL.patch
        0600-msys-mingw-prefer-unix-sep-if-MSYSTEM.patch
        0610-msys-cygwin-semi-native-build-sysconfig.patch
        0620-mingw-sysconfig-like-posix.patch
        0630-mingw-_winapi_as_builtin_for_Popen_in_cygwinccompiler.patch
        0640-mingw-x86_64-size_t-format-specifier-pid_t.patch
        0650-cross-dont-add-multiarch-paths-if-cross-compiling.patch
        0660-mingw-use-backslashes-in-compileall-py.patch
        0670-msys-convert_path-fix-and-root-hack.patch
        0690-allow-static-tcltk.patch
        0700-CROSS-avoid-ncursesw-include-path-hack.patch
        0710-CROSS-properly-detect-WINDOW-_flags-for-different-nc.patch
        0720-mingw-pdcurses_ISPAD.patch
        0730-mingw-fix-ncurses-module.patch
        0740-grammar-fixes.patch
        0750-builddir-fixes.patch
        0760-msys-monkeypatch-os-system-via-sh-exe.patch
        0770-msys-replace-slashes-used-in-io-redirection.patch
        0790-mingw-add-_exec_prefix-for-tcltk-dlls.patch
        0800-mingw-install-layout-as-posix.patch
        0810-remove_path_max.default.patch
        0820-dont-link-with-gettext.patch
        0830-ctypes-python-dll.patch
        0840-gdbm-module-includes.patch
        0850-use-gnu_printf-in-format.patch
        0860-fix-_Py_CheckPython3-prototype.patch
        0870-mingw-fix-ssl-dont-use-enum_certificates.patch
        0890-mingw-build-optimized-ext.patch
        0900-cygwinccompiler-dont-strip-modules-if-pydebug.patch
        0910-fix-using-dllhandle-and-winver-mingw.patch
        1000-fix-building-posixmodule.patch
        1010-install-msilib.patch)

prepare() {
  cd "${srcdir}/Python-${pkgver}"

  # these are created by patches
  rm -f Misc/config_mingw Misc/cross_mingw32 Python/fileblocks.c

  plain "Apply Ray Donnelly's relocatability enabling patch"
  patch -Np1 -i "${srcdir}"/0000-make-_sysconfigdata.py-relocatable.patch

  plain "Apply Roumen Petrov's core patches (15)"
  patch -Np1 -i "${srcdir}"/0100-MINGW-BASE-use-NT-thread-model.patch
  patch -Np1 -i "${srcdir}"/0110-MINGW-translate-gcc-internal-defines-to-python-platf.patch
  patch -Np1 -i "${srcdir}"/0130-MINGW-configure-MACHDEP-and-platform-for-build.patch
  patch -Np1 -i "${srcdir}"/0140-MINGW-preset-configure-defaults.patch
  patch -Np1 -i "${srcdir}"/0150-MINGW-configure-largefile-support-for-windows-builds.patch
  patch -Np1 -i "${srcdir}"/0160-MINGW-add-wincrypt.h-in-Python-random.c.patch
  patch -Np1 -i "${srcdir}"/0170-MINGW-add-srcdir-PC-to-CPPFLAGS.patch
  patch -Np1 -i "${srcdir}"/0180-MINGW-init-system-calls.patch
  patch -Np1 -i "${srcdir}"/0190-MINGW-detect-REPARSE_DATA_BUFFER.patch
  patch -Np1 -i "${srcdir}"/0200-MINGW-build-in-windows-modules-winreg.patch
  patch -Np1 -i "${srcdir}"/0210-MINGW-determine-if-pwdmodule-should-be-used.patch
  patch -Np1 -i "${srcdir}"/0220-MINGW-default-sys.path-calculations-for-windows-plat.patch
  patch -Np1 -i "${srcdir}"/0230-MINGW-AC_LIBOBJ-replacement-of-fileblocks.patch
  patch -Np1 -i "${srcdir}"/0240-MINGW-use-main-to-start-execution.patch

  plain "Apply Roumen Petrov's compiler patch (2)"
  patch -Np1 -i "${srcdir}"/0250-MINGW-compiler-customize-mingw-cygwin-compilers.patch
  patch -Np1 -i "${srcdir}"/0260-MINGW-compiler-enable-new-dtags.patch

  plain "Apply Roumen Petrov's extensions patches (23)"
  patch -Np1 -i "${srcdir}"/0270-CYGWIN-issue13756-Python-make-fail-on-cygwin.patch
  patch -Np1 -i "${srcdir}"/0280-issue17219-add-current-dir-in-library-path-if-buildi.patch
  patch -Np1 -i "${srcdir}"/0290-issue6672-v2-Add-Mingw-recognition-to-pyport.h-to-al.patch
  patch -Np1 -i "${srcdir}"/0300-MINGW-configure-for-shared-build.patch
  patch -Np1 -i "${srcdir}"/0310-MINGW-dynamic-loading-support.patch
  patch -Np1 -i "${srcdir}"/0320-MINGW-implement-exec-prefix.patch
  patch -Np1 -i "${srcdir}"/0330-MINGW-ignore-main-program-for-frozen-scripts.patch
  patch -Np1 -i "${srcdir}"/0340-MINGW-setup-exclude-termios-module.patch
  patch -Np1 -i "${srcdir}"/0350-MINGW-setup-_multiprocessing-module.patch
  patch -Np1 -i "${srcdir}"/0360-MINGW-setup-select-module.patch
  patch -Np1 -i "${srcdir}"/0370-MINGW-setup-_ctypes-module-with-system-libffi.patch
  patch -Np1 -i "${srcdir}"/0380-MINGW-defect-winsock2-and-setup-_socket-module.patch
  patch -Np1 -i "${srcdir}"/0390-MINGW-exclude-unix-only-modules.patch
  patch -Np1 -i "${srcdir}"/0400-MINGW-setup-msvcrt-and-_winapi-modules.patch
  patch -Np1 -i "${srcdir}"/0410-MINGW-build-extensions-with-GCC.patch
  patch -Np1 -i "${srcdir}"/0420-MINGW-use-Mingw32CCompiler-as-default-compiler-for-m.patch
  patch -Np1 -i "${srcdir}"/0430-MINGW-find-import-library.patch
  patch -Np1 -i "${srcdir}"/0440-MINGW-setup-_ssl-module.patch
  patch -Np1 -i "${srcdir}"/0450-MINGW-export-_PyNode_SizeOf-as-PyAPI-for-parser-modu.patch
  patch -Np1 -i "${srcdir}"/0460-MINGW-generalization-of-posix-build-in-sysconfig.py.patch
  patch -Np1 -i "${srcdir}"/0462-MINGW-support-stdcall-without-underscore.patch
  patch -Np1 -i "${srcdir}"/0464-use-replace-instead-rename-to-avoid-failure-on-windo.patch
  patch -Np1 -i "${srcdir}"/0470-MINGW-avoid-circular-dependency-from-time-module-dur.patch
  patch -Np1 -i "${srcdir}"/0480-MINGW-generalization-of-posix-build-in-distutils-sys.patch
  patch -Np1 -i "${srcdir}"/0490-MINGW-customize-site.patch

  plain "Apply Ray Donnelly's general/cross patches (29)"
  patch -Np1 -i "${srcdir}"/0500-add-python-config-sh.patch
  patch -Np1 -i "${srcdir}"/0510-cross-darwin-feature.patch
  patch -Np1 -i "${srcdir}"/0520-py3k-mingw-ntthreads-vs-pthreads.patch
  patch -Np1 -i "${srcdir}"/0530-mingw-system-libffi.patch
  patch -Np1 -i "${srcdir}"/0540-mingw-semicolon-DELIM.patch
  patch -Np1 -i "${srcdir}"/0550-mingw-regen-use-stddef_h.patch
  patch -Np1 -i "${srcdir}"/0560-mingw-use-posix-getpath.patch
  patch -Np1 -i "${srcdir}"/0565-mingw-add-ModuleFileName-dir-to-PATH.patch
  patch -Np1 -i "${srcdir}"/0570-mingw-add-BUILDIN_WIN32_MODULEs-time-msvcrt.patch
  patch -Np1 -i "${srcdir}"/0580-mingw32-test-REPARSE_DATA_BUFFER.patch
  patch -Np1 -i "${srcdir}"/0590-mingw-INSTALL_SHARED-LDLIBRARY-LIBPL.patch
  patch -Np1 -i "${srcdir}"/0600-msys-mingw-prefer-unix-sep-if-MSYSTEM.patch
  patch -Np1 -i "${srcdir}"/0610-msys-cygwin-semi-native-build-sysconfig.patch
  patch -Np1 -i "${srcdir}"/0620-mingw-sysconfig-like-posix.patch
  patch -Np1 -i "${srcdir}"/0630-mingw-_winapi_as_builtin_for_Popen_in_cygwinccompiler.patch
  patch -Np1 -i "${srcdir}"/0640-mingw-x86_64-size_t-format-specifier-pid_t.patch
  patch -Np1 -i "${srcdir}"/0650-cross-dont-add-multiarch-paths-if-cross-compiling.patch
  patch -Np1 -i "${srcdir}"/0660-mingw-use-backslashes-in-compileall-py.patch
  patch -Np1 -i "${srcdir}"/0670-msys-convert_path-fix-and-root-hack.patch
  patch -Np1 -i "${srcdir}"/0690-allow-static-tcltk.patch
  patch -Np1 -i "${srcdir}"/0700-CROSS-avoid-ncursesw-include-path-hack.patch
  patch -Np1 -i "${srcdir}"/0710-CROSS-properly-detect-WINDOW-_flags-for-different-nc.patch
  patch -Np1 -i "${srcdir}"/0720-mingw-pdcurses_ISPAD.patch
  patch -Np1 -i "${srcdir}"/0730-mingw-fix-ncurses-module.patch
  patch -Np1 -i "${srcdir}"/0740-grammar-fixes.patch
  patch -Np1 -i "${srcdir}"/0750-builddir-fixes.patch
  patch -Np1 -i "${srcdir}"/0760-msys-monkeypatch-os-system-via-sh-exe.patch
  patch -Np1 -i "${srcdir}"/0770-msys-replace-slashes-used-in-io-redirection.patch
  patch -Np1 -i "${srcdir}"/0790-mingw-add-_exec_prefix-for-tcltk-dlls.patch
  patch -Np1 -i "${srcdir}"/0800-mingw-install-layout-as-posix.patch
  patch -Np1 -i "${srcdir}"/0810-remove_path_max.default.patch
  patch -Np1 -i "${srcdir}"/0820-dont-link-with-gettext.patch
  patch -Np1 -i "${srcdir}"/0830-ctypes-python-dll.patch
  patch -Np1 -i "${srcdir}"/0840-gdbm-module-includes.patch
  patch -Np1 -i "${srcdir}"/0850-use-gnu_printf-in-format.patch
  patch -Np1 -i "${srcdir}"/0860-fix-_Py_CheckPython3-prototype.patch
  patch -Np1 -i "${srcdir}"/0870-mingw-fix-ssl-dont-use-enum_certificates.patch
  patch -Np1 -i "${srcdir}"/0890-mingw-build-optimized-ext.patch
  patch -Np1 -i "${srcdir}"/0900-cygwinccompiler-dont-strip-modules-if-pydebug.patch
  patch -Np1 -i "${srcdir}"/0910-fix-using-dllhandle-and-winver-mingw.patch

  patch -Np1 -i "${srcdir}"/1000-fix-building-posixmodule.patch
  patch -Np1 -i "${srcdir}"/1010-install-msilib.patch

  autoreconf -vfi

  # Temporary workaround for FS#22322
  # See http://bugs.python.org/issue10835 for upstream report
  #sed -i "/progname =/s/python/python${_pybasever}/" Python/pythonrun.c

  touch Include/graminit.h
  touch Python/graminit.c
  touch Parser/Python.asdl
  touch Parser/asdl.py
  touch Parser/asdl_c.py
  touch Include/Python-ast.h
  touch Python/Python-ast.c
  echo \"\" > Parser/pgen.stamp
    
  # Ensure that we are using the system copy of various libraries (expat, zlib and libffi),
  # rather than copies shipped in the tarball
  rm -r Modules/expat
  rm -r Modules/zlib
  rm -r Modules/_ctypes/{darwin,libffi}*
}

check() {
  cd "${srcdir}/build-${CARCH}"
  make test
}

build() {
  pushd ${MINGW_PREFIX} > /dev/null
  export PREFIX_WIN=`pwd -W`
  popd > /dev/null

  CFLAGS+=" -fwrapv -D__USE_MINGW_ANSI_STDIO=1 "
  CXXFLAGS+=" -fwrapv -D__USE_MINGW_ANSI_STDIO=1"
  CPPFLAGS+=" -I${PREFIX_WIN}/include/ncursesw "

  declare -a _extra_config
  if check_option "strip" "y"; then
    LDFLAGS+=" -s "
  fi
  if check_option "debug" "n"; then
    CFLAGS+=" -DNDEBUG "
    CXXFLAGS+=" -DNDEBUG "
  else
    plain " -DDEBUG -DPy_DEBUG -D_DEBUG does not work unfortunately .."
    #    CFLAGS+=" -DDEBUG -DPy_DEBUG -D_DEBUG "
    #    CXXFLAGS+=" -DDEBUG -DPy_DEBUG -D_DEBUG "
    CFLAGS+=" -O0 -ggdb"
    CXXFLAGS+=" -O0 -ggdb"
    _extra_config+=("--with-pydebug")
  fi

  LIBFFI_INC=`${MINGW_PREFIX}/bin/pkg-config libffi --cflags-only-I | sed "s|\-I||g"`
  pushd ${LIBFFI_INC} > /dev/null
  export LIBFFI_INCLUDEDIR=`pwd -W`
  popd > /dev/null

  # Workaround for conftest error on 64-bit builds
  export ac_cv_working_tzset=no

  mkdir -p "${srcdir}/build-${CARCH}" && cd "${srcdir}/build-${CARCH}"
  MSYSTEM=MINGW ../Python-${pkgver}/configure \
    --prefix=${MINGW_PREFIX} \
    --host=${MINGW_CHOST} \
    --build=${MINGW_CHOST} \
    --enable-shared \
    --with-threads \
    --with-system-expat \
    --with-system-ffi \
    --without-ensurepip \
    "${_extra_config[@]}" \
    OPT=""
    #--with-dbmliborder='gdbm:ndbm'
  make
}

package() {
  cd "${srcdir}/build-${CARCH}"
  MSYSTEM=MINGW \
  MSYS2_ARG_CONV_EXCL="--prefix=;--install-scripts=;--install-platlib=" \
  make install DESTDIR="$pkgdir"
  if check_option "debug" "n"; then
    VERABI=${_pybasever}m
  else
    VERABI=${_pybasever}dm
  fi

  rm "${pkgdir}${MINGW_PREFIX}"/bin/2to3
  cp -f "${pkgdir}${MINGW_PREFIX}"/lib/python${_pybasever}/config-${VERABI}/libpython${VERABI}.dll.a "${pkgdir}${MINGW_PREFIX}"/lib/libpython${VERABI}.dll.a

  # Need for building boost python3 module
  cp -f "${pkgdir}${MINGW_PREFIX}"/lib/python${_pybasever}/config-${VERABI}/libpython${VERABI}.dll.a "${pkgdir}${MINGW_PREFIX}"/lib/libpython${_pybasever}.dll.a
  cp -f "${pkgdir}${MINGW_PREFIX}"/lib/python${_pybasever}/config-${VERABI}/libpython${VERABI}.dll.a "${pkgdir}${MINGW_PREFIX}"/lib/python${_pybasever}/config-${VERABI}/libpython${_pybasever}.dll.a

  # some useful "stuff"
  install -dm755 "${pkgdir}${MINGW_PREFIX}"/lib/python${_pybasever}/Tools/{i18n,scripts}
  install -m755 "${srcdir}/Python-${pkgver}"/Tools/i18n/{msgfmt,pygettext}.py "${pkgdir}${MINGW_PREFIX}"/lib/python${_pybasever}/Tools/i18n/
  install -m755 "${srcdir}/Python-${pkgver}"/Tools/scripts/{README,*py} "${pkgdir}${MINGW_PREFIX}"/lib/python${_pybasever}/Tools/scripts/

  # clean up #!s
  find "${pkgdir}${MINGW_PREFIX}"/lib/python${_pybasever}/ -name '*.py' | \
    xargs sed -i "s|#[ ]*![ ]*/usr/bin/env python$|#!/usr/bin/env python3|"

  # clean-up reference to build directory
  sed -i "s#${srcdir}/Python-${pkgver}:##" "${pkgdir}${MINGW_PREFIX}"/lib/python${_pybasever}/config-${VERABI}/Makefile

  for fscripts in 2to3-${_pybasever} idle3 idle${_pybasever} pydoc3 pydoc${_pybasever} pyvenv pyvenv-${_pybasever}; do
    echo sed -e "s|${MINGW_PREFIX}/bin/python${_pybasever}.exe|/usr/bin/env python${_pybasever}.exe|g" -i "${pkgdir}${MINGW_PREFIX}"/bin/$fscripts
    sed -e "s|${MINGW_PREFIX}/bin/python${_pybasever}.exe|/usr/bin/env python${_pybasever}.exe|g" -i "${pkgdir}${MINGW_PREFIX}"/bin/$fscripts
  done

  sed -i "s|#!${pkgdir}${MINGW_PREFIX}/bin/python${VERABI}.exe|#!/usr/bin/env python${_pybasever}.exe|" "${pkgdir}${MINGW_PREFIX}"/lib/python${_pybasever}/config-${VERABI}/python-config.py

  # fix permissons
  find ${pkgdir}${MINGW_PREFIX} -type f \( -name "*.dll" -o -name "*.exe" \) | xargs chmod 0755

  # Fix up two instances of MSYS2 paths in python-config.sh in-case the final consumer of the results are native executables.
  sed -e "s|${MINGW_PREFIX}|${PREFIX_WIN}|" \
    -i "${pkgdir}${MINGW_PREFIX}"/bin/python${VERABI}-config \
    -i "${pkgdir}${MINGW_PREFIX}"/bin/python${_pybasever}-config \
    -i "${pkgdir}${MINGW_PREFIX}"/bin/python3-config

  # replace paths in sysconfig
  sed -i "s|${pkgdir}${MINGW_PREFIX}|${MINGW_PREFIX}|g" \
    "${pkgdir}${MINGW_PREFIX}"/lib/python${_pybasever}/_sysconfigdata.py \
    "${pkgdir}${MINGW_PREFIX}"/lib/python${_pybasever}/smtpd.py

  # Create python executable with windows subsystem
  cp -f "${pkgdir}${MINGW_PREFIX}"/bin/python3.exe "${pkgdir}${MINGW_PREFIX}"/bin/python3w.exe
  ${MINGW_PREFIX}/bin/objcopy --subsystem windows "${pkgdir}${MINGW_PREFIX}"/bin/python3w.exe

  # Add a wrapper script to force -i when invoking python. Please don't move this into a patch as
  # hopefully one day we won't need this hack (when we replace mintty with a real console).
  mv "${pkgdir}"${MINGW_PREFIX}/bin/python3.exe "${pkgdir}"${MINGW_PREFIX}/bin/python3_exe
  _exename="python3"
  echo "#!/usr/bin/env bash" > "${pkgdir}${MINGW_PREFIX}/bin/${_exename}"
  echo '"$( dirname ${BASH_SOURCE[0]} )/'${_exename}'.exe" -i "$@"' >> "${pkgdir}${MINGW_PREFIX}/bin/${_exename}"
  mv "${pkgdir}"${MINGW_PREFIX}/bin/python3_exe "${pkgdir}"${MINGW_PREFIX}/bin/python3.exe
}

md5sums=('36fc7327c02c6f12fa24fc9ba78039e3'
         '52e49a9ebb9fdf9452c75a0f3cebbb5e'
         '96a79279c66b531eb40ec6a6136c66c5'
         'a59bd5e2c861247f17d73ed6866ecbd4'
         '7f9724f7de5f1d5ad7ea1d49c044d741'
         'e38dcee6406229c4656125358f141689'
         '7645edc185446cca516a52996298a702'
         'd56f2da8cc8e27a9c7f93235658da17d'
         '8e9003666f065d914b4756e803991bff'
         '7bbae0ff4ec064a64962e5ce7931ea59'
         '49aad4c2be8cd44f8abe8a6bfa51f5da'
         '777aa51f9054ef0c24477d1d92eb292c'
         '0990e9dc7d81da968f177851f5b053be'
         '797577bcc07f983d866f5609f53ba507'
         'e2922ca9eb219c29a815226337774b8d'
         '48cda55915b486a9118f04971fbddd00'
         'cb92acf6b2c4bad2aca7e671c46ea6cb'
         'beb2e688333516015d41f1d9a8310cfa'
         '26b031ee21da30c7404a81242302e470'
         '814e6f015e4cd59b15766a244286537a'
         '7d7cff8c5ced10f1b40ca34da7e43521'
         'bbe913c1afdd28148ca84e60a47c9cfe'
         '07a059c12ca8159465731976d14112a1'
         'e98fd8c0ad7d7f1b79c513b73bfb1b77'
         '1c175d333751604795bce8649d4470d0'
         'e6f74c9da794d5e38ac05d633179fa70'
         '593c543a067c36242297e02ce8c42c07'
         '9d96d71ddffd380ef752306bf9f7b461'
         'ec400bbc93838fc5017c1fb30165ddc6'
         '3c682a252de15457566dab89263e507c'
         'bed8959c0f2ec7ed616da4ca26f219d9'
         '81738360daf74b3786464e4e36f14a68'
         '81a4ab4121de0c9b0deb3396c7f2500e'
         'e88e896f3c1920a17bc66f5f132dff65'
         '32db440db5b269c94b1772c57d1e1961'
         '92cf4398ed0705b4cb569acfdb8831fb'
         '809cb90a296ca07b5f3a1e19e769d5e9'
         '699caf216e72c26bef7f6af9e7c9392f'
         'be55bbfed43a90b89001e9643e34ad59'
         '826422fb42905fab6b7c2662c38700bf'
         '0abdb6e5ff50c1652e31182f4cdc4511'
         '3b29536a2f6ae7fd42ad5ad0beb9e0f0'
         '0fce75fef75109e68d93eb3c25aec4fd'
         '0cda56e3d0be39f6a9a0ee8e8282b582'
         'aed05b678f243fda1832f3b457612061'
         'd534533568067bff2ca133640d61595c'
         'b86157391856a489dc35968af764d665'
         '26f1135495d1c26712c6255c8dc2b0bd'
         '47cb61167b4361095e44e80104ec8b65'
         '344a2743ae7b06c7fa22a6cc92d8c1b0'
         '65df63497a99a3d1b12ee85221ec2b13'
         '8fca6752cf86545e57cdf661f9576864'
         '411771b2ce1d43dfa55494f39b98608b'
         '9821da4c321ae746d6061e7f119c31fe'
         '55e8f2ca82067fd3a174c9ed043a14b5'
         'f19ed444c4b0a54637a2350a9ba7370c'
         'd51bab380b316e4807d2588804fc6784'
         '106c8192ea63e5eb4948c8604ed37879'
         'b4900d08fc6c658acd39d87a11213254'
         '804c634b6d50eb40bd9fb99330532be0'
         '5cee883fcc7d7e372aefba4ee55d1f84'
         '60f3ec2aa6de4181349068fca19d3012'
         'fdcf4289d9a68b33a9827f006be4f44a'
         '5d782fdc1c3e590ba13393faaedd41f0'
         '5e324e3e20b3beefbc0ed915a7f7be6e'
         '73d7c06ad33ef6f5bf081e7658a1b354'
         'c8ad8bdbbb799550f787cec254b4fef2'
         'db059aa92df73724da312f1a832e9ae3'
         '0337970788988d9aaeda6356e70ac8bc'
         '6f3cdefada40ac4180c144da5c1389fe'
         '754301a8a031fc47d3a5c7fc8a3b2f2d'
         '33dc45b2d23ce207e47e8241145804db'
         'e5c1d8838d133a2ed14968ce94d2e461'
         '90afdc2ea47b4ed6d4728f6ccd1a2ab1'
         '1c5c3cc1fe2e203e31c2209d30860a18'
         '279bcaf7a089499115c970734aed9b6f'
         'a1852b230488aea0a0b7aebed87ef41c'
         '9645674f465330cc4c63289c8feb3191'
         '03366228159d29148bbc9fab09e01826'
         '03728f73b87478cef9b57360cbca6f16'
         '09c279e5cab5154f50a4b0afe897095d'
         '3947c0757931347a86afa3ce0b540dc5'
         '667b2a720f8c11fc96d16a16c2dcf22f'
         'f98686ecd238d785189f0c3c93549a67'
         '5138fb77538f149727e74e4b620bcecb')
