From 187473cb1f86e76615cee40c8269051bc05f3c5b Mon Sep 17 00:00:00 2001
From: Ray Donnelly <mingw.android@gmail.com>
Date: Thu, 27 Feb 2014 17:07:39 +0000
Subject: [PATCH 3/5] Win32: Use WTSEnumerateProcesses() instead of ps

Use Q_PIDs instead of ints for process ids too.

Work in progress.
---
 octopi.pro                           |   2 +
 src/QtSolutions/qtlockedfile_win.cpp |   2 -
 src/utils.cpp                        | 105 +++++++++++++++++++++++++++++++++--
 src/utils.h                          |   6 +-
 4 files changed, 104 insertions(+), 11 deletions(-)

diff --git a/octopi.pro b/octopi.pro
index d9865f6..a87f550 100644
--- a/octopi.pro
+++ b/octopi.pro
@@ -134,6 +134,8 @@ TRANSLATIONS += resources/translations/octopi_pt_BR.ts \
     resources/translations/octopi_ja.ts \
     resources/translations/octopi_eu.ts
 
+win32: LIBS += -lwtsapi32
+
 greaterThan(QT_MAJOR_VERSION, 4){
     TRANSLATIONS += resources/translations/octopi_ast.ts
 }
diff --git a/src/QtSolutions/qtlockedfile_win.cpp b/src/QtSolutions/qtlockedfile_win.cpp
index 6aa3921..c28aae8 100755
--- a/src/QtSolutions/qtlockedfile_win.cpp
+++ b/src/QtSolutions/qtlockedfile_win.cpp
@@ -45,9 +45,7 @@
 // Maximum number of concurrent read locks. Must not be greater than MAXIMUM_WAIT_OBJECTS
 #define MAX_READERS MAXIMUM_WAIT_OBJECTS
 
-#if QT_VERSION >= 0x050000
 #define QT_WA(unicode, ansi) unicode
-#endif
 
 Qt::HANDLE QtLockedFile::getMutexHandle(int idx, bool doCreate)
 {
diff --git a/src/utils.cpp b/src/utils.cpp
index c1edca6..e570068 100644
--- a/src/utils.cpp
+++ b/src/utils.cpp
@@ -35,6 +35,12 @@
 #include <QDomDocument>
 #include <QProcess>
 #include <QTimer>
+#include <QDebug>
+
+#if defined(Q_OS_WIN)
+#include <windows.h>
+#include <wtsapi32.h>
+#endif
 
 /*
  * The needed constructor
@@ -77,6 +83,92 @@ void utils::ProcessWrapper::onProcessStarted()
   emit startedTerminal();
 }
 
+QStringList Ps_To_Q_PIDs(QString ps_args)
+{
+  QStringList list;
+#if defined(Q_OS_WIN)
+  QString ps_name;
+  QStringList in_pids;
+  if (ps_args.startsWith(QLatin1String("ps -o pid -C")))
+  {
+    ps_name = ps_args.remove(QLatin1String("ps -o pid -C")).trimmed();
+  }
+  else if (ps_args.startsWith(QLatin1String("ps -O cmd --ppid")))
+  {
+    in_pids.append(ps_args.remove("ps -O cmd --ppid").trimmed());
+  }
+  else if (ps_args.startsWith(QLatin1String("ps -p")))
+  {
+    QString temp = ps_args.remove("ps -p").trimmed();
+    QTextStream pid_args(&temp);
+    while (!pid_args.atEnd())
+    {
+      QString a_pid;
+      pid_args >> a_pid;
+      in_pids.append(a_pid);
+    }
+  }
+  WTS_PROCESS_INFO* pProcessInfo = 0;
+  DWORD Count;
+  if(WTSEnumerateProcesses(WTS_CURRENT_SERVER_HANDLE, 0, 1, &pProcessInfo, &Count))
+  {
+    for(DWORD i = 0; i < Count; i++)
+    {
+      qDebug() << pProcessInfo[i].pProcessName << "\tPID="
+               << pProcessInfo[i].ProcessId << "\tSess="
+               << pProcessInfo[i].SessionId;
+      QString process_name = QString::fromWCharArray(pProcessInfo[i].pProcessName);
+      if (!ps_name.isEmpty())
+      {
+        list.append("PID");
+        if (ps_name == process_name)
+        {
+           list.append(QString::number(pProcessInfo[i].ProcessId));
+           return list;
+        }
+      }
+    }
+//    BOOL WINAPI EnumProcesses(
+//      _Out_  DWORD *pProcessIds,
+//      _In_   DWORD cb,
+//      _Out_  DWORD *pBytesReturned
+//    );
+  }
+#else
+  QProcess proc;
+  proc.start(ps_args);
+  proc.waitForFinished(-1);
+  QString out = proc.readAll();
+  proc.close();
+  QStringList list = out.split("\n", QString::SkipEmptyParts);
+#endif
+  return list;
+}
+
+/*
+ * Returns the _PROCESS_INFORMATION* on Windows, does nothing on
+ * others.
+ */
+Q_PID int_to_Q_PID(int in_pid)
+{
+#if defined(Q_OS_WIN)
+  Q_UNUSED(in_pid);
+  return 0;
+#else
+  return in_pid
+#endif
+}
+
+int Q_PID_to_int(Q_PID in_pid)
+{
+#if defined(Q_OS_WIN)
+  Q_UNUSED(in_pid);
+  return 1;
+#else
+  return in_pid;
+#endif
+}
+
 /*
  * We need this to search for the SH process pid (which spaws AUR tool)
  */
@@ -109,7 +201,8 @@ void utils::ProcessWrapper::onSingleShot()
   {
     int candidatePid = list.at(c).trimmed().toInt();
 
-    if (candidatePid < m_pidTerminal) continue;
+    // This if appears to be being used to determine if candidatePid is a child of m_pidTerminal?!
+    if (candidatePid < Q_PID_to_int(m_pidTerminal)) continue;
 
     QString cmd = QString("ps -O cmd --ppid %1").arg(candidatePid);
     proc.start(cmd);
@@ -131,8 +224,8 @@ void utils::ProcessWrapper::onSingleShot()
 
           if (candidatePid < candidatePid2)
           {
-            m_pidSH = candidatePid;
-            m_pidAUR = candidatePid2;
+            m_pidSH = int_to_Q_PID(candidatePid);
+            m_pidAUR = int_to_Q_PID(candidatePid2);
             m_timer->start();
 
             return;
@@ -155,8 +248,8 @@ void utils::ProcessWrapper::onSingleShot()
 
           if (candidatePid < candidatePid2)
           {
-            m_pidSH = candidatePid;
-            m_pidAUR = candidatePid2;
+            m_pidSH = int_to_Q_PID(candidatePid);
+            m_pidAUR = int_to_Q_PID(candidatePid2);
             m_timer->start();
 
             return;
@@ -175,7 +268,7 @@ void utils::ProcessWrapper::onSingleShot()
 void utils::ProcessWrapper::onTimer()
 {
   QProcess proc;
-  QString cmd = QString("ps -p %1 %2").arg(m_pidSH).arg(m_pidAUR);
+  QString cmd = QString("ps -p %1 %2").arg(Q_PID_to_int(m_pidSH)).arg(Q_PID_to_int(m_pidAUR));
 
   //std::cout << "PIDS: " << cmd.toLatin1().data() << "\n" << std::endl;
 
diff --git a/src/utils.h b/src/utils.h
index 54a8edc..a1f79a9 100644
--- a/src/utils.h
+++ b/src/utils.h
@@ -34,9 +34,9 @@ class ProcessWrapper : public QObject
   Q_OBJECT
 
 private:
-  int m_pidTerminal;
-  int m_pidSH;
-  int m_pidAUR;
+  Q_PID m_pidTerminal;
+  Q_PID m_pidSH;
+  Q_PID m_pidAUR;
   QProcess *m_process;
   QTimer *m_timer;
   QTimer *m_timerSingleShot;
-- 
2.1.0

