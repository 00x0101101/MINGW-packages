From f55e9c79fc71f5088bcb0a4c0b376acb4d0158c7 Mon Sep 17 00:00:00 2001
From: Ray Donnelly <mingw.android@gmail.com>
Date: Sat, 27 Sep 2014 15:23:27 +0100
Subject: [PATCH 02/10] Use a shared QProcessEnvironment

This reduces a lot of repetition. Environment variables
LANG, LC_MESSAGES, LC_ALL are set to "C" for all cases.
---
 octopi.pro          |  2 ++
 src/unixcommand.cpp | 88 +++++++++++------------------------------------------
 src/unixcommand.h   | 15 +++++++++
 3 files changed, 35 insertions(+), 70 deletions(-)

diff --git a/octopi.pro b/octopi.pro
index cac9348..0531b6d 100644
--- a/octopi.pro
+++ b/octopi.pro
@@ -120,6 +120,8 @@ TRANSLATIONS += resources/translations/octopi_pt_BR.ts \
     resources/translations/octopi_ja.ts \
     resources/translations/octopi_eu.ts
 
+win32: LIBS += -lwtsapi32
+
 greaterThan(QT_MAJOR_VERSION, 4){
     TRANSLATIONS += resources/translations/octopi_ast.ts
 }
diff --git a/src/unixcommand.cpp b/src/unixcommand.cpp
index a32b775..6ab57b9 100644
--- a/src/unixcommand.cpp
+++ b/src/unixcommand.cpp
@@ -36,6 +36,7 @@
  */
 
 QFile *UnixCommand::m_temporaryFile = 0;
+QProcessEnvironment *UnixCommand::m_env = 0;
 
 /*
  * Executes given command and returns the StandardError Output.
@@ -43,12 +44,7 @@ QFile *UnixCommand::m_temporaryFile = 0;
 QString UnixCommand::runCommand(const QString& commandToRun)
 {
   QProcess proc;
-  QProcessEnvironment env = QProcessEnvironment::systemEnvironment();
-  env.remove("LANG");
-  env.remove("LC_MESSAGES");
-  env.insert("LANG", "C");
-  env.insert("LC_MESSAGES", "C");
-  proc.setProcessEnvironment(env);
+  proc.setProcessEnvironment(getEnv());
   proc.start(commandToRun);
   proc.waitForStarted();
   proc.waitForFinished(-1);
@@ -63,10 +59,7 @@ QString UnixCommand::runCommand(const QString& commandToRun)
  */
 QString UnixCommand::runCurlCommand(const QString& commandToRun){
   QProcess proc;
-  QProcessEnvironment env = QProcessEnvironment::systemEnvironment();
-  env.insert("LANG", "C");
-  env.insert("LC_MESSAGES", "C");
-  proc.setProcessEnvironment(env);
+  proc.setProcessEnvironment(getEnv());
   proc.start(commandToRun);
   proc.waitForStarted();
   proc.waitForFinished(-1);
@@ -87,10 +80,7 @@ QString UnixCommand::runCurlCommand(const QString& commandToRun){
  */
 QString UnixCommand::discoverBinaryPath(const QString& binary){
   QProcess proc;
-  QProcessEnvironment env = QProcessEnvironment::systemEnvironment();
-  env.insert("LANG", "C");
-  env.insert("LC_MESSAGES", "C");
-  proc.setProcessEnvironment(env);
+  proc.setProcessEnvironment(getEnv());
 
   proc.start("/bin/sh -c \"which " + binary + "\"");
   proc.waitForFinished();
@@ -117,10 +107,7 @@ QString UnixCommand::discoverBinaryPath(const QString& binary){
 bool UnixCommand::cleanPacmanCache()
 {
   QProcess pacman;
-  QProcessEnvironment env = QProcessEnvironment::systemEnvironment();
-  env.insert("LANG", "C");
-  env.insert("LC_MESSAGES", "C");
-  pacman.setProcessEnvironment(env);
+  pacman.setProcessEnvironment(getEnv());
   QString commandStr = "\"yes | pacman -Scc\"";
 
   QString command = WMHelper::getSUCommand() + " " + commandStr;
@@ -138,11 +125,7 @@ QByteArray UnixCommand::performQuery(const QStringList args)
   QByteArray result("");
   QProcess pacman;
 
-  QProcessEnvironment env = QProcessEnvironment::systemEnvironment();
-  env.insert("LANG", "C");
-  env.insert("LC_MESSAGES", "C");
-  env.insert("LC_ALL", "C");
-  pacman.setProcessEnvironment(env);
+  pacman.setProcessEnvironment(getEnv());
 
   pacman.start("pacman", args);
   pacman.waitForFinished();
@@ -161,11 +144,7 @@ QByteArray UnixCommand::performQuery(const QString &args)
   QByteArray result("");
   QProcess pacman;
 
-  QProcessEnvironment env = QProcessEnvironment::systemEnvironment();
-  env.insert("LANG", "C");
-  env.insert("LC_MESSAGES", "C");
-  env.insert("LC_ALL", "C");
-  pacman.setProcessEnvironment(env);
+  pacman.setProcessEnvironment(getEnv());
 
   pacman.start("pacman " + args);
   pacman.waitForFinished();
@@ -182,10 +161,7 @@ QByteArray UnixCommand::performAURCommand(const QString &args)
   QByteArray result("");
   QProcess aur;
 
-  QProcessEnvironment env = QProcessEnvironment::systemEnvironment();
-  env.insert("LANG", "C");
-  env.insert("LC_MESSAGES", "C");
-  aur.setProcessEnvironment(env);
+  aur.setProcessEnvironment(getEnv());
 
   aur.start(StrConstants::getForeignRepositoryToolName() + " " + args);
   aur.waitForFinished();
@@ -202,11 +178,8 @@ QByteArray UnixCommand::getAURPackageList(const QString &searchString)
 {
   QByteArray result("");
   QProcess aur;
-  QProcessEnvironment env = QProcessEnvironment::systemEnvironment();
-  env.insert("LANG", "C");
-  env.insert("LC_MESSAGES", "C");
 
-  aur.setProcessEnvironment(env);
+  aur.setProcessEnvironment(getEnv());
 
   if (UnixCommand::getLinuxDistro() == ectn_KAOS)
     aur.start(StrConstants::getForeignRepositoryToolName() + " -s " + searchString);
@@ -341,8 +314,7 @@ bool UnixCommand::isPkgfileInstalled()
 {
   QProcess pkgfile;
 
-  QProcessEnvironment env = QProcessEnvironment::systemEnvironment();
-  pkgfile.setProcessEnvironment(env);
+  pkgfile.setProcessEnvironment(getEnv());
 
   pkgfile.start("pkgfile -V");
   pkgfile.waitForFinished();
@@ -359,10 +331,7 @@ QByteArray UnixCommand::getPackageContentsUsingPkgfile(const QString &pkgName)
 {
   QByteArray result("");
   QProcess pkgfile;
-  QProcessEnvironment env = QProcessEnvironment::systemEnvironment();
-  env.insert("LANG", "C");
-  env.insert("LC_MESSAGES", "C");
-  pkgfile.setProcessEnvironment(env);
+  pkgfile.setProcessEnvironment(getEnv());
 
   pkgfile.start("pkgfile -l " + pkgName);
   pkgfile.waitForFinished();
@@ -397,10 +366,7 @@ QString UnixCommand::getPackageByFilePath(const QString &filePath)
 QStringList UnixCommand::getFilePathSuggestions(const QString &file)
 {
   QProcess slocate;
-  QProcessEnvironment env = QProcessEnvironment::systemEnvironment();
-  env.insert("LANG", "C");
-  env.insert("LC_MESSAGES", "C");
-  slocate.setProcessEnvironment(env);
+  slocate.setProcessEnvironment(getEnv());
   slocate.start("slocate -l 8 " + file);
   slocate.waitForFinished();
 
@@ -467,10 +433,7 @@ QString UnixCommand::getSystemArchitecture()
 {
   QStringList slParam;
   QProcess proc;
-  QProcessEnvironment env = QProcessEnvironment::systemEnvironment();
-  env.insert("LANG", "C");
-  env.insert("LC_MESSAGES", "C");
-  proc.setProcessEnvironment(env);
+  proc.setProcessEnvironment(getEnv());
 
   slParam << "-m";
   proc.start("uname", slParam);
@@ -524,10 +487,7 @@ bool UnixCommand::hasInternetConnection()
 bool UnixCommand::doInternetPingTest()
 {
   QProcess ping;
-  QProcessEnvironment env = QProcessEnvironment::systemEnvironment();
-  env.insert("LANG", "C");
-  env.insert("LC_MESSAGES", "C");
-  ping.setProcessEnvironment(env);
+  ping.setProcessEnvironment(getEnv());
 
   if (UnixCommand::getLinuxDistro() == ectn_MOOOSLINUX)
     ping.start("torsocks ping -c 1 -W 3 www.google.com");
@@ -549,10 +509,7 @@ bool UnixCommand::isKtsussVersionOK()
 {
   QProcess proc;
 
-  QProcessEnvironment env = QProcessEnvironment::systemEnvironment();
-  env.insert("LANG", "C");
-  env.insert("LC_MESSAGES", "C");
-  proc.setProcessEnvironment(env);
+  proc.setProcessEnvironment(getEnv());
 
   QStringList slParam("-v");
   proc.start("ktsuss", slParam );
@@ -621,10 +578,7 @@ void UnixCommand::removeTemporaryFiles()
 void UnixCommand::execCommand(const QString &pCommand)
 {
   QProcess p;
-  QProcessEnvironment env = QProcessEnvironment::systemEnvironment();
-  env.insert("LANG", "C");
-  env.insert("LC_MESSAGES", "C");
-  p.setProcessEnvironment(env);
+  p.setProcessEnvironment(getEnv());
 
   p.start(WMHelper::getSUCommand() + "\"" + pCommand + "\"");
   p.waitForFinished(-1);
@@ -637,10 +591,7 @@ void UnixCommand::execCommand(const QString &pCommand)
 bool UnixCommand::isTextFile(const QString& fileName)
 {
   QProcess *p = new QProcess();
-  QProcessEnvironment env = QProcessEnvironment::systemEnvironment();
-  env.insert("LANG", "C");
-  env.insert("LC_MESSAGES", "C");
-  p->setProcessEnvironment(env);
+  p->setProcessEnvironment(getEnv());
 
   QStringList s(fileName);
   p->start( "file", s );
@@ -760,10 +711,7 @@ UnixCommand::UnixCommand(QObject *parent): QObject()
   m_process = new QProcess(parent);
   m_terminal = new Terminal(parent, SettingsManager::getTerminal());
 
-  QProcessEnvironment env = QProcessEnvironment::systemEnvironment();
-  env.insert("LANG", "C");
-  env.insert("LC_MESSAGES", "C");
-  m_process->setProcessEnvironment(env);
+  m_process->setProcessEnvironment(getEnv());
 
   QObject::connect(m_process, SIGNAL( started() ), this,
                    SIGNAL( started() ));
diff --git a/src/unixcommand.h b/src/unixcommand.h
index 3105307..89b0f31 100644
--- a/src/unixcommand.h
+++ b/src/unixcommand.h
@@ -54,6 +54,7 @@ private:
   Terminal *m_terminal;
   QProcess *m_process;
   static QFile *m_temporaryFile;
+  static QProcessEnvironment *m_env;
 
 public:
   UnixCommand(QObject *parent);
@@ -114,6 +115,20 @@ public:
     return (uid == 0); //Returns TRUE if root is running Octopi
   }
 
+  static QProcessEnvironment const& getEnv(){
+    if (!m_env)
+    {
+      m_env = new QProcessEnvironment(QProcessEnvironment::systemEnvironment());
+      m_env->remove("LANG");
+      m_env->remove("LC_MESSAGES");
+      m_env->remove("LC_ALL");
+      m_env->insert("LANG", "C");
+      m_env->insert("LC_MESSAGES", "C");
+      m_env->insert("LC_ALL", "C");
+    }
+    return *m_env;
+  }
+
   static QFile* getTemporaryFile(){
     QTime time = QTime::currentTime();
     qsrand(time.minute() + time.second() + time.msec());
-- 
2.1.1

