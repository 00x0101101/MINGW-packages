diff -c -r pdfium.orig/core/fxcrt/fx_basic_util.cpp pdfium/core/fxcrt/fx_basic_util.cpp
*** pdfium.orig/core/fxcrt/fx_basic_util.cpp	2016-03-15 23:31:36.000000000 -0300
--- pdfium/core/fxcrt/fx_basic_util.cpp	2016-03-15 23:35:34.365261700 -0300
***************
*** 170,176 ****
    return bNegative ? -value : value;
  }
  
! #if _FXM_PLATFORM_ == _FXM_PLATFORM_WINDOWS_ && _MSC_VER < 1900
  void FXSYS_snprintf(char* str,
                      size_t size,
                      _Printf_format_string_ const char* fmt,
--- 170,176 ----
    return bNegative ? -value : value;
  }
  
! #if _FXM_PLATFORM_ == _FXM_PLATFORM_WINDOWS_ && _MSC_VER < 1900 && !defined(__MINGW32__)
  void FXSYS_snprintf(char* str,
                      size_t size,
                      _Printf_format_string_ const char* fmt,
***************
*** 186,192 ****
      str[size - 1] = 0;
    }
  }
! #endif  // _FXM_PLATFORM_WINDOWS_ && _MSC_VER < 1900
  
  #if _FXM_PLATFORM_ == _FXM_PLATFORM_WINDOWS_
  class CFindFileData {
--- 186,192 ----
      str[size - 1] = 0;
    }
  }
! #endif  // _FXM_PLATFORM_WINDOWS_ && _MSC_VER < 1900 && !defined(__MINGW32__)
  
  #if _FXM_PLATFORM_ == _FXM_PLATFORM_WINDOWS_
  class CFindFileData {
diff -c -r pdfium.orig/core/fxge/win32/fx_win32_dwrite.cpp pdfium/core/fxge/win32/fx_win32_dwrite.cpp
*** pdfium.orig/core/fxge/win32/fx_win32_dwrite.cpp	2016-03-15 23:31:37.000000000 -0300
--- pdfium/core/fxge/win32/fx_win32_dwrite.cpp	2016-03-15 23:35:34.365261700 -0300
***************
*** 12,17 ****
--- 12,23 ----
  #include "core/fxge/win32/dwrite_int.h"
  #include "core/include/fxge/fx_ge_win32.h"
  
+ #ifdef __MINGW32__
+ #define __in
+ #define __out
+ #define __in_opt
+ #endif
+ 
  typedef HRESULT(__stdcall* FuncType_DWriteCreateFactory)(
      __in DWRITE_FACTORY_TYPE,
      __in REFIID,
diff -c -r pdfium.orig/core/fxge/win32/fx_win32_gdipext.cpp pdfium/core/fxge/win32/fx_win32_gdipext.cpp
*** pdfium.orig/core/fxge/win32/fx_win32_gdipext.cpp	2016-03-15 23:31:37.000000000 -0300
--- pdfium/core/fxge/win32/fx_win32_gdipext.cpp	2016-03-15 23:35:34.365261700 -0300
***************
*** 691,697 ****
      return;
    }
    for (int i = 0; i < sizeof g_GdipFuncNames / sizeof(LPCSTR); i++) {
!     m_Functions[i] = GetProcAddress(m_hModule, g_GdipFuncNames[i]);
      if (!m_Functions[i]) {
        m_hModule = NULL;
        return;
--- 691,697 ----
      return;
    }
    for (int i = 0; i < sizeof g_GdipFuncNames / sizeof(LPCSTR); i++) {
!     m_Functions[i] = (void *)GetProcAddress(m_hModule, g_GdipFuncNames[i]);
      if (!m_Functions[i]) {
        m_hModule = NULL;
        return;
***************
*** 706,714 ****
      return;
    }
    m_pGdiAddFontMemResourceEx =
!       GetProcAddress(m_GdiModule, "AddFontMemResourceEx");
    m_pGdiRemoveFontMemResourseEx =
!       GetProcAddress(m_GdiModule, "RemoveFontMemResourceEx");
  }
  CGdiplusExt::~CGdiplusExt() {}
  LPVOID CGdiplusExt::LoadMemFont(LPBYTE pData, FX_DWORD size) {
--- 706,714 ----
      return;
    }
    m_pGdiAddFontMemResourceEx =
!       (void *)GetProcAddress(m_GdiModule, "AddFontMemResourceEx");
    m_pGdiRemoveFontMemResourseEx =
!       (void *)GetProcAddress(m_GdiModule, "RemoveFontMemResourceEx");
  }
  CGdiplusExt::~CGdiplusExt() {}
  LPVOID CGdiplusExt::LoadMemFont(LPBYTE pData, FX_DWORD size) {
diff -c -r pdfium.orig/core/include/fxcrt/fx_system.h pdfium/core/include/fxcrt/fx_system.h
*** pdfium.orig/core/include/fxcrt/fx_system.h	2016-03-15 23:31:37.000000000 -0300
--- pdfium/core/include/fxcrt/fx_system.h	2016-03-15 23:35:34.380887400 -0300
***************
*** 54,60 ****
--- 54,62 ----
  #endif
  
  #if _FXM_PLATFORM_ == _FXM_PLATFORM_WINDOWS_
+ #ifndef __MINGW32__
  #define _CRT_SECURE_NO_WARNINGS
+ #endif
  #include <windows.h>
  #include <sal.h>
  #endif
***************
*** 114,120 ****
  // NOTE: prevent use of the return value from snprintf() since some platforms
  // have different return values (e.g. windows _vsnprintf()), and provide
  // versions that always NUL-terminate.
! #if _FXM_PLATFORM_ == _FXM_PLATFORM_WINDOWS_ && _MSC_VER < 1900
  void FXSYS_snprintf(char* str,
                      size_t size,
                      _Printf_format_string_ const char* fmt,
--- 116,122 ----
  // NOTE: prevent use of the return value from snprintf() since some platforms
  // have different return values (e.g. windows _vsnprintf()), and provide
  // versions that always NUL-terminate.
! #if _FXM_PLATFORM_ == _FXM_PLATFORM_WINDOWS_ && _MSC_VER < 1900 && !defined(__MINGW32__)
  void FXSYS_snprintf(char* str,
                      size_t size,
                      _Printf_format_string_ const char* fmt,
diff -c -r pdfium.orig/fpdfsdk/fpdftext_embeddertest.cpp pdfium/fpdfsdk/fpdftext_embeddertest.cpp
*** pdfium.orig/fpdfsdk/fpdftext_embeddertest.cpp	2016-03-15 23:31:37.000000000 -0300
--- pdfium/fpdfsdk/fpdftext_embeddertest.cpp	2016-03-15 23:36:04.190063200 -0300
***************
*** 86,92 ****
    top = 0.0;
    FPDFText_GetRect(textpage, 1, &left, &top, &right, &bottom);
    EXPECT_NEAR(20.847, left, 0.001);
!   EXPECT_NEAR(135.167, right, 0.001);
    EXPECT_NEAR(96.655, bottom, 0.001);
    EXPECT_NEAR(116.000, top, 0.001);
  
--- 86,92 ----
    top = 0.0;
    FPDFText_GetRect(textpage, 1, &left, &top, &right, &bottom);
    EXPECT_NEAR(20.847, left, 0.001);
!   EXPECT_NEAR(135.167, right, 0.0011);
    EXPECT_NEAR(96.655, bottom, 0.001);
    EXPECT_NEAR(116.000, top, 0.001);
  
diff -c -r pdfium.orig/pdfium.gyp pdfium/pdfium.gyp
*** pdfium.orig/pdfium.gyp	2016-03-15 23:31:37.000000000 -0300
--- pdfium/pdfium.gyp	2016-03-15 23:35:34.380887400 -0300
***************
*** 109,115 ****
    },
    'targets': [
      {
!       'target_name': 'pdfium',
        'type': 'static_library',
        'dependencies': [
          'third_party/third_party.gyp:bigint',
--- 109,115 ----
    },
    'targets': [
      {
!       'target_name': 'pdfium_static',
        'type': 'static_library',
        'dependencies': [
          'third_party/third_party.gyp:bigint',
***************
*** 209,214 ****
--- 209,314 ----
        },
      },
      {
+       'target_name': 'pdfium',
+       'type': 'shared_library',
+       'dependencies': [
+         'third_party/third_party.gyp:bigint',
+         'third_party/third_party.gyp:pdfium_base',
+         'fdrm',
+         'fpdfdoc',
+         'fpdfapi',
+         'fpdftext',
+         'formfiller',
+         'fxcodec',
+         'fxcrt',
+         'fxedit',
+         'fxge',
+         'javascript',
+         'pdfwindow',
+       ],
+       'sources': [
+         'fpdfsdk/include/fsdk_actionhandler.h',
+         'fpdfsdk/include/fsdk_annothandler.h',
+         'fpdfsdk/include/fsdk_baseannot.h',
+         'fpdfsdk/include/fsdk_baseform.h',
+         'fpdfsdk/fpdfdoc.cpp',
+         'fpdfsdk/fpdfeditimg.cpp',
+         'fpdfsdk/fpdfeditpage.cpp',
+         'fpdfsdk/fpdfformfill.cpp',
+         'fpdfsdk/fpdfppo.cpp',
+         'fpdfsdk/fpdfsave.cpp',
+         'fpdfsdk/fpdftext.cpp',
+         'fpdfsdk/fpdfview.cpp',
+         'fpdfsdk/fpdf_dataavail.cpp',
+         'fpdfsdk/fpdf_ext.cpp',
+         'fpdfsdk/fpdf_flatten.cpp',
+         'fpdfsdk/fpdf_progressive.cpp',
+         'fpdfsdk/fpdf_searchex.cpp',
+         'fpdfsdk/fpdf_sysfontinfo.cpp',
+         'fpdfsdk/fpdf_transformpage.cpp',
+         'fpdfsdk/fsdk_actionhandler.cpp',
+         'fpdfsdk/fsdk_annothandler.cpp',
+         'fpdfsdk/fsdk_baseannot.cpp',
+         'fpdfsdk/fsdk_baseform.cpp',
+         'fpdfsdk/fsdk_mgr.cpp',
+         'fpdfsdk/fsdk_rendercontext.cpp',
+         'public/fpdf_dataavail.h',
+         'public/fpdf_doc.h',
+         'public/fpdf_edit.h',
+         'public/fpdf_ext.h',
+         'public/fpdf_flatten.h',
+         'public/fpdf_formfill.h',
+         'public/fpdf_fwlevent.h',
+         'public/fpdf_ppo.h',
+         'public/fpdf_progressive.h',
+         'public/fpdf_save.h',
+         'public/fpdf_searchex.h',
+         'public/fpdf_sysfontinfo.h',
+         'public/fpdf_text.h',
+         'public/fpdf_transformpage.h',
+         'public/fpdfview.h',
+       ],
+       'conditions': [
+         ['pdf_enable_xfa==1', {
+           'dependencies': [
+             'fpdfxfa',
+            ],
+         }],
+         ['bundle_freetype==1', {
+           'dependencies': [
+             'third_party/third_party.gyp:fx_freetype',
+           ],
+         }, {
+           'link_settings': {
+             'libraries': [
+               '-lfreetype',
+             ],
+           },
+         }],
+       ],
+       'all_dependent_settings': {
+         'msvs_settings': {
+           'VCLinkerTool': {
+             'AdditionalDependencies': [
+               'advapi32.lib',
+               'gdi32.lib',
+               'user32.lib',
+             ],
+           },
+         },
+         'conditions': [
+           ['OS=="mac"', {
+             'link_settings': {
+               'libraries': [
+                 '$(SDKROOT)/System/Library/Frameworks/AppKit.framework',
+                 '$(SDKROOT)/System/Library/Frameworks/CoreFoundation.framework',
+               ],
+             },
+           }],
+         ],
+       },
+     },
+     {
        'target_name': 'fdrm',
        'type': 'static_library',
        'sources': [
***************
*** 820,826 ****
        'dependencies': [
          '<(DEPTH)/testing/gtest.gyp:gtest_main',
          '<(DEPTH)/testing/gtest.gyp:gtest',
!         'pdfium',
          'test_support',
        ],
        'sources': [
--- 920,926 ----
        'dependencies': [
          '<(DEPTH)/testing/gtest.gyp:gtest_main',
          '<(DEPTH)/testing/gtest.gyp:gtest',
!         'pdfium_static',
          'test_support',
        ],
        'sources': [
***************
*** 870,876 ****
        'dependencies': [
          '<(DEPTH)/testing/gmock.gyp:gmock',
          '<(DEPTH)/testing/gtest.gyp:gtest',
!         'pdfium',
          'test_support',
        ],
        'sources': [
--- 970,976 ----
        'dependencies': [
          '<(DEPTH)/testing/gmock.gyp:gmock',
          '<(DEPTH)/testing/gtest.gyp:gtest',
!         'pdfium_static',
          'test_support',
        ],
        'sources': [
diff -c -r pdfium.orig/samples/samples.gyp pdfium/samples/samples.gyp
*** pdfium.orig/samples/samples.gyp	2016-03-15 23:31:37.000000000 -0300
--- pdfium/samples/samples.gyp	2016-03-15 23:35:34.380887400 -0300
***************
*** 40,46 ****
        'target_name': 'pdfium_test',
        'type': 'executable',
        'dependencies': [
!         '../pdfium.gyp:pdfium',
          '../pdfium.gyp:test_support',
          # Regardless of whether the library ships against system freetype,
          # always link this binary against the bundled one for consistency
--- 40,46 ----
        'target_name': 'pdfium_test',
        'type': 'executable',
        'dependencies': [
!         '../pdfium.gyp:pdfium_static',
          '../pdfium.gyp:test_support',
          # Regardless of whether the library ships against system freetype,
          # always link this binary against the bundled one for consistency
***************
*** 80,86 ****
        'type': 'executable',
        'variables': { 'enable_wexit_time_destructors': 1, },
        'dependencies': [
!         '../pdfium.gyp:pdfium',
          '../third_party/third_party.gyp:pdfium_base',
        ],
        'sources': [
--- 80,86 ----
        'type': 'executable',
        'variables': { 'enable_wexit_time_destructors': 1, },
        'dependencies': [
!         '../pdfium.gyp:pdfium_static',
          '../third_party/third_party.gyp:pdfium_base',
        ],
        'sources': [
diff -c -r pdfium.orig/third_party/libopenjpeg20/openjpeg.h pdfium/third_party/libopenjpeg20/openjpeg.h
*** pdfium.orig/third_party/libopenjpeg20/openjpeg.h	2016-03-15 23:31:37.000000000 -0300
--- pdfium/third_party/libopenjpeg20/openjpeg.h	2016-03-15 23:35:34.380887400 -0300
***************
*** 78,84 ****
  
  #if defined(OPJ_STATIC) || !defined(_WIN32)
  /* http://gcc.gnu.org/wiki/Visibility */
! #	if __GNUC__ >= 4
  #		if defined(OPJ_STATIC) /* static library uses "hidden" */
  #			define OPJ_API    __attribute__ ((visibility ("hidden")))
  #		else
--- 78,84 ----
  
  #if defined(OPJ_STATIC) || !defined(_WIN32)
  /* http://gcc.gnu.org/wiki/Visibility */
! #	if (__GNUC__ >= 4) && !defined(__MINGW32__)
  #		if defined(OPJ_STATIC) /* static library uses "hidden" */
  #			define OPJ_API    __attribute__ ((visibility ("hidden")))
  #		else
