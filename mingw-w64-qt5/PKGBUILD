# Maintainer: Alexey Pavlov <alexpux@gmail.com>

_realname=qt5
_mingw_suff=mingw-w64-${CARCH}
pkgname="${_mingw_suff}-${_realname}"
pkgver=5.2.0
pkgrel=1
arch=('any')
url='http://qt-project.org/'
install=qt5.install
license=('GPL3' 'LGPL' 'FDL' 'custom')
depends=("${_mingw_suff}-gcc"
			"${_mingw_suff}-icu"
			"${_mingw_suff}-openssl"
			"${_mingw_suff}-libxml2"
			"${_mingw_suff}-libxslt"
			"${_mingw_suff}-fontconfig"
			"${_mingw_suff}-qtbinpatcher"
			"${_mingw_suff}-freetype"
			"${_mingw_suff}-libpng"
			"${_mingw_suff}-zlib"
			"${_mingw_suff}-libjpeg"
			"${_mingw_suff}-pcre"
			"${_mingw_suff}-sqlite3"
			"${_mingw_suff}-libwebp")
makedepends=("${_mingw_suff}-gcc"
			"${_mingw_suff}-postgresql"
			"${_mingw_suff}-libmariadbclient"
			"${_mingw_suff}-libfbclient"
			"${_mingw_suff}-python2"
			"${_mingw_suff}-ruby"
			"${_mingw_suff}-perl"
			"${_mingw_suff}-gperf"
			"m4"
			"flex"
			"${_mingw_suff}-make")
groups=("${_mingw_suff}-qt" "${_mingw_suff}-qt5")
options=('!strip' 'staticlibs')
_pkgfqn="qt-everywhere-opensource-src-${pkgver}"
source=(#"http://download.qt-project.org/development_releases/qt/5.2/${pkgver}/single/${_pkgfqn}.tar.xz"
		http://download.qt-project.org/official_releases/qt/5.2/5.2.0/single/${_pkgfqn}.tar.xz
		qt-5.0.0-oracle-driver-prompt.patch
		qt-5.0.0-use-fbclient-instead-of-gds32.patch
		qt-5.1.0-win32-g++-mkspec-optimization.patch
		qt-5.1.x-fix-configure-tests.patch
		qt-5.1.x-syncqt-fix.patch
		qt-5.1.x-win_flex-replace.patch)
md5sums=('8f60b47ca9461831d940f579ee90517e'
         '10790f1672b5f2b83e5473ad6cd48cd3'
         '86899e8f2858c48d4827282c04696b76'
         'd675dbbe15d275c84f2792c75212ace0'
         '2488e70329d9bc71f8f4619ddfb8522a'
         '2235d876133956a788c393310fa8a526'
         'cc5fdd2eebc8d2d747271de091942336')

prepare() {
  cd ${_pkgfqn}
  
  patch -p1 -i ${srcdir}/qt-5.0.0-oracle-driver-prompt.patch
  patch -p1 -i ${srcdir}/qt-5.0.0-use-fbclient-instead-of-gds32.patch
  patch -p1 -i ${srcdir}/qt-5.1.0-win32-g++-mkspec-optimization.patch
  #patch -p1 -i ${srcdir}/qt-5.1.x-fix-configure-tests.patch
  patch -p1 -i ${srcdir}/qt-5.1.x-syncqt-fix.patch
  patch -p1 -i ${srcdir}/qt-5.1.x-win_flex-replace.patch
  
  local _optim=
  case ${MINGW_CHOST} in
	i686*)
		_optim="-march=i686 -mtune=core2"
	;;
	x86_64*)
		_optim="-march=nocona -mtune=core2"
	;;
  esac

  sed -i "s|%OPTIMIZE_OPT%|${_optim}|g" qtbase/mkspecs/win32-g++/qmake.conf
  sed -i "s|%STATICFLAGS%||g" qtbase/mkspecs/win32-g++/qmake.conf # -static-libstdc++ -static-libgcc
  sed -i "s|-O2|${CXXFLAGS}|" qtbase/mkspecs/common/{g++,gcc}-base.conf
  sed -i "/^QMAKE_LFLAGS_RPATH/s| -Wl,-rpath,||g" qtbase/mkspecs/common/gcc-base-unix.conf
  sed -i "/^QMAKE_LFLAGS\s/s|+=|+= ${LDFLAGS}|g" qtbase/mkspecs/common/gcc-base.conf

  # Use python2 for Python 2.x
  #patch -p1 -i "${srcdir}"/use-python2.patch
  #sed -i -e "s|#![ ]*/usr/bin/python$|#!/usr/bin/python2|" \
  #  -e "s|#![ ]*/usr/bin/env python$|#!/usr/bin/env python2|" \
  #  $(find . -name '*.py')
}

build() {
  cd ${_pkgfqn}
  touch qtbase/.gitignore
  #BUILD_WIN=$(pwd -W)
  #echo "BUILD_WIN $BUILD_WIN"
  
  #export QTDIR="${srcdir}"/${_pkgfqn}
  #export LD_LIBRARY_PATH="${QTDIR}"/qtbase/lib:"${QTDIR}"/qttools/lib:"${LD_LIBRARY_PATH}"
  #export QT_PLUGIN_PATH="${QTDIR}"/qtbase/plugins

  mkdir -p ${pkgdir}${MINGW_PREFIX}
  pushd ${pkgdir}${MINGW_PREFIX} > /dev/null
  QTDIR_WIN=$(pwd -W)
  echo "QTDIR_WIN $QTDIR_WIN"
  popd > /dev/null
  
  #pushd ${MINGW_PREFIX} > /dev/null
  #MINGW_WIN=$(pwd -W)
  #echo "MINGW_WIN $MINGW_WIN"
  #popd > /dev/null
  
  export INCLUDE="${MINGW_PREFIX}/${MINGW_CHOST}/include:${MINGW_PREFIX}/include:${MINGW_PREFIX}/include/mysql:${MINGW_PREFIX}/include/libxml2"
  export LIB="${MINGW_PREFIX}/${MINGW_CHOST}/lib:${MINGW_PREFIX}/lib"
  export CPATH="${MINGW_PREFIX}/${MINGW_CHOST}/include:${MINGW_PREFIX}/include:${MINGW_PREFIX}/include/mysql:${MINGW_PREFIX}/include/libxml2"
  export LIBRARY_PATH="${MINGW_PREFIX}/${MINGW_CHOST}/lib:${MINGW_PREFIX}/lib"
  export PATH=${srcdir}/${_pkgfqn}/qtbase/bin:${srcdir}/${_pkgfqn}/qtbase/lib:${PATH}

  ./configure.bat \
		-prefix ${QTDIR_WIN} \
		-opensource \
		-opengl desktop \
		-confirm-license \
		-debug-and-release \
		-plugin-sql-ibase \
		-plugin-sql-mysql \
		-plugin-sql-psql \
		-plugin-sql-odbc \
		-no-iconv \
		-icu \
		-fontconfig \
		-openssl \
		-no-dbus \
		-shared \
		-platform win32-g++ \
		-nomake tests \
		-nomake examples

  ${MINGW_PREFIX}/bin/mingw32-make ${MAKEFLAGS}

  # Fix paths
  #find "${QTDIR}" -name Makefile -exec sed -i "s|/usr/lib/qt/bin/qdoc|${QTDIR}/qtbase/bin/qdoc|g" {} +
  #find "${QTDIR}" -name Makefile.qmake-docs -exec sed -i "s|/usr/lib/qt/bin/qdoc|${QTDIR}/qtbase/bin/qdoc|g" {} +
  #find "${QTDIR}" -name Makefile -exec sed -i "s|/usr/lib/qt/bin/qhelpgenerator|${QTDIR}/qttools/bin/qhelpgenerator|g" {} +
  #find "${QTDIR}" -name Makefile.qmake-docs -exec sed -i "s|/usr/lib/qt/bin/qhelpgenerator|${QTDIR}/qttools/bin/qhelpgenerator|g" {} +
  #sed -i "s|/usr/lib/qt/bin/qhelpgenerator|${QTDIR}/qttools/bin/qhelpgenerator|g" qtwebkit/Source/Makefile.api
}

package() {

  cd ${_pkgfqn}
  
  export PATH=${pkgdir}${MINGW_PREFIX}/bin:${srcdir}/${_pkgfqn}/qtbase/bin:${srcdir}/${_pkgfqn}/qtbase/lib:${PATH}
  
  ${MINGW_PREFIX}/bin/mingw32-make ${MAKEFLAGS} install #INSTALL_ROOT="${pkgdir}"
  ${MINGW_PREFIX}/bin/mingw32-make ${MAKEFLAGS} docs
  ${MINGW_PREFIX}/bin/mingw32-make ${MAKEFLAGS} install_qch_docs

  install -D -m644 LGPL_EXCEPTION.txt \
    "${pkgdir}${MINGW_PREFIX}"/share/licenses/qt5/LGPL_EXCEPTION.txt

  # Remove dll's from lib
  rm -f "${pkgdir}${MINGW_PREFIX}/lib"/*.dll
  
  # Workaround for installing empty .pc files
  plain "---> Fix pkgconfig files..."
  local _pc_files=( $(find ${srcdir}/${_pkgfqn} -type f -name Qt5*.pc) )
  cp -f ${_pc_files[@]} ${pkgdir}${MINGW_PREFIX}/lib/pkgconfig/
  
  # Fix wrong path in prl files
  #find "${pkgdir}${MINGW_PREFIX}/lib" -type f -name '*.prl' \
  #  -exec sed -i -e '/^QMAKE_PRL_BUILD_DIR/d;s/\(QMAKE_PRL_LIBS =\).*/\1/' {} \;

  # Fix wrong qmake path in pri file
  #sed -i "s|${srcdir}/${_pkgfqn}/qtbase|/usr|" \
  #  "${pkgdir}"/usr/lib/qt/mkspecs/modules/qt_lib_bootstrap_private.pri
}
