diff -Naur glibmm-2.39.4-orig/gio/giomm/dbusmessage.cc glibmm-2.39.4/gio/giomm/dbusmessage.cc
--- glibmm-2.39.4-orig/gio/giomm/dbusmessage.cc	2014-01-17 13:13:14.000000000 +0400
+++ glibmm-2.39.4/gio/giomm/dbusmessage.cc	2014-03-02 14:21:48.718000000 +0400
@@ -193,15 +193,15 @@
   return Glib::RefPtr<Message>( new Message() );
 }
 
-Glib::RefPtr<Message> Message::create_signal(const Glib::ustring& path, const Glib::ustring& interface, const Glib::ustring& signal)
+Glib::RefPtr<Message> Message::create_signal(const Glib::ustring& path, const Glib::ustring& g_interface, const Glib::ustring& signal)
 {
-  return Glib::wrap(g_dbus_message_new_signal(path.c_str(), interface.c_str(), signal.c_str()));
+  return Glib::wrap(g_dbus_message_new_signal(path.c_str(), g_interface.c_str(), signal.c_str()));
 }
 
 
-Glib::RefPtr<Message> Message::create_method_call(const Glib::ustring& name, const Glib::ustring& path, const Glib::ustring& interface, const Glib::ustring& method)
+Glib::RefPtr<Message> Message::create_method_call(const Glib::ustring& name, const Glib::ustring& path, const Glib::ustring& g_interface, const Glib::ustring& method)
 {
-  return Glib::wrap(g_dbus_message_new_method_call(name.c_str(), path.c_str(), interface.c_str(), method.c_str()));
+  return Glib::wrap(g_dbus_message_new_method_call(name.c_str(), path.c_str(), g_interface.c_str(), method.c_str()));
 }
 
 
diff -Naur glibmm-2.39.4-orig/gio/giomm/dbusmessage.h glibmm-2.39.4/gio/giomm/dbusmessage.h
--- glibmm-2.39.4-orig/gio/giomm/dbusmessage.h	2014-01-28 13:14:15.000000000 +0400
+++ glibmm-2.39.4/gio/giomm/dbusmessage.h	2014-03-02 14:22:52.880800000 +0400
@@ -346,22 +346,22 @@
    * 
    * @newin{2,26}
    * @param path A valid object path.
-   * @param interface A valid D-Bus interface name.
+   * @param g_interface A valid D-Bus interface name.
    * @param signal A valid signal name.
    * @return A DBusMessage. Free with Glib::object_unref().
    */
-  static Glib::RefPtr<Message> create_signal(const Glib::ustring& path, const Glib::ustring& interface, const Glib::ustring& signal);
+  static Glib::RefPtr<Message> create_signal(const Glib::ustring& path, const Glib::ustring& g_interface, const Glib::ustring& signal);
   
   /** Creates a new DBusMessage for a method call.
    * 
    * @newin{2,26}
    * @param name A valid D-Bus name or <tt>0</tt>.
    * @param path A valid object path.
-   * @param interface A valid D-Bus interface name or <tt>0</tt>.
+   * @param g_interface A valid D-Bus interface name or <tt>0</tt>.
    * @param method A valid method name.
    * @return A DBusMessage. Free with Glib::object_unref().
    */
-  static Glib::RefPtr<Message> create_method_call(const Glib::ustring& name, const Glib::ustring& path, const Glib::ustring& interface, const Glib::ustring& method);
+  static Glib::RefPtr<Message> create_method_call(const Glib::ustring& name, const Glib::ustring& path, const Glib::ustring& g_interface, const Glib::ustring& method);
   
   /** Creates a new DBusMessage that is a reply to @a method_call_message.
    * 
diff -Naur glibmm-2.39.4-orig/gio/giomm/dbusobject.cc glibmm-2.39.4/gio/giomm/dbusobject.cc
--- glibmm-2.39.4-orig/gio/giomm/dbusobject.cc	2014-01-17 13:13:15.000000000 +0400
+++ glibmm-2.39.4/gio/giomm/dbusobject.cc	2014-03-02 14:25:40.864200000 +0400
@@ -470,7 +470,7 @@
 }
 
 
-void Gio::DBus::Object::on_interface_added(const Glib::RefPtr<Gio::DBus::Interface>& interface)
+void Gio::DBus::Object::on_interface_added(const Glib::RefPtr<Gio::DBus::Interface>& g_interface)
 {
   BaseClassType *const base = static_cast<BaseClassType*>(
       g_type_interface_peek_parent( // Get the parent interface of the interface (The original underlying C interface).
@@ -478,9 +478,9 @@
 )  );
 
   if(base && base->interface_added)
-    (*base->interface_added)(gobj(),Glib::unwrap(interface));
+    (*base->interface_added)(gobj(),Glib::unwrap(g_interface));
 }
-void Gio::DBus::Object::on_interface_removed(const Glib::RefPtr<Gio::DBus::Interface>& interface)
+void Gio::DBus::Object::on_interface_removed(const Glib::RefPtr<Gio::DBus::Interface>& g_interface)
 {
   BaseClassType *const base = static_cast<BaseClassType*>(
       g_type_interface_peek_parent( // Get the parent interface of the interface (The original underlying C interface).
@@ -488,7 +488,7 @@
 )  );
 
   if(base && base->interface_removed)
-    (*base->interface_removed)(gobj(),Glib::unwrap(interface));
+    (*base->interface_removed)(gobj(),Glib::unwrap(g_interface));
 }
 
 Glib::ustring Gio::DBus::Object::get_object_path_vfunc() const
diff -Naur glibmm-2.39.4-orig/gio/giomm/dbusobject.h glibmm-2.39.4/gio/giomm/dbusobject.h
--- glibmm-2.39.4-orig/gio/giomm/dbusobject.h	2014-01-17 13:13:15.000000000 +0400
+++ glibmm-2.39.4/gio/giomm/dbusobject.h	2014-03-02 14:27:03.232200000 +0400
@@ -182,12 +182,12 @@
  
   /**
    * @par Slot Prototype:
-   * <tt>void on_my_%interface_added(const Glib::RefPtr<Gio::DBus::Interface>& interface)</tt>
+   * <tt>void on_my_%interface_added(const Glib::RefPtr<Gio::DBus::Interface>& g_interface)</tt>
    *
    * Emitted when @a interface is added to @a object.
    * 
    * @newin{2,30}
-   * @param interface The DBusInterface that was added.
+   * @param g_interface The DBusInterface that was added.
    */
 
   Glib::SignalProxy1< void,const Glib::RefPtr<Gio::DBus::Interface>& > signal_interface_added();
@@ -195,12 +195,12 @@
   
   /**
    * @par Slot Prototype:
-   * <tt>void on_my_%interface_removed(const Glib::RefPtr<Gio::DBus::Interface>& interface)</tt>
+   * <tt>void on_my_%interface_removed(const Glib::RefPtr<Gio::DBus::Interface>& g_interface)</tt>
    *
    * Emitted when @a interface is removed from @a object.
    * 
    * @newin{2,30}
-   * @param interface The DBusInterface that was removed.
+   * @param g_interface The DBusInterface that was removed.
    */
 
   Glib::SignalProxy1< void,const Glib::RefPtr<Gio::DBus::Interface>& > signal_interface_removed();
@@ -225,9 +225,9 @@
 
   //Default Signal Handlers::
   /// This is a default handler for the signal signal_interface_added().
-  virtual void on_interface_added(const Glib::RefPtr<Gio::DBus::Interface>& interface);
+  virtual void on_interface_added(const Glib::RefPtr<Gio::DBus::Interface>& g_interface);
   /// This is a default handler for the signal signal_interface_removed().
-  virtual void on_interface_removed(const Glib::RefPtr<Gio::DBus::Interface>& interface);
+  virtual void on_interface_removed(const Glib::RefPtr<Gio::DBus::Interface>& g_interface);
 
 
 };
diff -Naur glibmm-2.39.4-orig/gio/src/dbusmessage.hg glibmm-2.39.4/gio/src/dbusmessage.hg
--- glibmm-2.39.4-orig/gio/src/dbusmessage.hg	2014-01-25 00:52:55.000000000 +0400
+++ glibmm-2.39.4/gio/src/dbusmessage.hg	2014-03-02 14:29:57.642400000 +0400
@@ -67,8 +67,8 @@
   // They are generally UTF-8 that can only contain the ASCII subset,
   // so ustring still seems preferrable to std::string, which generally implies an unknown encoding for us.
 
-  _WRAP_METHOD(static Glib::RefPtr<Message> create_signal(const Glib::ustring& path, const Glib::ustring& interface, const Glib::ustring& signal), g_dbus_message_new_signal)
-  _WRAP_METHOD(static Glib::RefPtr<Message> create_method_call(const Glib::ustring& name, const Glib::ustring& path, const Glib::ustring& interface, const Glib::ustring& method), g_dbus_message_new_method_call)
+  _WRAP_METHOD(static Glib::RefPtr<Message> create_signal(const Glib::ustring& path, const Glib::ustring& g_interface, const Glib::ustring& signal), g_dbus_message_new_signal)
+  _WRAP_METHOD(static Glib::RefPtr<Message> create_method_call(const Glib::ustring& name, const Glib::ustring& path, const Glib::ustring& g_interface, const Glib::ustring& method), g_dbus_message_new_method_call)
   _WRAP_METHOD(static Glib::RefPtr<Message> create_method_reply(const Glib::RefPtr<Message>& method_call_message), g_dbus_message_new_method_reply)
   _WRAP_METHOD(static Glib::RefPtr<Message> create_method_error_literal(const Glib::RefPtr<const Message>& method_call_message, const Glib::ustring& error_name, const Glib::ustring& error_message), g_dbus_message_new_method_error_literal)
 
diff -Naur glibmm-2.39.4-orig/gio/src/dbusobject.hg glibmm-2.39.4/gio/src/dbusobject.hg
--- glibmm-2.39.4-orig/gio/src/dbusobject.hg	2013-11-25 23:11:20.000000000 +0400
+++ glibmm-2.39.4/gio/src/dbusobject.hg	2014-03-02 14:30:18.312400000 +0400
@@ -62,8 +62,8 @@
 
 #m4 _CONVERSION(`GDBusInterface*',`const Glib::RefPtr<Gio::DBus::Interface>&',`Glib::wrap($3, true)')
 
-  _WRAP_SIGNAL(void interface_added(const Glib::RefPtr<Gio::DBus::Interface>& interface), "interface_added")
-  _WRAP_SIGNAL(void interface_removed(const Glib::RefPtr<Gio::DBus::Interface>& interface), "interface_removed")
+  _WRAP_SIGNAL(void interface_added(const Glib::RefPtr<Gio::DBus::Interface>& g_interface), "interface_added")
+  _WRAP_SIGNAL(void interface_removed(const Glib::RefPtr<Gio::DBus::Interface>& g_interface), "interface_removed")
 
 #m4 _CONVERSION(`Glib::ustring',`const gchar*',`g_strdup($3.c_str())')
   _WRAP_VFUNC(Glib::ustring get_object_path() const, "get_object_path")
