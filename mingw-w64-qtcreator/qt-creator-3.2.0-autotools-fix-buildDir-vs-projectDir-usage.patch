diff -urN qt-creator-opensource-src-3.2.0.orig/src/plugins/autotoolsprojectmanager/autogenstep.cpp qt-creator-opensource-src-3.2.0/src/plugins/autotoolsprojectmanager/autogenstep.cpp
--- qt-creator-opensource-src-3.2.0.orig/src/plugins/autotoolsprojectmanager/autogenstep.cpp	2014-08-22 19:22:11.334213600 +0100
+++ qt-creator-opensource-src-3.2.0/src/plugins/autotoolsprojectmanager/autogenstep.cpp	2014-08-22 19:23:05.492311300 +0100
@@ -158,8 +158,9 @@
     ProcessParameters *pp = processParameters();
     pp->setMacroExpander(bc->macroExpander());
     pp->setEnvironment(bc->environment());
-    pp->setWorkingDirectory(bc->buildDirectory().toString());
-    pp->setCommand(QLatin1String("autogen.sh"));
+    const QString projectDir(bc->target()->project()->projectDirectory().toString());
+    pp->setWorkingDirectory(projectDir);
+    pp->setCommand(QLatin1String("./autogen.sh"));
     pp->setArguments(additionalArguments());
     pp->resolveAll();
 
@@ -171,10 +172,10 @@
     BuildConfiguration *bc = buildConfiguration();
 
     // Check whether we need to run autogen.sh
-    const QString buildDir = bc->buildDirectory().toString();
-    const QFileInfo configureInfo(buildDir + QLatin1String("/configure"));
-    const QFileInfo configureAcInfo(buildDir + QLatin1String("/configure.ac"));
-    const QFileInfo makefileAmInfo(buildDir + QLatin1String("/Makefile.am"));
+    const QString projectDir(bc->target()->project()->projectDirectory().toString());
+    const QFileInfo configureInfo(projectDir + QLatin1String("/configure"));
+    const QFileInfo configureAcInfo(projectDir + QLatin1String("/configure.ac"));
+    const QFileInfo makefileAmInfo(projectDir + QLatin1String("/Makefile.am"));
 
     if (!configureInfo.exists()
         || configureInfo.lastModified() < configureAcInfo.lastModified()
@@ -276,8 +277,9 @@
     ProcessParameters param;
     param.setMacroExpander(bc->macroExpander());
     param.setEnvironment(bc->environment());
-    param.setWorkingDirectory(bc->buildDirectory().toString());
-    param.setCommand(QLatin1String("autogen.sh"));
+    const QString projectDir(bc->target()->project()->projectDirectory().toString());
+    param.setWorkingDirectory(projectDir);
+    param.setCommand(QLatin1String("./autogen.sh"));
     param.setArguments(m_autogenStep->additionalArguments());
     m_summaryText = param.summary(displayName());
     emit updateSummary();
diff -urN qt-creator-opensource-src-3.2.0.orig/src/plugins/autotoolsprojectmanager/autoreconfstep.cpp qt-creator-opensource-src-3.2.0/src/plugins/autotoolsprojectmanager/autoreconfstep.cpp
--- qt-creator-opensource-src-3.2.0.orig/src/plugins/autotoolsprojectmanager/autoreconfstep.cpp	2014-08-22 19:22:11.335213700 +0100
+++ qt-creator-opensource-src-3.2.0/src/plugins/autotoolsprojectmanager/autoreconfstep.cpp	2014-08-22 19:23:09.560544000 +0100
@@ -157,7 +157,8 @@
     ProcessParameters *pp = processParameters();
     pp->setMacroExpander(bc->macroExpander());
     pp->setEnvironment(bc->environment());
-    pp->setWorkingDirectory(bc->buildDirectory().toString());
+    const QString projectDir(bc->target()->project()->projectDirectory().toString());
+    pp->setWorkingDirectory(projectDir);
     pp->setCommand(QLatin1String("autoreconf"));
     pp->setArguments(additionalArguments());
     pp->resolveAll();
@@ -170,8 +171,8 @@
     BuildConfiguration *bc = buildConfiguration();
 
     // Check whether we need to run autoreconf
-    const QString buildDir = bc->buildDirectory().toString();
-    const QFileInfo configureInfo(buildDir + QLatin1String("/configure"));
+    const QString projectDir(bc->target()->project()->projectDirectory().toString());
+    const QFileInfo configureInfo(projectDir + QLatin1String("/configure"));
 
     if (!configureInfo.exists())
         m_runAutoreconf = true;
@@ -270,7 +271,8 @@
     ProcessParameters param;
     param.setMacroExpander(bc->macroExpander());
     param.setEnvironment(bc->environment());
-    param.setWorkingDirectory(bc->buildDirectory().toString());
+    const QString projectDir(bc->target()->project()->projectDirectory().toString());
+    param.setWorkingDirectory(projectDir);
     param.setCommand(QLatin1String("autoreconf"));
     param.setArguments(m_autoreconfStep->additionalArguments());
     m_summaryText = param.summary(displayName());
diff -urN qt-creator-opensource-src-3.2.0.orig/src/plugins/autotoolsprojectmanager/configurestep.cpp qt-creator-opensource-src-3.2.0/src/plugins/autotoolsprojectmanager/configurestep.cpp
--- qt-creator-opensource-src-3.2.0.orig/src/plugins/autotoolsprojectmanager/configurestep.cpp	2014-08-22 19:22:11.336213700 +0100
+++ qt-creator-opensource-src-3.2.0/src/plugins/autotoolsprojectmanager/configurestep.cpp	2014-08-22 19:23:14.575830800 +0100
@@ -54,6 +54,21 @@
 const char CONFIGURE_ADDITIONAL_ARGUMENTS_KEY[] = "AutotoolsProjectManager.ConfigureStep.AdditionalArguments";
 const char CONFIGURE_STEP_ID[] = "AutotoolsProjectManager.ConfigureStep";
 
+/////////////////////
+// Helper Function
+/////////////////////
+
+namespace {
+    QString projectDirRelativeToBuildDir(BuildConfiguration *bc) {
+        const QDir buildDir(bc->buildDirectory().toString());
+        const QString projectDirToBuildDir = buildDir.relativeFilePath(bc->target()->project()->projectDirectory().toString());
+        if (projectDirToBuildDir == QLatin1String("")) {
+            return QLatin1String(".");
+        }
+        return projectDirToBuildDir;
+    }
+}
+
 ////////////////////////////////
 // ConfigureStepFactory Class
 ////////////////////////////////
@@ -159,7 +174,7 @@
     pp->setMacroExpander(bc->macroExpander());
     pp->setEnvironment(bc->environment());
     pp->setWorkingDirectory(bc->buildDirectory().toString());
-    pp->setCommand(QLatin1String("configure"));
+    pp->setCommand(projectDirRelativeToBuildDir(bc) + QLatin1String("/configure"));
     pp->setArguments(additionalArguments());
     pp->resolveAll();
 
@@ -171,9 +186,9 @@
     BuildConfiguration *bc = buildConfiguration();
 
     //Check whether we need to run configure
-    QString buildDir = bc->buildDirectory().toString();
-    const QFileInfo configureInfo(buildDir +QLatin1String("/configure"));
-    const QFileInfo configStatusInfo(buildDir + QLatin1String("/config.status"));
+    const QString projectDir(bc->target()->project()->projectDirectory().toString());
+    const QFileInfo configureInfo(projectDir + QLatin1String("/configure"));
+    const QFileInfo configStatusInfo(projectDir + QLatin1String("/config.status"));
 
     if (!configStatusInfo.exists()
         || configStatusInfo.lastModified() < configureInfo.lastModified()) {
@@ -275,7 +290,7 @@
     param.setMacroExpander(bc->macroExpander());
     param.setEnvironment(bc->environment());
     param.setWorkingDirectory(bc->buildDirectory().toString());
-    param.setCommand(QLatin1String("configure"));
+    param.setCommand(projectDirRelativeToBuildDir(bc) + QLatin1String("/configure"));
     param.setArguments(m_configureStep->additionalArguments());
     m_summaryText = param.summary(displayName());
     emit updateSummary();
