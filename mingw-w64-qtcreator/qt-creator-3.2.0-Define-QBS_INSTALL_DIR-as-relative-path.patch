--- qt-creator-opensource-src-3.2.0-rc1/src/plugins/qbsprojectmanager/qbsprojectmanager.pro.orig	2014-06-19 16:30:25.000000000 +0100
+++ qt-creator-opensource-src-3.2.0-rc1/src/plugins/qbsprojectmanager/qbsprojectmanager.pro	2014-07-06 11:19:45.267996400 +0100
@@ -12,7 +12,11 @@
     include($${QBS_INSTALL_DIR}/include/qbs/use_installed_qtprofilesetup.pri)
 }
 QBS_INSTALL_DIR_FWD_SLASHES = $$replace(QBS_INSTALL_DIR, \\\\, /)
-DEFINES += QBS_INSTALL_DIR=\\\"$$QBS_INSTALL_DIR_FWD_SLASHES\\\"
+# With this as it was, the Qbs plugin tries to load from C:\msys64r\..
+# since it bakes in the installation prefix. It seems that qbsproject.cpp
+# will do the right thing if QBS_INSTALL_DIR is empty.
+# DEFINES += QBS_INSTALL_DIR=\\\"$$QBS_INSTALL_DIR_FWD_SLASHES\\\"
+DEFINES += QBS_INSTALL_DIR=\\\"../\\\"
 
 DEFINES += \
     QBSPROJECTMANAGER_LIBRARY
--- qt-creator-opensource-src-3.2.0-rc1/src/plugins/qbsprojectmanager/qbsprojectparser.cpp.orig	2014-08-01 10:17:30.000000000 +0100
+++ qt-creator-opensource-src-3.2.0-rc1/src/plugins/qbsprojectmanager/qbsprojectparser.cpp	2014-08-17 20:27:44.754830900 +0100
@@ -157,22 +157,28 @@
 QString QbsProjectParser::resourcesBaseDirectory() const
 {
     const QString qbsInstallDir = QLatin1String(QBS_INSTALL_DIR);
-    if (!qbsInstallDir.isEmpty())
-        return qbsInstallDir;
-    return Core::ICore::resourcePath() + QLatin1String("/qbs");
+    if (!qbsInstallDir.isEmpty()) {
+        if (QDir(qbsInstallDir).isAbsolute()) {
+            return qbsInstallDir;
+        } else {
+            return QDir::cleanPath(QCoreApplication::applicationDirPath()
+                                   + QLatin1String("/") + qbsInstallDir);
+        }
+    }
+    return ICore::resourcePath() + QLatin1String("/qbs");
 }
 
 QString QbsProjectParser::pluginsBaseDirectory() const
 {
     const QString qbsInstallDir = QLatin1String(QBS_INSTALL_DIR);
-    if (!qbsInstallDir.isEmpty())
-        return qbsInstallDir + QLatin1String("/lib/");
+    if (!qbsInstallDir.isEmpty() && QDir(qbsInstallDir).isAbsolute())
+        return qbsInstallDir + QLatin1String("/lib");
     if (Utils::HostOsInfo::isMacHost())
         return QDir::cleanPath(QCoreApplication::applicationDirPath()
-                               + QLatin1String("/../PlugIns"));
+                               + QLatin1String("/../PlugIns/") + qbsInstallDir);
     else
         return QDir::cleanPath(QCoreApplication::applicationDirPath()
-                               + QLatin1String("/../" IDE_LIBRARY_BASENAME "/qtcreator"));
+                               + QLatin1String("/../" IDE_LIBRARY_BASENAME "/qtcreator/") + qbsInstallDir);
 }
 
 } // namespace Internal
