diff -Naur blender-v2.71-orig/intern/cycles/kernel/osl/osl_bssrdf.cpp blender-v2.71/intern/cycles/kernel/osl/osl_bssrdf.cpp
--- blender-v2.71-orig/intern/cycles/kernel/osl/osl_bssrdf.cpp	2014-08-07 20:48:48.000000000 +0400
+++ blender-v2.71/intern/cycles/kernel/osl/osl_bssrdf.cpp	2014-09-01 11:45:56.880600000 +0400
@@ -66,18 +66,6 @@
 	static ClosureParam params[] = {
 		CLOSURE_FLOAT3_PARAM(CubicBSSRDFClosure, sc.N),
 		CLOSURE_FLOAT3_PARAM(CubicBSSRDFClosure, radius),
-		//CLOSURE_FLOAT_PARAM(CubicBSSRDFClosure, sc.data1),
-	    CLOSURE_STRING_KEYPARAM("label"),
-	    CLOSURE_FINISH_PARAM(CubicBSSRDFClosure)
-	};
-	return params;
-}
-
-ClosureParam *closure_bssrdf_cubic_extended_params()
-{
-	static ClosureParam params[] = {
-		CLOSURE_FLOAT3_PARAM(CubicBSSRDFClosure, sc.N),
-		CLOSURE_FLOAT3_PARAM(CubicBSSRDFClosure, radius),
 		CLOSURE_FLOAT_PARAM(CubicBSSRDFClosure, sc.data1),
 		CLOSURE_FLOAT_PARAM(CubicBSSRDFClosure, sc.T.x),
 	    CLOSURE_STRING_KEYPARAM("label"),
@@ -106,18 +94,6 @@
 {
 	static ClosureParam params[] = {
 		CLOSURE_FLOAT3_PARAM(GaussianBSSRDFClosure, sc.N),
-		CLOSURE_FLOAT3_PARAM(GaussianBSSRDFClosure, radius),
-		//CLOSURE_FLOAT_PARAM(GaussianBSSRDFClosure, sc.data1),
-	    CLOSURE_STRING_KEYPARAM("label"),
-	    CLOSURE_FINISH_PARAM(GaussianBSSRDFClosure)
-	};
-	return params;
-}
-
-ClosureParam *closure_bssrdf_gaussian_extended_params()
-{
-	static ClosureParam params[] = {
-		CLOSURE_FLOAT3_PARAM(GaussianBSSRDFClosure, sc.N),
 		CLOSURE_FLOAT3_PARAM(GaussianBSSRDFClosure, radius),
 		CLOSURE_FLOAT_PARAM(GaussianBSSRDFClosure, sc.data1),
 	    CLOSURE_STRING_KEYPARAM("label"),
diff -Naur blender-v2.71-orig/intern/cycles/kernel/osl/osl_closures.cpp blender-v2.71/intern/cycles/kernel/osl/osl_closures.cpp
--- blender-v2.71-orig/intern/cycles/kernel/osl/osl_closures.cpp	2014-08-07 20:48:48.000000000 +0400
+++ blender-v2.71/intern/cycles/kernel/osl/osl_closures.cpp	2014-09-01 11:45:56.880600000 +0400
@@ -224,8 +224,6 @@
 		bsdf_diffuse_toon_params(), bsdf_diffuse_toon_prepare);
 	register_closure(ss, "glossy_toon", id++,
 		bsdf_glossy_toon_params(), bsdf_glossy_toon_prepare);
-	register_closure(ss, "specular_toon", id++,
-		bsdf_glossy_toon_params(), bsdf_glossy_toon_prepare);
 	register_closure(ss, "westin_backscatter", id++,
 		bsdf_westin_backscatter_params(), bsdf_westin_backscatter_prepare);
 	register_closure(ss, "westin_sheen", id++,
@@ -247,10 +245,6 @@
 		closure_bssrdf_cubic_params(), closure_bssrdf_cubic_prepare);
 	register_closure(ss, "bssrdf_gaussian", id++,
 		closure_bssrdf_gaussian_params(), closure_bssrdf_gaussian_prepare);
-	register_closure(ss, "bssrdf_cubic", id++,
-		closure_bssrdf_cubic_extended_params(), closure_bssrdf_cubic_prepare);
-	register_closure(ss, "bssrdf_gaussian", id++,
-		closure_bssrdf_gaussian_extended_params(), closure_bssrdf_gaussian_prepare);
 
 	register_closure(ss, "hair_reflection", id++,
 		bsdf_hair_reflection_params(), bsdf_hair_reflection_prepare);
diff -Naur blender-v2.71-orig/intern/cycles/kernel/osl/osl_closures.h blender-v2.71/intern/cycles/kernel/osl/osl_closures.h
--- blender-v2.71-orig/intern/cycles/kernel/osl/osl_closures.h	2014-08-07 20:48:48.000000000 +0400
+++ blender-v2.71/intern/cycles/kernel/osl/osl_closures.h	2014-09-01 11:45:56.880600000 +0400
@@ -52,8 +52,6 @@
 OSL::ClosureParam *closure_westin_sheen_params();
 OSL::ClosureParam *closure_bssrdf_cubic_params();
 OSL::ClosureParam *closure_bssrdf_gaussian_params();
-OSL::ClosureParam *closure_bssrdf_cubic_extended_params();
-OSL::ClosureParam *closure_bssrdf_gaussian_extended_params();
 OSL::ClosureParam *closure_henyey_greenstein_volume_params();
 
 void closure_emission_prepare(OSL::RendererServices *, int id, void *data);
diff -Naur blender-v2.71-orig/intern/cycles/kernel/osl/osl_services.cpp blender-v2.71/intern/cycles/kernel/osl/osl_services.cpp
--- blender-v2.71-orig/intern/cycles/kernel/osl/osl_services.cpp	2014-09-01 11:43:04.917600000 +0400
+++ blender-v2.71/intern/cycles/kernel/osl/osl_services.cpp	2014-09-01 11:45:52.512600000 +0400
@@ -126,7 +126,7 @@
 	osl_ts = osl_ts_;
 }
 
-bool OSLRenderServices::get_matrix(OSL::Matrix44 &result, OSL::TransformationPtr xform, float time)
+bool OSLRenderServices::get_matrix(OSL::ShaderGlobals *sg, OSL::Matrix44 &result, OSL::TransformationPtr xform, float time)
 {
 	/* this is only used for shader and object space, we don't really have
 	 * a concept of shader space, so we just use object space for both. */
@@ -156,7 +156,7 @@
 	return false;
 }
 
-bool OSLRenderServices::get_inverse_matrix(OSL::Matrix44 &result, OSL::TransformationPtr xform, float time)
+bool OSLRenderServices::get_inverse_matrix(OSL::ShaderGlobals *sg, OSL::Matrix44 &result, OSL::TransformationPtr xform, float time)
 {
 	/* this is only used for shader and object space, we don't really have
 	 * a concept of shader space, so we just use object space for both. */
@@ -186,7 +186,7 @@
 	return false;
 }
 
-bool OSLRenderServices::get_matrix(OSL::Matrix44 &result, ustring from, float time)
+bool OSLRenderServices::get_matrix(OSL::ShaderGlobals *sg, OSL::Matrix44 &result, ustring from, float time)
 {
 	KernelGlobals *kg = kernel_globals;
 
@@ -218,7 +218,7 @@
 	return false;
 }
 
-bool OSLRenderServices::get_inverse_matrix(OSL::Matrix44 &result, ustring to, float time)
+bool OSLRenderServices::get_inverse_matrix(OSL::ShaderGlobals *sg, OSL::Matrix44 &result, ustring to, float time)
 {
 	KernelGlobals *kg = kernel_globals;
 
@@ -250,7 +250,7 @@
 	return false;
 }
 
-bool OSLRenderServices::get_matrix(OSL::Matrix44 &result, OSL::TransformationPtr xform)
+bool OSLRenderServices::get_matrix(OSL::ShaderGlobals *sg, OSL::Matrix44 &result, OSL::TransformationPtr xform)
 {
 	/* this is only used for shader and object space, we don't really have
 	 * a concept of shader space, so we just use object space for both. */
@@ -275,7 +275,7 @@
 	return false;
 }
 
-bool OSLRenderServices::get_inverse_matrix(OSL::Matrix44 &result, OSL::TransformationPtr xform)
+bool OSLRenderServices::get_inverse_matrix(OSL::ShaderGlobals *sg, OSL::Matrix44 &result, OSL::TransformationPtr xform)
 {
 	/* this is only used for shader and object space, we don't really have
 	 * a concept of shader space, so we just use object space for both. */
@@ -300,7 +300,7 @@
 	return false;
 }
 
-bool OSLRenderServices::get_matrix(OSL::Matrix44 &result, ustring from)
+bool OSLRenderServices::get_matrix(OSL::ShaderGlobals *sg, OSL::Matrix44 &result, ustring from)
 {
 	KernelGlobals *kg = kernel_globals;
 
@@ -328,7 +328,7 @@
 	return false;
 }
 
-bool OSLRenderServices::get_inverse_matrix(OSL::Matrix44 &result, ustring to)
+bool OSLRenderServices::get_inverse_matrix(OSL::ShaderGlobals *sg, OSL::Matrix44 &result, ustring to)
 {
 	KernelGlobals *kg = kernel_globals;
 	
@@ -356,7 +356,7 @@
 	return false;
 }
 
-bool OSLRenderServices::get_array_attribute(void *renderstate, bool derivatives, 
+bool OSLRenderServices::get_array_attribute(OSL::ShaderGlobals *sg, bool derivatives, 
                                             ustring object, TypeDesc type, ustring name,
                                             int index, void *val)
 {
@@ -751,13 +751,13 @@
 		return false;
 }
 
-bool OSLRenderServices::get_attribute(void *renderstate, bool derivatives, ustring object_name,
+bool OSLRenderServices::get_attribute(OSL::ShaderGlobals *sg, bool derivatives, ustring object_name,
                                       TypeDesc type, ustring name, void *val)
 {
-	if (renderstate == NULL)
+	if (sg->renderstate == NULL)
 		return false;
 
-	ShaderData *sd = (ShaderData *)renderstate;
+	ShaderData *sd = (ShaderData *)(sg->renderstate);
 	KernelGlobals *kg = sd->osl_globals;
 	bool is_curve;
 	int object;
@@ -815,12 +815,12 @@
 }
 
 bool OSLRenderServices::get_userdata(bool derivatives, ustring name, TypeDesc type, 
-                                     void *renderstate, void *val)
+                                     OSL::ShaderGlobals *sg, void *val)
 {
 	return false; /* disabled by lockgeom */
 }
 
-bool OSLRenderServices::has_userdata(ustring name, TypeDesc type, void *renderstate)
+bool OSLRenderServices::has_userdata(ustring name, TypeDesc type, OSL::ShaderGlobals *sg)
 {
 	return false; /* never called by OSL */
 }
@@ -953,7 +953,7 @@
 	return status;
 }
 
-bool OSLRenderServices::get_texture_info(ustring filename, int subimage,
+bool OSLRenderServices::get_texture_info(OSL::ShaderGlobals *sg, ustring filename, int subimage,
                                          ustring dataname,
                                          TypeDesc datatype, void *data)
 {
@@ -1084,7 +1084,7 @@
 					return set_attribute_float(f, type, derivatives, val);
 				}
 
-				return get_attribute(sd, derivatives, u_empty, type, name, val);
+				return get_attribute(sg, derivatives, u_empty, type, name, val);
 			}
 		}
 	}
diff -Naur blender-v2.71-orig/intern/cycles/kernel/osl/osl_services.h blender-v2.71/intern/cycles/kernel/osl/osl_services.h
--- blender-v2.71-orig/intern/cycles/kernel/osl/osl_services.h	2014-09-01 11:43:09.738000000 +0400
+++ blender-v2.71/intern/cycles/kernel/osl/osl_services.h	2014-09-01 11:46:00.531000000 +0400
@@ -49,27 +49,27 @@
 	
 	void thread_init(KernelGlobals *kernel_globals, OSL::TextureSystem *ts);
 
-	bool get_matrix(OSL::Matrix44 &result, OSL::TransformationPtr xform, float time);
-	bool get_inverse_matrix(OSL::Matrix44 &result, OSL::TransformationPtr xform, float time);
+	bool get_matrix(OSL::ShaderGlobals *sg, OSL::Matrix44 &result, OSL::TransformationPtr xform, float time);
+	bool get_inverse_matrix(OSL::ShaderGlobals *sg, OSL::Matrix44 &result, OSL::TransformationPtr xform, float time);
 	
-	bool get_matrix(OSL::Matrix44 &result, ustring from, float time);
-	bool get_inverse_matrix(OSL::Matrix44 &result, ustring to, float time);
+	bool get_matrix(OSL::ShaderGlobals *sg, OSL::Matrix44 &result, ustring from, float time);
+	bool get_inverse_matrix(OSL::ShaderGlobals *sg, OSL::Matrix44 &result, ustring to, float time);
 	
-	bool get_matrix(OSL::Matrix44 &result, OSL::TransformationPtr xform);
-	bool get_inverse_matrix(OSL::Matrix44 &result, OSL::TransformationPtr xform);
+	bool get_matrix(OSL::ShaderGlobals *sg, OSL::Matrix44 &result, OSL::TransformationPtr xform);
+	bool get_inverse_matrix(OSL::ShaderGlobals *sg, OSL::Matrix44 &result, OSL::TransformationPtr xform);
 	
-	bool get_matrix(OSL::Matrix44 &result, ustring from);
-	bool get_inverse_matrix(OSL::Matrix44 &result, ustring from);
+	bool get_matrix(OSL::ShaderGlobals *sg, OSL::Matrix44 &result, ustring from);
+	bool get_inverse_matrix(OSL::ShaderGlobals *sg, OSL::Matrix44 &result, ustring from);
 
-	bool get_array_attribute(void *renderstate, bool derivatives,
+	bool get_array_attribute(OSL::ShaderGlobals *sg, bool derivatives,
 	                         ustring object, TypeDesc type, ustring name,
 	                         int index, void *val);
-	bool get_attribute(void *renderstate, bool derivatives, ustring object,
+	bool get_attribute(OSL::ShaderGlobals *sg, bool derivatives, ustring object,
 	                   TypeDesc type, ustring name, void *val);
 
 	bool get_userdata(bool derivatives, ustring name, TypeDesc type,
-	                  void *renderstate, void *val);
-	bool has_userdata(ustring name, TypeDesc type, void *renderstate);
+	                  OSL::ShaderGlobals *sg, void *val);
+	bool has_userdata(ustring name, TypeDesc type, OSL::ShaderGlobals *sg);
 
 	int pointcloud_search(OSL::ShaderGlobals *sg, ustring filename, const OSL::Vec3 &center,
 	                      float radius, int max_points, bool sort, size_t *out_indices,
@@ -106,7 +106,7 @@
 	                 OSL::ShaderGlobals *sg, const OSL::Vec3 &R,
 	                 const OSL::Vec3 &dRdx, const OSL::Vec3 &dRdy, float *result);
 
-	bool get_texture_info(ustring filename, int subimage,
+	bool get_texture_info(OSL::ShaderGlobals *sg, ustring filename, int subimage,
 	                      ustring dataname, TypeDesc datatype, void *data);
 
 	static bool get_background_attribute(KernelGlobals *kg, ShaderData *sd, ustring name,
@@ -157,6 +157,70 @@
 	static ustring u_v;
 	static ustring u_empty;
 
+#if OSL_LIBRARY_VERSION_CODE < 10500
+	bool get_matrix(OSL::Matrix44 &result, OSL::TransformationPtr xform, float time) {
+		return get_matrix(NULL, result, xform, time);
+	}
+
+	bool get_inverse_matrix(OSL::Matrix44 &result, OSL::TransformationPtr xform, float time) {
+		return get_inverse_matrix(NULL, result, xform, time);
+	}
+
+	bool get_matrix(OSL::Matrix44 &result, ustring from, float time) {
+		return get_matrix(NULL, result, from, time);
+	}
+
+	bool get_inverse_matrix(OSL::Matrix44 &result, ustring to, float time) {
+		return get_inverse_matrix(NULL, result, to, time);
+	}
+
+	bool get_matrix(OSL::Matrix44 &result, OSL::TransformationPtr xform) {
+		return get_matrix(NULL, result, xform);
+	}
+
+	bool get_inverse_matrix(OSL::Matrix44 &result, OSL::TransformationPtr xform) {
+		return get_inverse_matrix(NULL, result, xform);
+	}
+
+	bool get_matrix(OSL::Matrix44 &result, ustring from) {
+		return get_matrix(NULL, result, from);
+	}
+
+	bool get_inverse_matrix(OSL::Matrix44 &result, ustring to) {
+		return get_inverse_matrix(NULL, result, to);
+	}
+
+	bool get_array_attribute(void *renderstate, bool derivatives,
+	                         ustring object, TypeDesc type, ustring name,
+	                         int index, void *val) {
+		OSL::ShaderGlobals sg;
+		sg.renderstate = renderstate;
+		return get_array_attribute(&sg, derivatives,
+		                           object, type, name,
+		                           index, val);
+	}
+
+	bool get_attribute(void *renderstate, bool derivatives, ustring object_name,
+	                   TypeDesc type, ustring name, void *val) {
+		OSL::ShaderGlobals sg;
+		sg.renderstate = renderstate;
+		return get_attribute(&sg, derivatives, object_name, type, name, val);
+	}
+
+	bool has_userdata(ustring name, TypeDesc type, void *renderstate) {
+		return has_userdata(name, type, (OSL::ShaderGlobals *) renderstate);
+	}
+
+	bool get_userdata(bool derivatives, ustring name, TypeDesc type,
+	                  void *renderstate, void *val) {
+		return get_userdata(derivatives, name, type, (OSL::ShaderGlobals *) renderstate, val);
+	}
+
+	bool get_texture_info(ustring filename, int subimage,
+	                      ustring dataname, TypeDesc datatype, void *data) {
+		return get_texture_info(NULL, filename, subimage, dataname, datatype, data);
+	}
+#endif
 private:
 	KernelGlobals *kernel_globals;
 	OSL::TextureSystem *osl_ts;
diff -Naur blender-v2.71-orig/intern/cycles/kernel/shaders/stdosl.h blender-v2.71/intern/cycles/kernel/shaders/stdosl.h
--- blender-v2.71-orig/intern/cycles/kernel/shaders/stdosl.h	2014-08-07 20:48:48.000000000 +0400
+++ blender-v2.71/intern/cycles/kernel/shaders/stdosl.h	2014-09-01 11:45:56.911800000 +0400
@@ -505,11 +505,6 @@
 closure color henyey_greenstein(float g) BUILTIN;
 closure color absorption() BUILTIN;
 
-// Backwards compatibility
-closure color bssrdf_cubic(normal N, vector radius) BUILTIN;
-closure color bssrdf_gaussian(normal N, vector radius) BUILTIN;
-closure color specular_toon(normal N, float size, float smooth) BUILTIN;
-
 // Renderer state
 int raytype (string typename) BUILTIN;
 // the individual 'isFOOray' functions are deprecated
diff -Naur blender-v2.71-orig/intern/cycles/render/osl.cpp blender-v2.71/intern/cycles/render/osl.cpp
--- blender-v2.71-orig/intern/cycles/render/osl.cpp	2014-09-01 10:14:51.548400000 +0400
+++ blender-v2.71/intern/cycles/render/osl.cpp	2014-09-01 11:45:35.555400000 +0400
@@ -248,7 +248,11 @@
 
 bool OSLShaderManager::osl_compile(const string& inputfile, const string& outputfile)
 {
+#if OSL_LIBRARY_VERSION_CODE >= 10500
 	vector<OIIO::string_view> options;
+#else
+	vector<OIIO::string> options;
+#endif
 	string stdosl_path;
 
 	/* specify output file name */
